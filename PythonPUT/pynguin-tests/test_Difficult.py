# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import PythonPUT.src.Difficult as module_0

# @pytest.mark.xfail(strict=True)
# def test_case_0():
#     bool_0 = True
#     difficult_0 = module_0.Difficult()
#     difficult_0.calculate(bool_0, bool_0, multiply=bool_0)


# @pytest.mark.xfail(strict=True)
# def test_case_1():
#     bool_0 = False
#     float_0 = -2529.211
#     none_type_0 = None
#     difficult_0 = module_0.Difficult()
#     var_0 = difficult_0.calculate(bool_0, none_type_0, none_type_0)
#     assert var_0 == 0
#     float_0.calculate(bool_0, bool_0, multiply=bool_0)


def test_case_2():
    difficult_0 = module_0.Difficult()


# @pytest.mark.xfail(strict=True)
# def test_case_3():
#     bool_0 = True
#     list_0 = [bool_0, bool_0, bool_0, bool_0]
#     difficult_0 = module_0.Difficult()
#     var_0 = difficult_0.calculate(bool_0, list_0)
#     assert var_0 == 5
#     var_0.calculate(bool_0, bool_0)


# @pytest.mark.xfail(strict=True)
# def test_case_4():
#     bool_0 = True
#     float_0 = -2556.65946
#     none_type_0 = None
#     difficult_0 = module_0.Difficult()
#     difficult_0.calculate(bool_0, none_type_0, square=float_0)
#
#
# @pytest.mark.xfail(strict=True)
# def test_case_5():
#     bool_0 = True
#     difficult_0 = module_0.Difficult()
#     difficult_0.calculate(bool_0, bool_0, difficult_0)
#
#
# @pytest.mark.xfail(strict=True)
# def test_case_6():
#     bool_0 = True
#     list_0 = [bool_0, bool_0, bool_0, bool_0]
#     difficult_0 = module_0.Difficult()
#     var_0 = difficult_0.calculate(bool_0, list_0)
#     assert var_0 == 5
#     difficult_0.calculate(var_0, list_0, difficult_0, var_0)
#
#
# @pytest.mark.xfail(strict=True)
# def test_case_7():
#     bool_0 = True
#     list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0, bool_0]
#     difficult_0 = module_0.Difficult()
#     var_0 = difficult_0.calculate(bool_0, list_0)
#     assert var_0 == 7
#     bytes_0 = b"\xd4h\xbc~\x06\xd7\xbap7zf\xfbis2\x95\x8c\xd1c\xe3"
#     var_1 = difficult_0.calculate(var_0, bytes_0, square=var_0)
#     assert var_1 == 369870
#     difficult_0.calculate(var_0, list_0, difficult_0, var_0)
