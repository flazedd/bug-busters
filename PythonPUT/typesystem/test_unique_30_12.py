# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import unique as module_0


def test_case_0():
    float_0 = 2796.0
    bool_0 = True
    list_0 = [bool_0]
    uniqueness_0 = module_0.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(float_0)
    assert bool_1 is False


def test_case_1():
    str_0 = "*d[NSE_|XkK."
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_0 = uniqueness_0.__contains__(str_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = False
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(none_type_0)
    var_0.make_hashable(bool_0)


def test_case_3():
    bool_0 = True
    list_0 = [bool_0]
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(list_0)
    assert bool_1 is False
    none_type_0 = uniqueness_0.add(bool_1)
    float_0 = -177.81
    bool_2 = uniqueness_0.__contains__(float_0)
    assert bool_2 is False
    bool_3 = uniqueness_0.__contains__(bool_1)
    assert bool_3 is True
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_1 = uniqueness_0.add(bool_3)
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_4 = uniqueness_2.__contains__(none_type_1)
    assert bool_4 is False
    uniqueness_3 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_4 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_4).__module__}.{type(uniqueness_4).__qualname__}"
        == "unique.Uniqueness"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    none_type_0 = None
    var_0 = uniqueness_0.make_hashable(none_type_0)
    none_type_1 = None
    dict_0 = {
        none_type_1: none_type_1,
        none_type_1: none_type_1,
        none_type_1: none_type_1,
        none_type_1: none_type_1,
    }
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_2 = uniqueness_0.add(none_type_1)
    var_1 = uniqueness_1.make_hashable(dict_0)
    var_1.add(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xfc\x1f\x1eS]\x91FmZ\xa5\x9fC\x1c"
    tuple_0 = (bytes_0,)
    bytes_1 = b"R\xff\x18\x9bHvB\x8d\xa1?"
    dict_0 = {tuple_0: tuple_0, bytes_1: tuple_0, tuple_0: tuple_0, bytes_1: bytes_1}
    dict_1 = {}
    bytes_2 = b"i[y\rm\x1ai>\xce\x90J+Q\xef\x87i6\xf5\xf4\x9f"
    uniqueness_0 = module_0.Uniqueness(bytes_2)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(dict_1)
    var_0.make_hashable(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    uniqueness_0 = module_0.Uniqueness(none_type_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_1.__contains__(uniqueness_0)


def test_case_7():
    bool_0 = False
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(bool_0)
    assert bool_1 is False


@pytest.mark.xfail(strict=True)
def test_case_8():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    list_0 = [uniqueness_0]
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_1.add(list_0)
