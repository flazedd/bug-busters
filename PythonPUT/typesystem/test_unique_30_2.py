# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import unique as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xbay\xa3\x8aE\x07)hg\xd2\x11\x94\xad\xe1p\xa1\xc7\x14\xe2\x9d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    list_0 = [tuple_0, bytes_0]
    module_0.Uniqueness(list_0)


def test_case_1():
    str_0 = "S"
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    none_type_0 = uniqueness_0.add(str_0)


def test_case_2():
    none_type_0 = None
    none_type_1 = None
    uniqueness_0 = module_0.Uniqueness(none_type_1)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(none_type_0)
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_2 = uniqueness_1.add(var_0)


def test_case_3():
    bytes_0 = b"\x04%\x1d\x16\x91\x10\xf6"
    list_0 = [bytes_0, bytes_0]
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    with pytest.raises(AssertionError):
        uniqueness_0.make_hashable(list_0)


def test_case_4():
    str_0 = "-L4D"
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_0 = uniqueness_0.__contains__(str_0)
    assert bool_0 is False
    bool_1 = False
    str_1 = 'LDI+@"Px2&b<'
    none_type_0 = None
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_2 = uniqueness_1.__contains__(none_type_0)
    assert bool_2 is False
    list_0 = [str_1, str_1]
    none_type_1 = uniqueness_1.add(none_type_0)
    list_1 = [list_0, str_1]
    uniqueness_2 = module_0.Uniqueness(list_1)
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_1.make_hashable(none_type_0)
    none_type_2 = uniqueness_2.add(bool_1)
    list_2 = []
    uniqueness_3 = module_0.Uniqueness(list_2)
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    with pytest.raises(AssertionError):
        uniqueness_3.make_hashable(uniqueness_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(bool_0)
    assert bool_1 is False
    uniqueness_0.__contains__(uniqueness_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -690.2
    int_0 = 3694
    list_0 = [int_0, int_0]
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    none_type_0 = None
    var_0 = uniqueness_0.make_hashable(none_type_0)
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_0 = uniqueness_1.__contains__(float_0)
    assert bool_0 is False
    none_type_1 = None
    bool_1 = False
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_3 = module_0.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    var_1 = uniqueness_3.make_hashable(bool_1)
    var_1.__contains__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "-L4D"
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_0 = uniqueness_0.__contains__(str_0)
    assert bool_0 is False
    str_1 = 'LDI+@"Px2&b<'
    none_type_0 = None
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_1 = uniqueness_2.__contains__(none_type_0)
    assert bool_1 is False
    list_0 = [str_0, bool_0, str_0, str_1]
    none_type_1 = uniqueness_2.add(none_type_0)
    list_1 = [list_0, str_1]
    uniqueness_3 = module_0.Uniqueness(list_1)
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_2.make_hashable(none_type_0)
    none_type_2 = uniqueness_2.add(var_0)
    var_1 = uniqueness_2.make_hashable(list_0)
    bytes_0 = b"\x0e\x9f\x91C4;\xc1@\xb9t\xcbl\x0cR9s\x14\xee"
    dict_0 = {bytes_0: uniqueness_0, bytes_0: none_type_1}
    uniqueness_3.__contains__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "-L4D"
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_0 = uniqueness_0.__contains__(str_0)
    assert bool_0 is False
    bool_1 = False
    str_1 = 'LDI+@"Px2&b<'
    none_type_0 = None
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_2 = uniqueness_2.__contains__(none_type_0)
    assert bool_2 is False
    list_0 = [str_0, bool_1, str_0, str_1]
    none_type_1 = uniqueness_2.add(none_type_0)
    list_1 = [list_0, str_1]
    uniqueness_3 = module_0.Uniqueness(list_1)
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_2.make_hashable(none_type_0)
    var_1 = uniqueness_3.make_hashable(str_0)
    assert var_1 == "-L4D"
    none_type_2 = uniqueness_2.add(var_0)
    var_2 = uniqueness_2.make_hashable(list_0)
    dict_0 = {var_0: uniqueness_0, var_0: var_1}
    bool_3 = uniqueness_3.__contains__(dict_0)
    assert bool_3 is False
    var_1.make_hashable(var_1)
