# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import unique as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    none_type_0 = None
    uniqueness_0 = module_0.Uniqueness(none_type_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(bool_0)
    set_0 = {var_0}
    list_0 = [set_0, none_type_0]
    module_0.Uniqueness(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    module_0.Uniqueness(uniqueness_0)


def test_case_2():
    none_type_0 = None
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = uniqueness_0.make_hashable(none_type_0)
    list_0 = []
    var_0 = uniqueness_0.make_hashable(list_0)


def test_case_3():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    with pytest.raises(AssertionError):
        uniqueness_0.make_hashable(uniqueness_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    list_0 = []
    list_1 = uniqueness_1.make_hashable(list_0)
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_1.__contains__(list_1)


def test_case_5():
    int_0 = 657
    bool_0 = True
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(bool_0)
    var_1 = module_0.Uniqueness()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "unique.Uniqueness"
    none_type_0 = var_1.add(int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"E\xb7\xda\xac\x97\x02r\xd9N|\x86\xbb\xdd\xe1O"
    bool_0 = True
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(bool_0)
    var_0.make_hashable(bytes_0)


def test_case_7():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    list_0 = []
    var_0 = uniqueness_0.make_hashable(list_0)


def test_case_8():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    none_type_0 = uniqueness_0.add(bool_0)
    bytes_0 = b"\x07"
    dict_0 = {none_type_0: bytes_0, none_type_0: uniqueness_0}
    with pytest.raises(AssertionError):
        uniqueness_0.make_hashable(dict_0)


def test_case_9():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    dict_0 = {}
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_3 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_3).__module__}.{type(uniqueness_3).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_2.make_hashable(dict_0)
    with pytest.raises(AssertionError):
        uniqueness_2.make_hashable(var_0)


def test_case_10():
    int_0 = -1764
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    none_type_0 = uniqueness_0.add(bool_0)
    var_0 = uniqueness_0.make_hashable(list_0)
    none_type_1 = uniqueness_0.add(none_type_0)
    uniqueness_1 = module_0.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    var_1 = uniqueness_1.make_hashable(int_0)
    assert var_1 == -1764
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    list_1 = [uniqueness_2, var_0, var_1]
    with pytest.raises(AssertionError):
        uniqueness_0.make_hashable(list_1)
