# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import unique as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    int_0 = -2478
    list_0 = [int_0, int_0]
    uniqueness_0 = module_1.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_0 = False
    bool_1 = True
    uniqueness_1 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_1.make_hashable(bool_1)
    var_0.make_hashable(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    uniqueness_0 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_0.add(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "YY7CL\rG_ZLQA>bY;^T+H"
    uniqueness_0 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_1.Uniqueness(str_0)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_0 = uniqueness_1.add(str_0)
    var_0 = uniqueness_1.make_hashable(none_type_0)
    var_1 = uniqueness_1.make_hashable(var_0)
    none_type_1 = uniqueness_1.add(str_0)
    var_2 = uniqueness_1.make_hashable(none_type_0)
    var_2.make_hashable(var_2)


def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    uniqueness_0 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_2 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_0 = uniqueness_2.add(list_0)
    with pytest.raises(AssertionError):
        uniqueness_2.make_hashable(uniqueness_2)


def test_case_4():
    float_0 = -1114.6
    none_type_0 = None
    none_type_1 = None
    uniqueness_0 = module_1.Uniqueness(none_type_1)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(none_type_0)
    dict_0 = {float_0: float_0, float_0: var_0}
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    uniqueness_1 = module_1.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    var_1 = uniqueness_1.make_hashable(dict_0)
    uniqueness_2 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    with pytest.raises(AssertionError):
        uniqueness_2.make_hashable(var_1)


def test_case_5():
    dict_0 = {}
    float_0 = 56.924
    int_0 = 3208
    dict_1 = {float_0: float_0, float_0: float_0, int_0: int_0, float_0: int_0}
    uniqueness_0 = module_1.Uniqueness(dict_1)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(dict_0)
    bytes_0 = b"\r\x81Y6\xff2\xd0\xb6\xa8Z"
    bytes_1 = b"8T\xdaB"
    uniqueness_1 = module_1.Uniqueness(bytes_1)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    with pytest.raises(AssertionError):
        uniqueness_1.make_hashable(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    uniqueness_0 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(bool_0)
    assert bool_1 is False
    uniqueness_0.add(uniqueness_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"k\xe5]y]M\xec\xc1\xabjU\x14\xa82\xc8"
    int_0 = -1494
    uniqueness_0 = module_1.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_1.Uniqueness.TRUE).__module__}.{type(module_1.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_1.Uniqueness.FALSE).__module__}.{type(module_1.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(int_0)
    assert var_0 == -1494
    var_0.make_hashable(bytes_0)
