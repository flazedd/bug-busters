# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import unique as module_0


def test_case_0():
    str_0 = "nst0bG9OhQwt"
    list_0 = [str_0]
    uniqueness_0 = module_0.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness(str_0)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_0 = None
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    bool_0 = uniqueness_2.__contains__(none_type_0)
    assert bool_0 is False
    str_1 = "kF[Pr\rb"
    bool_1 = uniqueness_1.__contains__(none_type_0)
    assert bool_1 is False
    bool_2 = uniqueness_2.__contains__(str_1)
    assert bool_2 is False
    bool_3 = uniqueness_2.__contains__(str_1)
    assert bool_3 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 3750
    int_1 = 443
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(int_1)
    assert var_0 == 443
    var_0.make_hashable(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 3095
    module_0.Uniqueness(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0 = uniqueness_0.make_hashable(none_type_0)
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    var_0.make_hashable(none_type_0)


def test_case_4():
    str_0 = "b"
    list_0 = [str_0]
    uniqueness_0 = module_0.Uniqueness(list_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_1 = module_0.Uniqueness(str_0)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_0 = None
    uniqueness_2 = uniqueness_0.make_hashable(list_0)
    bool_0 = uniqueness_2.__contains__(none_type_0)
    assert bool_0 is False
    str_1 = "kF[Pr\rb"
    bool_1 = uniqueness_1.__contains__(none_type_0)
    assert bool_1 is False
    bool_2 = uniqueness_2.__contains__(str_1)
    assert bool_2 is False
    bool_3 = uniqueness_2.__contains__(str_1)
    assert bool_3 is False


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -1201.727561
    float_1 = -238.661026
    dict_0 = {float_0: float_1, float_1: float_0}
    tuple_0 = (float_0, dict_0)
    uniqueness_0 = module_0.Uniqueness(tuple_0)
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    var_0 = uniqueness_0.make_hashable(float_0)
    assert var_0 == pytest.approx(-1201.727561, abs=0.01, rel=0.01)
    var_0.make_hashable(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_0 = True
    bool_1 = False
    uniqueness_1 = module_0.Uniqueness(bool_1)
    assert (
        f"{type(uniqueness_1).__module__}.{type(uniqueness_1).__qualname__}"
        == "unique.Uniqueness"
    )
    uniqueness_2 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_2).__module__}.{type(uniqueness_2).__qualname__}"
        == "unique.Uniqueness"
    )
    none_type_0 = uniqueness_2.add(bool_0)
    none_type_1 = uniqueness_2.add(bool_0)
    bool_2 = True
    list_0 = [bool_0, uniqueness_2, bool_2, bool_1]
    module_0.Uniqueness(list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    uniqueness_0.add(uniqueness_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    uniqueness_0 = module_0.Uniqueness()
    assert (
        f"{type(uniqueness_0).__module__}.{type(uniqueness_0).__qualname__}"
        == "unique.Uniqueness"
    )
    assert (
        f"{type(module_0.Uniqueness.TRUE).__module__}.{type(module_0.Uniqueness.TRUE).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(module_0.Uniqueness.FALSE).__module__}.{type(module_0.Uniqueness.FALSE).__qualname__}"
        == "builtins.object"
    )
    bool_1 = uniqueness_0.__contains__(bool_0)
    assert bool_1 is False
    none_type_0 = None
    bool_2 = uniqueness_0.__contains__(none_type_0)
    assert bool_2 is False
    bool_3 = uniqueness_0.__contains__(bool_0)
    assert bool_3 is False
    var_0 = uniqueness_0.make_hashable(bool_1)
    var_0.make_hashable(bool_0)
