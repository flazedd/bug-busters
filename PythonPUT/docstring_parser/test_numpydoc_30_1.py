# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpydoc as module_0
import common as module_1
import re as module_2
import collections as module_3


def test_case_0():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31


def test_case_1():
    str_0 = ",abW2tvp4B"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ",abW2tvp4B"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    numpydoc_parser_0 = module_2.purge()
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ",abW2tvp4B"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ",abW2tvp4B"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_1.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    numpydoc_parser_0.add_section(numpydoc_parser_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ",abW2tvp4B"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ",abW2tvp4B"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    module_0.NumpydocParser(docstring_0)


def test_case_5():
    str_0 = "c\n;N"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "c"
    assert docstring_0.long_description == ";N"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_6():
    str_0 = ",abW2tvp4B"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ",abW2tvp4B"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == ",abW2tvp4B"
    assert module_1.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_7():
    str_0 = "\x0c"
    param_section_0 = module_0.ParamSection(str_0, str_0)
    assert (
        f"{type(param_section_0).__module__}.{type(param_section_0).__qualname__}"
        == "numpydoc.ParamSection"
    )
    assert param_section_0.title == "\x0c"
    assert param_section_0.key == "\x0c"
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_1 = module_0.compose(docstring_0, none_type_0)
    assert str_1 == ""
    assert module_1.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = "ls&ci`u\nw}?"
    docstring_1 = module_0.parse(str_2)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "ls&ci`u"
    assert docstring_1.long_description == "w}?"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC


def test_case_8():
    str_0 = ",abW2tvp4B"
    str_1 = "(y\x0c&R\n1pa;,9\x0ct[S"
    docstring_0 = module_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "(y\x0c&R"
    assert docstring_0.long_description == "1pa;,9\x0ct[S"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_2 = module_0.compose(docstring_0)
    assert str_2 == "(y\x0c&R\n1pa;,9\x0ct[S"
    assert module_1.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_1 = module_0.parse(str_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == ",abW2tvp4B"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC


def test_case_9():
    str_0 = "\x0c"
    param_section_0 = module_0.ParamSection(str_0, str_0)
    assert (
        f"{type(param_section_0).__module__}.{type(param_section_0).__qualname__}"
        == "numpydoc.ParamSection"
    )
    assert param_section_0.title == "\x0c"
    assert param_section_0.key == "\x0c"
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "^`HXI\\y_\np"
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "^`HXI\\y_"
    assert docstring_1.long_description == "p"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_10():
    str_0 = "NIW|ZK "
    none_type_0 = None
    sphinx_section_0 = module_0._SphinxSection(str_0, none_type_0)
    assert (
        f"{type(sphinx_section_0).__module__}.{type(sphinx_section_0).__qualname__}"
        == "numpydoc._SphinxSection"
    )
    assert sphinx_section_0.title == "NIW|ZK "
    assert sphinx_section_0.key is None
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_0._SphinxSection.title_pattern).__module__}.{type(module_0._SphinxSection.title_pattern).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\x0c"
    str_2 = "C\x0bGk\x0b"
    sphinx_section_1 = module_0._SphinxSection(str_2, none_type_0)
    assert (
        f"{type(sphinx_section_1).__module__}.{type(sphinx_section_1).__qualname__}"
        == "numpydoc._SphinxSection"
    )
    assert sphinx_section_1.title == "C\x0bGk\x0b"
    assert sphinx_section_1.key is None
    str_3 = "."
    str_4 = "yW ;%js2zi ;fFCKpvd;"
    param_section_0 = module_0.ParamSection(str_4, str_1)
    assert (
        f"{type(param_section_0).__module__}.{type(param_section_0).__qualname__}"
        == "numpydoc.ParamSection"
    )
    assert param_section_0.title == "yW ;%js2zi ;fFCKpvd;"
    assert param_section_0.key == "\x0c"
    k_v_section_0 = module_0._KVSection(str_1, str_4)
    assert (
        f"{type(k_v_section_0).__module__}.{type(k_v_section_0).__qualname__}"
        == "numpydoc._KVSection"
    )
    assert k_v_section_0.title == "\x0c"
    assert k_v_section_0.key == "yW ;%js2zi ;fFCKpvd;"
    iterable_0 = param_section_0.parse(str_3)
    str_5 = "jb*Pe|pxyqy{ne?s"
    examples_section_0 = module_0.ExamplesSection(str_5, str_5)
    assert (
        f"{type(examples_section_0).__module__}.{type(examples_section_0).__qualname__}"
        == "numpydoc.ExamplesSection"
    )
    assert examples_section_0.title == "jb*Pe|pxyqy{ne?s"
    assert examples_section_0.key == "jb*Pe|pxyqy{ne?s"
    iterable_1 = param_section_0.parse(none_type_0)
    docstring_0 = module_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        module_3.namedtuple(str_5, iterable_0, rename=str_3, defaults=none_type_0)
