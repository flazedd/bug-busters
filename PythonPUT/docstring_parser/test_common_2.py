# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    str_0 = "s"
    list_0 = [str_0, str_0]
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, list_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["s", "s"]
    assert docstring_example_0.description == ["s", "s"]
    assert docstring_example_0.snippet == "s"
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    str_0 = "znrwIAg#1uRF^M"
    str_1 = "-"
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        list_0, none_type_0, str_1, none_type_0, list_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["znrwIAg#1uRF^M", "znrwIAg#1uRF^M", "-"]
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == "-"
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional == ["znrwIAg#1uRF^M", "znrwIAg#1uRF^M", "-"]
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_3():
    str_0 = "x^.,tbBj!i#mK*o@"
    str_1 = "x%P>!_`"
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, str_0, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description == "x^.,tbBj!i#mK*o@"
    assert docstring_raises_0.type_name == "x^.,tbBj!i#mK*o@"
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_raises_1 = module_0.DocstringRaises(none_type_0, str_1, none_type_0)
    assert (
        f"{type(docstring_raises_1).__module__}.{type(docstring_raises_1).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_1.args is None
    assert docstring_raises_1.description == "x%P>!_`"
    assert docstring_raises_1.type_name is None
    list_0 = [str_0, str_0, str_1]
    str_2 = "\r$a"
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_2, str_2, str_2, str_2, str_1
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["x^.,tbBj!i#mK*o@", "x^.,tbBj!i#mK*o@", "x%P>!_`"]
    assert docstring_param_0.description == "\r$a"
    assert docstring_param_0.arg_name == "\r$a"
    assert docstring_param_0.type_name == "\r$a"
    assert docstring_param_0.is_optional == "\r$a"
    assert docstring_param_0.default == "x%P>!_`"
    docstring_returns_0 = module_0.DocstringReturns(
        none_type_0, str_2, str_1, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description == "\r$a"
    assert docstring_returns_0.type_name == "x%P>!_`"
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    bytes_0 = b" q\x8d\x8a\x9aF\xc6|\xebE\xdb\\f\xd4\xfa"
    docstring_raises_2 = module_0.DocstringRaises(
        docstring_raises_1, bytes_0, docstring_param_0
    )
    assert (
        f"{type(docstring_raises_2).__module__}.{type(docstring_raises_2).__qualname__}"
        == "common.DocstringRaises"
    )
    assert (
        f"{type(docstring_raises_2.args).__module__}.{type(docstring_raises_2.args).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_2.description == b" q\x8d\x8a\x9aF\xc6|\xebE\xdb\\f\xd4\xfa"
    assert (
        f"{type(docstring_raises_2.type_name).__module__}.{type(docstring_raises_2.type_name).__qualname__}"
        == "common.DocstringParam"
    )


def test_case_4():
    str_0 = "26xr6G\rf<R\\w>JX{Uel"
    str_1 = "uT"
    list_0 = [str_0, str_1, str_1, str_0]
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_raises_1 = module_0.DocstringRaises(list_0, list_0, str_0)
    assert (
        f"{type(docstring_raises_1).__module__}.{type(docstring_raises_1).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_1.args == [
        "26xr6G\rf<R\\w>JX{Uel",
        "uT",
        "uT",
        "26xr6G\rf<R\\w>JX{Uel",
    ]
    assert docstring_raises_1.description == [
        "26xr6G\rf<R\\w>JX{Uel",
        "uT",
        "uT",
        "26xr6G\rf<R\\w>JX{Uel",
    ]
    assert docstring_raises_1.type_name == "26xr6G\rf<R\\w>JX{Uel"
    docstring_meta_0 = module_0.DocstringMeta(str_1, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == "uT"
    assert docstring_meta_0.description == "26xr6G\rf<R\\w>JX{Uel"
    docstring_meta_1 = module_0.DocstringMeta(list_0, docstring_meta_0)
    assert (
        f"{type(docstring_meta_1).__module__}.{type(docstring_meta_1).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_1.args == [
        "26xr6G\rf<R\\w>JX{Uel",
        "uT",
        "uT",
        "26xr6G\rf<R\\w>JX{Uel",
    ]
    assert (
        f"{type(docstring_meta_1.description).__module__}.{type(docstring_meta_1.description).__qualname__}"
        == "common.DocstringMeta"
    )


def test_case_5():
    str_0 = "RIz^,%+e[C \x0co-K8"
    str_1 = "MnAa>\n%_"
    str_2 = "u$|"
    docstring_example_0 = module_0.DocstringExample(str_0, str_0, str_2)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == "RIz^,%+e[C \x0co-K8"
    assert docstring_example_0.description == "u$|"
    assert docstring_example_0.snippet == "RIz^,%+e[C \x0co-K8"
    assert module_0.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "parameter",
        "keyword",
        "key",
        "argument",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_0 = [str_2, str_0]
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(list_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == ["u$|", "RIz^,%+e[C \x0co-K8"]
    assert docstring_meta_0.description is None
    list_1 = [str_0, str_1]
    docstring_meta_1 = module_0.DocstringMeta(list_1, str_0)
    assert (
        f"{type(docstring_meta_1).__module__}.{type(docstring_meta_1).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_1.args == ["RIz^,%+e[C \x0co-K8", "MnAa>\n%_"]
    assert docstring_meta_1.description == "RIz^,%+e[C \x0co-K8"
    docstring_raises_0 = module_0.DocstringRaises(list_1, str_0, docstring_meta_1)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["RIz^,%+e[C \x0co-K8", "MnAa>\n%_"]
    assert docstring_raises_0.description == "RIz^,%+e[C \x0co-K8"
    assert (
        f"{type(docstring_raises_0.type_name).__module__}.{type(docstring_raises_0.type_name).__qualname__}"
        == "common.DocstringMeta"
    )
    docstring_meta_2 = module_0.DocstringMeta(list_1, str_1)
    assert (
        f"{type(docstring_meta_2).__module__}.{type(docstring_meta_2).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_2.args == ["RIz^,%+e[C \x0co-K8", "MnAa>\n%_"]
    assert docstring_meta_2.description == "MnAa>\n%_"
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_1, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["RIz^,%+e[C \x0co-K8", "MnAa>\n%_"]
    assert docstring_deprecated_0.description == "MnAa>\n%_"
    assert docstring_deprecated_0.version == "MnAa>\n%_"
