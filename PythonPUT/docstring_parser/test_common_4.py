# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0
import enum as module_1


def test_case_0():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_1():
    int_0 = -570
    none_type_0 = None
    str_0 = "nYZH;{N eLqe\x0b;!"
    docstring_param_0 = module_0.DocstringParam(
        int_0, none_type_0, str_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == -570
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == "nYZH;{N eLqe\x0b;!"
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(
        none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_1.EnumMeta()


def test_case_3():
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(docstring_style_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == module_0.DocstringStyle.NUMPYDOC
    assert docstring_meta_0.description is None
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_raises_0 = module_0.DocstringRaises(
        rendering_style_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == module_0.RenderingStyle.COMPACT
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None


def test_case_4():
    str_0 = "@7JTr\x0bft@,\\"
    str_1 = "$[a*<+mM"
    str_2 = "w`(E[75ZW:k`CY~IJ["
    list_0 = [str_0, str_1, str_2]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == [
        "@7JTr\x0bft@,\\",
        "$[a*<+mM",
        "w`(E[75ZW:k`CY~IJ[",
    ]
    assert docstring_meta_0.description == "@7JTr\x0bft@,\\"
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    int_0 = 2617
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(int_0, none_type_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == 2617
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None
    none_type_1 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        none_type_1, int_0, none_type_1
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description == 2617
    assert docstring_deprecated_0.version is None
    docstring_raises_1 = module_0.DocstringRaises(int_0, none_type_1, none_type_1)
    assert (
        f"{type(docstring_raises_1).__module__}.{type(docstring_raises_1).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_1.args == 2617
    assert docstring_raises_1.description is None
    assert docstring_raises_1.type_name is None


def test_case_5():
    list_0 = []
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(list_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == []
    assert docstring_meta_0.description is None
    docstring_example_0 = module_0.DocstringExample(list_0, list_0, none_type_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == []
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet == []


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "argument",
        "attribute",
        "param",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
