# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    pass


def test_case_1():
    list_0 = []
    str_0 = "|l7BdKK1WxaE+K0*"
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == []
    assert docstring_example_0.description == "|l7BdKK1WxaE+K0*"
    assert docstring_example_0.snippet == "|l7BdKK1WxaE+K0*"
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_2():
    list_0 = []
    str_0 = 'td(3(se"'
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_0, str_0, str_0, str_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == []
    assert docstring_param_0.description == 'td(3(se"'
    assert docstring_param_0.arg_name == 'td(3(se"'
    assert docstring_param_0.type_name == 'td(3(se"'
    assert docstring_param_0.is_optional == 'td(3(se"'
    assert docstring_param_0.default == 'td(3(se"'
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_meta_0 = module_0.DocstringMeta(str_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == 'td(3(se"'
    assert docstring_meta_0.description == 'td(3(se"'


def test_case_3():
    docstring_style_0 = module_0.DocstringStyle.EPYDOC
    list_0 = []
    none_type_0 = None
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(
        list_0, none_type_0, docstring_style_0, bool_0, list_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == []
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name == module_0.DocstringStyle.EPYDOC
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name == []
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_4():
    str_0 = "jH+ah9/mY'BD"
    list_0 = [str_0, str_0]
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["jH+ah9/mY'BD", "jH+ah9/mY'BD"]
    assert docstring_raises_0.description == "jH+ah9/mY'BD"
    assert docstring_raises_0.type_name == "jH+ah9/mY'BD"
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_5():
    list_0 = []
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(list_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == []
    assert docstring_meta_0.description is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    str_0 = "VGF\\9$"
    list_1 = [str_0]
    none_type_1 = None
    docstring_returns_0 = module_0.DocstringReturns(
        list_0, none_type_1, none_type_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == []
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name == "VGF\\9$"
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_1, str_0, none_type_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["VGF\\9$"]
    assert docstring_deprecated_0.description == "VGF\\9$"
    assert docstring_deprecated_0.version is None


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "attribute",
        "keyword",
        "key",
        "arg",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "raises", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
