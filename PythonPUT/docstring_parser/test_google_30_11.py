# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import google as module_0
import common as module_1
import token as module_2
import inspect as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -3369
    module_0.GoogleParser(int_0)


def test_case_1():
    google_parser_0 = module_0.GoogleParser()
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12


def test_case_2():
    none_type_0 = None
    google_parser_0 = module_0.GoogleParser(none_type_0, none_type_0)
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is None
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12


def test_case_3():
    str_0 = "[m3r{Nt1\\tNQIb,)zUq"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "[m3r{Nt1\\tNQIb,)zUq"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    google_parser_0 = module_0.GoogleParser()
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    google_parser_0.__or__(none_type_0)


def test_case_5():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6():
    google_parser_0 = module_0.GoogleParser()
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    none_type_0 = None
    google_parser_0.add_section(none_type_0)


def test_case_7():
    str_0 = "%\n XM"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "%"
    assert docstring_0.long_description == "XM"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_8():
    str_0 = "~0"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "~0"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0)
    assert str_1 == "~0"
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "%\n X"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "%"
    assert docstring_0.long_description == "X"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0)
    assert str_1 == "%\nX"
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_2.ISTERMINAL(docstring_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "$-*6wggf"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "$-*6wggf"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "%\n X"
    docstring_1 = module_1.Docstring(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == "%\n X"
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = module_0.compose(docstring_1, docstring_0)
    assert str_2 == ""
    module_2.ISNONTERMINAL(str_0)


def test_case_11():
    str_0 = "$-*6wggf"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "$-*6wggf"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "k%\n "
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "k%"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = "_"
    str_3 = module_0.compose(docstring_1, docstring_0)
    assert str_3 == "k%"
    with pytest.raises(TypeError):
        module_3.getargs(str_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "$-*6wggf"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "$-*6wggf"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "tX6Bf5Vvr:=)a*\nisA"
    str_2 = "Kgt}$P#A~]/\n\n;"
    docstring_1 = module_0.parse(str_2)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "Kgt}$P#A~]/"
    assert docstring_1.long_description == ";"
    assert docstring_1.blank_after_short_description is True
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "key",
        "arg",
        "argument",
        "attribute",
        "parameter",
        "param",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_3 = module_0.compose(docstring_1, docstring_0)
    assert str_3 == "Kgt}$P#A~]/\n\n;"
    module_2.ISTERMINAL(str_1)
