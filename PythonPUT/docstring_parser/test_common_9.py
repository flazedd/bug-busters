# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    pass


def test_case_1():
    str_0 = "jy"
    list_0 = [str_0, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, list_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["jy", "jy"]
    assert docstring_deprecated_0.description == ["jy", "jy"]
    assert docstring_deprecated_0.version == ["jy", "jy"]
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    str_0 = "Gy"
    str_1 = "IW!O1Wl\n\x0b]L9\x0b<"
    list_0 = [str_0, str_1]
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_1, str_1, list_0, str_0)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["Gy", "IW!O1Wl\n\x0b]L9\x0b<"]
    assert docstring_returns_0.description == "IW!O1Wl\n\x0b]L9\x0b<"
    assert docstring_returns_0.type_name == "IW!O1Wl\n\x0b]L9\x0b<"
    assert docstring_returns_0.is_generator == ["Gy", "IW!O1Wl\n\x0b]L9\x0b<"]
    assert docstring_returns_0.return_name == "Gy"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_1 = [str_0]
    str_2 = "b|j\n"
    docstring_param_0 = module_0.DocstringParam(
        list_1, str_0, str_2, list_1, list_1, list_1
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["Gy"]
    assert docstring_param_0.description == "Gy"
    assert docstring_param_0.arg_name == "b|j\n"
    assert docstring_param_0.type_name == ["Gy"]
    assert docstring_param_0.is_optional == ["Gy"]
    assert docstring_param_0.default == ["Gy"]


def test_case_3():
    float_0 = 1556.50286
    none_type_0 = None
    bool_0 = True
    docstring_returns_0 = module_0.DocstringReturns(
        float_0, none_type_0, none_type_0, bool_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == pytest.approx(1556.50286, abs=0.01, rel=0.01)
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_4():
    str_0 = "[G\n@QoQ^"
    list_0 = [str_0]
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["[G\n@QoQ^"]
    assert docstring_raises_0.description == ["[G\n@QoQ^"]
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "6;v(mKxS>{K5H+k*\t"
    dict_0 = {str_0: str_0}
    list_0 = []
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, dict_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == []
    assert docstring_example_0.description == {
        "6;v(mKxS>{K5H+k*\t": "6;v(mKxS>{K5H+k*\t"
    }
    assert docstring_example_0.snippet == "6;v(mKxS>{K5H+k*\t"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_0.ParseError(**dict_0)


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "argument",
        "attribute",
        "key",
        "keyword",
        "arg",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
