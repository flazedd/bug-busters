# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    bytes_0 = b"\xa5\x7f\x01\xb4.\x8e\x8a\xe7\xc2\xac\xe0\xd8(qC["
    str_0 = "]~n\t"
    docstring_meta_0 = module_0.DocstringMeta(bytes_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == b"\xa5\x7f\x01\xb4.\x8e\x8a\xe7\xc2\xac\xe0\xd8(qC["
    assert docstring_meta_0.description == "]~n\t"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_2():
    str_0 = "p-(F\rA6Z<:mEj\rl<TG"
    list_0 = [str_0]
    str_1 = "x}V2}mCTX"
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["p-(F\rA6Z<:mEj\rl<TG"]
    assert docstring_raises_0.description == ["p-(F\rA6Z<:mEj\rl<TG"]
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    bool_0 = True
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_0, str_1, str_1, bool_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["p-(F\rA6Z<:mEj\rl<TG"]
    assert docstring_param_0.description == "p-(F\rA6Z<:mEj\rl<TG"
    assert docstring_param_0.arg_name == "x}V2}mCTX"
    assert docstring_param_0.type_name == "x}V2}mCTX"
    assert docstring_param_0.is_optional is True
    assert docstring_param_0.default == "p-(F\rA6Z<:mEj\rl<TG"


def test_case_3():
    str_0 = "}V^"
    str_1 = "MJz%fsd0]r-e?(@"
    str_2 = "23\x0bMz`xBs[i6IF_a]:^s"
    list_0 = [str_0, str_1, str_2, str_1]
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_2, str_0, list_0, str_2)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == [
        "}V^",
        "MJz%fsd0]r-e?(@",
        "23\x0bMz`xBs[i6IF_a]:^s",
        "MJz%fsd0]r-e?(@",
    ]
    assert docstring_returns_0.description == "23\x0bMz`xBs[i6IF_a]:^s"
    assert docstring_returns_0.type_name == "}V^"
    assert docstring_returns_0.is_generator == [
        "}V^",
        "MJz%fsd0]r-e?(@",
        "23\x0bMz`xBs[i6IF_a]:^s",
        "MJz%fsd0]r-e?(@",
    ]
    assert docstring_returns_0.return_name == "23\x0bMz`xBs[i6IF_a]:^s"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_4():
    str_0 = "*>?pV*$a"
    str_1 = '}5"kg4'
    list_0 = [str_0, str_1, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["*>?pV*$a", '}5"kg4', "*>?pV*$a"]
    assert docstring_deprecated_0.description == ["*>?pV*$a", '}5"kg4', "*>?pV*$a"]
    assert docstring_deprecated_0.version == '}5"kg4'
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_5():
    str_0 = "EbyQ\x0bIT/Rj\n`'}&"
    str_1 = "(<Rwl;{I^.]U=?*]tlx"
    str_2 = "&cAI:Y:Fm~C"
    list_0 = [str_0, str_1, str_1, str_2]
    docstring_example_0 = module_0.DocstringExample(list_0, str_2, str_1)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == [
        "EbyQ\x0bIT/Rj\n`'}&",
        "(<Rwl;{I^.]U=?*]tlx",
        "(<Rwl;{I^.]U=?*]tlx",
        "&cAI:Y:Fm~C",
    ]
    assert docstring_example_0.description == "(<Rwl;{I^.]U=?*]tlx"
    assert docstring_example_0.snippet == "&cAI:Y:Fm~C"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "keyword",
        "arg",
        "key",
        "attribute",
        "parameter",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
