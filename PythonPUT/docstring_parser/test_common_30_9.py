# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "attribute",
        "key",
        "argument",
        "param",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    docstring_style_0 = module_0.DocstringStyle.GOOGLE
    str_0 = "?3r,m:m"
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        docstring_style_0, str_0, str_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == module_0.DocstringStyle.GOOGLE
    assert docstring_deprecated_0.description == "?3r,m:m"
    assert docstring_deprecated_0.version == "?3r,m:m"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "attribute",
        "key",
        "argument",
        "param",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    none_type_0 = None
    str_0 = "_u4v\nxnQ9!"
    list_0 = [str_0]
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, none_type_0, str_0)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["_u4v\nxnQ9!"]
    assert docstring_returns_0.description == "_u4v\nxnQ9!"
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator == "_u4v\nxnQ9!"
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "attribute",
        "key",
        "argument",
        "param",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_param_0 = module_0.DocstringParam(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args is None
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_raises_0 = module_0.DocstringRaises(
        none_type_0, docstring_param_0, none_type_0
    )
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args is None
    assert (
        f"{type(docstring_raises_0.description).__module__}.{type(docstring_raises_0.description).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_raises_0.type_name is None


def test_case_3():
    str_0 = ">(Q*2"
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(none_type_0, str_0, none_type_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args is None
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet == ">(Q*2"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "attribute",
        "key",
        "argument",
        "param",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_1 = "ZTUAIbrQx='\r\\\n3y"
    str_2 = "0Ji,T\x0b_"
    str_3 = '$"|'
    list_0 = [str_1, str_2, str_3]
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_2, str_0, none_type_0, str_2, str_3
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["ZTUAIbrQx='\r\\\n3y", "0Ji,T\x0b_", '$"|']
    assert docstring_param_0.description == "0Ji,T\x0b_"
    assert docstring_param_0.arg_name == ">(Q*2"
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional == "0Ji,T\x0b_"
    assert docstring_param_0.default == '$"|'
    list_1 = [str_0]
    docstring_example_1 = module_0.DocstringExample(list_1, str_0, str_0)
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_1.args == [">(Q*2"]
    assert docstring_example_1.description == ">(Q*2"
    assert docstring_example_1.snippet == ">(Q*2"
