# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    pass


def test_case_1():
    str_0 = "~UMT|(k"
    list_0 = [str_0, str_0, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["~UMT|(k", "~UMT|(k", "~UMT|(k"]
    assert docstring_deprecated_0.description == "~UMT|(k"
    assert docstring_deprecated_0.version == "~UMT|(k"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "key",
        "arg",
        "argument",
        "keyword",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "except", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )


def test_case_2():
    str_0 = "\x0bG"
    str_1 = ".m\t-Q:#'/^R"
    docstring_deprecated_0 = module_0.DocstringDeprecated(str_1, str_1, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ".m\t-Q:#'/^R"
    assert docstring_deprecated_0.description == ".m\t-Q:#'/^R"
    assert docstring_deprecated_0.version == "\x0bG"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "key",
        "arg",
        "argument",
        "keyword",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "except", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = ";@X'gW|tGmHF]yp9M#`D"
    list_0 = [str_0, str_1, str_2]
    docstring_deprecated_1 = module_0.DocstringDeprecated(list_0, str_0, str_1)
    assert (
        f"{type(docstring_deprecated_1).__module__}.{type(docstring_deprecated_1).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_1.args == [
        "\x0bG",
        ".m\t-Q:#'/^R",
        ";@X'gW|tGmHF]yp9M#`D",
    ]
    assert docstring_deprecated_1.description == "\x0bG"
    assert docstring_deprecated_1.version == ".m\t-Q:#'/^R"
    docstring_param_0 = module_0.DocstringParam(
        docstring_deprecated_1, str_2, list_0, str_0, docstring_deprecated_1, str_1
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert (
        f"{type(docstring_param_0.args).__module__}.{type(docstring_param_0.args).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_param_0.description == ";@X'gW|tGmHF]yp9M#`D"
    assert docstring_param_0.arg_name == [
        "\x0bG",
        ".m\t-Q:#'/^R",
        ";@X'gW|tGmHF]yp9M#`D",
    ]
    assert docstring_param_0.type_name == "\x0bG"
    assert (
        f"{type(docstring_param_0.is_optional).__module__}.{type(docstring_param_0.is_optional).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_param_0.default == ".m\t-Q:#'/^R"
    docstring_deprecated_2 = module_0.DocstringDeprecated(
        list_0, str_0, docstring_deprecated_0
    )
    assert (
        f"{type(docstring_deprecated_2).__module__}.{type(docstring_deprecated_2).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_2.args == [
        "\x0bG",
        ".m\t-Q:#'/^R",
        ";@X'gW|tGmHF]yp9M#`D",
    ]
    assert docstring_deprecated_2.description == "\x0bG"
    assert (
        f"{type(docstring_deprecated_2.version).__module__}.{type(docstring_deprecated_2.version).__qualname__}"
        == "common.DocstringDeprecated"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "I5r;{& 9j|/*_"
    str_1 = "(;l}:"
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(
        list_0, list_0, str_0, str_1, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["I5r;{& 9j|/*_", "I5r;{& 9j|/*_", "(;l}:"]
    assert docstring_returns_0.description == [
        "I5r;{& 9j|/*_",
        "I5r;{& 9j|/*_",
        "(;l}:",
    ]
    assert docstring_returns_0.type_name == "I5r;{& 9j|/*_"
    assert docstring_returns_0.is_generator == "(;l}:"
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "key",
        "arg",
        "argument",
        "keyword",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "except", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        docstring_returns_0, docstring_returns_0, str_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert (
        f"{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}"
        == "common.DocstringReturns"
    )
    assert (
        f"{type(docstring_deprecated_0.description).__module__}.{type(docstring_deprecated_0.description).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_deprecated_0.version == "I5r;{& 9j|/*_"
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    str_2 = '8"tyU9#Gl!_@!:1n'
    docstring_example_0 = module_0.DocstringExample(docstring_style_0, str_2, str_2)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == module_0.DocstringStyle.NUMPYDOC
    assert docstring_example_0.description == '8"tyU9#Gl!_@!:1n'
    assert docstring_example_0.snippet == '8"tyU9#Gl!_@!:1n'
    docstring_style_0.__call__(
        str_2,
        docstring_style_0,
        qualname=docstring_style_0,
        type=docstring_example_0,
        start=str_2,
    )


def test_case_4():
    str_0 = "V%IggX o/k"
    str_1 = "JC&{`)sMrl"
    list_0 = [str_0, str_1]
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "key",
        "arg",
        "argument",
        "keyword",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "except", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_0 = module_0.Docstring(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, list_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["V%IggX o/k", "JC&{`)sMrl"]
    assert docstring_raises_0.description == "V%IggX o/k"
    assert docstring_raises_0.type_name == ["V%IggX o/k", "JC&{`)sMrl"]


def test_case_5():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "key",
        "arg",
        "argument",
        "keyword",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "exception", "except", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
