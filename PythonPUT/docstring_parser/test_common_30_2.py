# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_1():
    list_0 = []
    str_0 = ""
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == []
    assert docstring_meta_0.description == ""
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


@pytest.mark.xfail(strict=True)
def test_case_2():
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    docstring_style_0 = module_0.DocstringStyle.NUMPYDOC
    str_0 = "zIv'}<Wcb'cKd+qMb\r\x0c"
    str_1 = "`v~S.zAD$"
    list_0 = [str_0, str_1]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_1, str_0, str_1, none_type_0, docstring_style_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["zIv'}<Wcb'cKd+qMb\r\x0c", "`v~S.zAD$"]
    assert docstring_param_0.description == "`v~S.zAD$"
    assert docstring_param_0.arg_name == "zIv'}<Wcb'cKd+qMb\r\x0c"
    assert docstring_param_0.type_name == "`v~S.zAD$"
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == module_0.DocstringStyle.NUMPYDOC
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    bool_0 = False
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["zIv'}<Wcb'cKd+qMb\r\x0c", "`v~S.zAD$"]
    assert docstring_deprecated_0.description == "zIv'}<Wcb'cKd+qMb\r\x0c"
    assert docstring_deprecated_0.version == "`v~S.zAD$"
    docstring_example_0 = module_0.DocstringExample(list_0, str_1, bool_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["zIv'}<Wcb'cKd+qMb\r\x0c", "`v~S.zAD$"]
    assert docstring_example_0.description is False
    assert docstring_example_0.snippet == "`v~S.zAD$"
    rendering_style_0.__setattr__(list_0, docstring_example_0, str_0)


def test_case_3():
    str_0 = "4$7/\x0b#]]"
    str_1 = "bI:/<`^[G(~\nS+%\x0cDb["
    list_0 = [str_1, str_1, str_1]
    bool_0 = False
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, str_1, bool_0)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == [
        "bI:/<`^[G(~\nS+%\x0cDb[",
        "bI:/<`^[G(~\nS+%\x0cDb[",
        "bI:/<`^[G(~\nS+%\x0cDb[",
    ]
    assert docstring_returns_0.description == "4$7/\x0b#]]"
    assert docstring_returns_0.type_name == "bI:/<`^[G(~\nS+%\x0cDb["
    assert docstring_returns_0.is_generator is False
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    list_1 = [str_0, str_0]
    docstring_raises_0 = module_0.DocstringRaises(list_1, list_1, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["4$7/\x0b#]]", "4$7/\x0b#]]"]
    assert docstring_raises_0.description == ["4$7/\x0b#]]", "4$7/\x0b#]]"]
    assert docstring_raises_0.type_name == "4$7/\x0b#]]"


def test_case_4():
    str_0 = ",DlDB[a64uQpsbNBw?H|"
    str_1 = ",3Z~3w\x0b%GZw~2OYG"
    list_0 = [str_0, str_0, str_1]
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == [
        ",DlDB[a64uQpsbNBw?H|",
        ",DlDB[a64uQpsbNBw?H|",
        ",3Z~3w\x0b%GZw~2OYG",
    ]
    assert docstring_raises_0.description == ",DlDB[a64uQpsbNBw?H|"
    assert docstring_raises_0.type_name == ",DlDB[a64uQpsbNBw?H|"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_5():
    str_0 = "`x9Sh@]afRQh)>\\.x"
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["`x9Sh@]afRQh)>\\.x"]
    assert docstring_deprecated_0.description == ["`x9Sh@]afRQh)>\\.x"]
    assert docstring_deprecated_0.version == "`x9Sh@]afRQh)>\\.x"
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_0 = "9$O"
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    str_1 = "s)?}ry<"
    list_0 = [str_0, str_0, str_0, str_1]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_1, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["9$O", "9$O", "9$O", "s)?}ry<"]
    assert docstring_deprecated_0.description == "s)?}ry<"
    assert docstring_deprecated_0.version == "s)?}ry<"
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(str_0, none_type_0, none_type_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == "9$O"
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None


def test_case_7():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "param",
        "parameter",
        "key",
        "attribute",
        "keyword",
        "arg",
        "argument",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
