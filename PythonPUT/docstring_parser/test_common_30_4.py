# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_1():
    float_0 = 636.35
    str_0 = "2U$\n[3)r^t2W"
    docstring_raises_0 = module_0.DocstringRaises(float_0, float_0, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == pytest.approx(636.35, abs=0.01, rel=0.01)
    assert docstring_raises_0.description == pytest.approx(636.35, abs=0.01, rel=0.01)
    assert docstring_raises_0.type_name == "2U$\n[3)r^t2W"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    str_0 = "xeS"
    list_0 = [str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        list_0, list_0, none_type_0, none_type_0, list_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["xeS"]
    assert docstring_param_0.description == ["xeS"]
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional == ["xeS"]
    assert docstring_param_0.default == "xeS"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_3():
    str_0 = "iqB{|X!UU;Fs}"
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, list_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["iqB{|X!UU;Fs}"]
    assert docstring_deprecated_0.description == "iqB{|X!UU;Fs}"
    assert docstring_deprecated_0.version == ["iqB{|X!UU;Fs}"]
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_0 = None
    str_1 = "dlP9"
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, none_type_0, str_1)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["iqB{|X!UU;Fs}"]
    assert docstring_returns_0.description == "iqB{|X!UU;Fs}"
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator == "dlP9"
    assert docstring_returns_0.return_name is None


def test_case_4():
    str_0 = "nvfi-.BM2\t"
    list_0 = [str_0, str_0, str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["nvfi-.BM2\t", "nvfi-.BM2\t", "nvfi-.BM2\t"]
    assert docstring_deprecated_0.description == [
        "nvfi-.BM2\t",
        "nvfi-.BM2\t",
        "nvfi-.BM2\t",
    ]
    assert docstring_deprecated_0.version == "nvfi-.BM2\t"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_5():
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(
        none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args is None
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_0 = "R@l.E\x0cm)$n\n01"
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    str_1 = "ddE}v%hVn0=]%,Mu?"
    list_0 = [str_0, str_0, str_0, str_1]
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, parse_error_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == [
        "R@l.E\x0cm)$n\n01",
        "R@l.E\x0cm)$n\n01",
        "R@l.E\x0cm)$n\n01",
        "ddE}v%hVn0=]%,Mu?",
    ]
    assert docstring_raises_0.description == "R@l.E\x0cm)$n\n01"
    assert (
        f"{type(docstring_raises_0.type_name).__module__}.{type(docstring_raises_0.type_name).__qualname__}"
        == "common.ParseError"
    )
    docstring_example_1 = module_0.DocstringExample(
        docstring_example_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert (
        f"{type(docstring_example_1.args).__module__}.{type(docstring_example_1.args).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_1.description == "R@l.E\x0cm)$n\n01"
    assert docstring_example_1.snippet is None
    var_0 = docstring_example_0.__dir__()


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "argument",
        "attribute",
        "keyword",
        "parameter",
        "param",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
