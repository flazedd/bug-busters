# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    pass


def test_case_1():
    str_0 = "\nnQb2"
    str_1 = "9$8JRH;"
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(list_0, str_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == ["\nnQb2", "\nnQb2", "9$8JRH;"]
    assert docstring_raises_0.description == "\nnQb2"
    assert docstring_raises_0.type_name is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "key",
        "arg",
        "param",
        "attribute",
        "argument",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "raises", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    rendering_style_0 = module_0.RenderingStyle.CLEAN
    float_0 = 2916.004
    str_0 = 'H9",lJ>'
    bool_0 = True
    str_1 = "FtI\\rJJt}#Z"
    list_0 = [str_0, str_1]
    str_2 = "Eg!u"
    docstring_returns_0 = module_0.DocstringReturns(
        list_0, str_2, str_1, bool_0, list_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ['H9",lJ>', "FtI\\rJJt}#Z"]
    assert docstring_returns_0.description == "Eg!u"
    assert docstring_returns_0.type_name == "FtI\\rJJt}#Z"
    assert docstring_returns_0.is_generator is True
    assert docstring_returns_0.return_name == ['H9",lJ>', "FtI\\rJJt}#Z"]
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "key",
        "arg",
        "param",
        "attribute",
        "argument",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "raises", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_param_0 = module_0.DocstringParam(
        rendering_style_0, float_0, str_0, str_0, bool_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == module_0.RenderingStyle.CLEAN
    assert docstring_param_0.description == pytest.approx(2916.004, abs=0.01, rel=0.01)
    assert docstring_param_0.arg_name == 'H9",lJ>'
    assert docstring_param_0.type_name == 'H9",lJ>'
    assert docstring_param_0.is_optional is True
    assert docstring_param_0.default == 'H9",lJ>'


def test_case_3():
    list_0 = []
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        list_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "key",
        "arg",
        "param",
        "attribute",
        "argument",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "raises", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = None
    docstring_deprecated_1 = module_0.DocstringDeprecated(
        list_0, none_type_1, none_type_1
    )
    assert (
        f"{type(docstring_deprecated_1).__module__}.{type(docstring_deprecated_1).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_1.args == []
    assert docstring_deprecated_1.description is None
    assert docstring_deprecated_1.version is None
    docstring_meta_0 = module_0.DocstringMeta(list_0, list_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == []
    assert docstring_meta_0.description == []


def test_case_4():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "key",
        "arg",
        "param",
        "attribute",
        "argument",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "raises", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_0 = []
    str_0 = "vD\t[YFm549D!sZik"
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == []
    assert docstring_example_0.description == "vD\t[YFm549D!sZik"
    assert docstring_example_0.snippet == "vD\t[YFm549D!sZik"


def test_case_5():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "key",
        "arg",
        "param",
        "attribute",
        "argument",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "except", "raises", "exception"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
