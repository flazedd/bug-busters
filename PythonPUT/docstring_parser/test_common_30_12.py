# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    pass


def test_case_1():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_0 = None
    docstring_raises_0 = module_0.DocstringRaises(
        parse_error_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert (
        f"{type(docstring_raises_0.args).__module__}.{type(docstring_raises_0.args).__qualname__}"
        == "common.ParseError"
    )
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None


def test_case_2():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    set_0 = {docstring_0}
    str_0 = "cg>kq_j\twO)kFk\x0cT"
    bool_0 = True
    docstring_param_0 = module_0.DocstringParam(
        set_0, set_0, str_0, str_0, bool_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert (
        f"{type(docstring_param_0.args).__module__}.{type(docstring_param_0.args).__qualname__}"
        == "builtins.set"
    )
    assert len(docstring_param_0.args) == 1
    assert (
        f"{type(docstring_param_0.description).__module__}.{type(docstring_param_0.description).__qualname__}"
        == "builtins.set"
    )
    assert len(docstring_param_0.description) == 1
    assert docstring_param_0.arg_name == "cg>kq_j\twO)kFk\x0cT"
    assert docstring_param_0.type_name == "cg>kq_j\twO)kFk\x0cT"
    assert docstring_param_0.is_optional is True
    assert docstring_param_0.default == "cg>kq_j\twO)kFk\x0cT"


def test_case_3():
    str_0 = ",)=:vXgRKUZfu/ya2"
    none_type_0 = None
    docstring_returns_0 = module_0.DocstringReturns(
        str_0, str_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ",)=:vXgRKUZfu/ya2"
    assert docstring_returns_0.description == ",)=:vXgRKUZfu/ya2"
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_4():
    bool_0 = False
    str_0 = "'0M|\x0c"
    docstring_deprecated_0 = module_0.DocstringDeprecated(bool_0, str_0, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args is False
    assert docstring_deprecated_0.description == "'0M|\x0c"
    assert docstring_deprecated_0.version == "'0M|\x0c"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_returns_0 = module_0.DocstringReturns(
        bool_0, docstring_deprecated_0, str_0, str_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args is False
    assert (
        f"{type(docstring_returns_0.description).__module__}.{type(docstring_returns_0.description).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_returns_0.type_name == "'0M|\x0c"
    assert docstring_returns_0.is_generator == "'0M|\x0c"
    assert docstring_returns_0.return_name is None
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        bool_0, bool_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args is False
    assert docstring_param_0.description is False
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "HWV\x0bX0LweZE;h\naAsoU2"
    list_0 = [str_1, str_1, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, none_type_0, none_type_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == [
        "HWV\x0bX0LweZE;h\naAsoU2",
        "HWV\x0bX0LweZE;h\naAsoU2",
        "HWV\x0bX0LweZE;h\naAsoU2",
    ]
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet is None
    with pytest.raises(AttributeError):
        docstring_param_0.__getattr__(none_type_0, docstring_0)


def test_case_5():
    str_0 = "*2g*>U\\ut6'#k4\tra34}"
    str_1 = "AA"
    list_0 = [str_0, str_1, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, str_1, list_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["*2g*>U\\ut6'#k4\tra34}", "AA", "AA"]
    assert docstring_example_0.description == ["*2g*>U\\ut6'#k4\tra34}", "AA", "AA"]
    assert docstring_example_0.snippet == "AA"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_1 = [docstring_example_0, docstring_example_0, str_0, str_0]
    docstring_example_1 = module_0.DocstringExample(list_1, str_1, str_1)
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert (
        f"{type(docstring_example_1.args).__module__}.{type(docstring_example_1.args).__qualname__}"
        == "builtins.list"
    )
    assert len(docstring_example_1.args) == 4
    assert docstring_example_1.description == "AA"
    assert docstring_example_1.snippet == "AA"


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "param",
        "keyword",
        "parameter",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "exception", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
