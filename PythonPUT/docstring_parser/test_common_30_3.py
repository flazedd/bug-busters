# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    pass


def test_case_1():
    list_0 = []
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, list_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == []
    assert docstring_raises_0.type_name == []
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_2():
    list_0 = []
    none_type_0 = None
    str_0 = "6\x0bx!9{@$J*t"
    docstring_param_0 = module_0.DocstringParam(
        list_0, none_type_0, str_0, str_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == []
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == "6\x0bx!9{@$J*t"
    assert docstring_param_0.type_name == "6\x0bx!9{@$J*t"
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_3():
    list_0 = []
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(list_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == []
    assert docstring_meta_0.description is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_style_0 = module_0.DocstringStyle.GOOGLE
    docstring_returns_0 = module_0.DocstringReturns(
        docstring_style_0, docstring_style_0, docstring_style_0, docstring_style_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.description == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.type_name == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.is_generator == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.return_name is None


def test_case_4():
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = None
    docstring_meta_0 = module_0.DocstringMeta(none_type_1, none_type_1)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args is None
    assert docstring_meta_0.description is None


def test_case_5():
    str_0 = "O;_`Y\x0c7\x0b>J(\\V}"
    docstring_0 = module_0.Docstring(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == "O;_`Y\x0c7\x0b>J(\\V}"
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    list_0 = [str_0, str_0, str_0]
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, list_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == [
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
    ]
    assert docstring_example_0.description == [
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
    ]
    assert docstring_example_0.snippet == "O;_`Y\x0c7\x0b>J(\\V}"
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_0, none_type_0, none_type_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == [
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
        "O;_`Y\x0c7\x0b>J(\\V}",
    ]
    assert docstring_param_0.description == "O;_`Y\x0c7\x0b>J(\\V}"
    assert docstring_param_0.arg_name is None
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == "O;_`Y\x0c7\x0b>J(\\V}"


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "arg",
        "attribute",
        "param",
        "key",
        "keyword",
        "parameter",
    }
    assert module_0.RAISES_KEYWORDS == {"raise", "raises", "exception", "except"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
