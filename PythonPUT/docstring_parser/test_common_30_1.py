# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0


def test_case_0():
    pass


def test_case_1():
    docstring_style_0 = module_0.DocstringStyle.GOOGLE
    docstring_returns_0 = module_0.DocstringReturns(
        docstring_style_0, docstring_style_0, docstring_style_0, docstring_style_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.description == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.type_name == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.is_generator == module_0.DocstringStyle.GOOGLE
    assert docstring_returns_0.return_name is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    complex_0 = -116.4026 + 627.1699j
    str_0 = "m_W"
    str_1 = "7\\"
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        complex_0, str_0, str_1, none_type_0, str_0, none_type_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == (-116.4026 + 627.1699j)
    assert docstring_param_0.description == "m_W"
    assert docstring_param_0.arg_name == "7\\"
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional == "m_W"
    assert docstring_param_0.default is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_1 = None
    docstring_example_0 = module_0.DocstringExample(complex_0, complex_0, none_type_1)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == (-116.4026 + 627.1699j)
    assert docstring_example_0.description is None
    assert docstring_example_0.snippet == (-116.4026 + 627.1699j)
    bool_0 = True
    none_type_2 = None
    docstring_example_1 = module_0.DocstringExample(bool_0, none_type_2, none_type_2)
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_1.args is True
    assert docstring_example_1.description is None
    assert docstring_example_1.snippet is None


def test_case_3():
    int_0 = -859
    str_0 = ""
    docstring_raises_0 = module_0.DocstringRaises(int_0, str_0, str_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == -859
    assert docstring_raises_0.description == ""
    assert docstring_raises_0.type_name == ""
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_4():
    str_0 = "uaEe]}"
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_0 = [str_0]
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == ["uaEe]}"]
    assert docstring_deprecated_0.description == "uaEe]}"
    assert docstring_deprecated_0.version == "uaEe]}"
    parse_error_1 = module_0.ParseError()
    assert (
        f"{type(parse_error_1).__module__}.{type(parse_error_1).__qualname__}"
        == "common.ParseError"
    )
    none_type_0 = None
    docstring_example_0 = module_0.DocstringExample(none_type_0, str_0, parse_error_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args is None
    assert (
        f"{type(docstring_example_0.description).__module__}.{type(docstring_example_0.description).__qualname__}"
        == "common.ParseError"
    )
    assert docstring_example_0.snippet == "uaEe]}"
    docstring_example_1 = module_0.DocstringExample(list_0, str_0, str_0)
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_1.args == ["uaEe]}"]
    assert docstring_example_1.description == "uaEe]}"
    assert docstring_example_1.snippet == "uaEe]}"
    docstring_returns_0 = module_0.DocstringReturns(list_0, str_0, str_0, str_0, str_0)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == ["uaEe]}"]
    assert docstring_returns_0.description == "uaEe]}"
    assert docstring_returns_0.type_name == "uaEe]}"
    assert docstring_returns_0.is_generator == "uaEe]}"
    assert docstring_returns_0.return_name == "uaEe]}"


def test_case_5():
    float_0 = -4185.02225
    str_0 = "1KbU-=!MJe.D@w0G#I\x0c"
    docstring_example_0 = module_0.DocstringExample(float_0, str_0, float_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == pytest.approx(-4185.02225, abs=0.01, rel=0.01)
    assert docstring_example_0.description == pytest.approx(
        -4185.02225, abs=0.01, rel=0.01
    )
    assert docstring_example_0.snippet == "1KbU-=!MJe.D@w0G#I\x0c"
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_6():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "argument",
        "key",
        "keyword",
        "parameter",
        "attribute",
        "param",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raise", "raises"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
