# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import common as module_0
import enum as module_1


def test_case_0():
    pass


def test_case_1():
    bytes_0 = b"\xacvt\x06{\xff\x8b,\x9e1\xb8\xab@"
    docstring_meta_0 = module_0.DocstringMeta(bytes_0, bytes_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == b"\xacvt\x06{\xff\x8b,\x9e1\xb8\xab@"
    assert docstring_meta_0.description == b"\xacvt\x06{\xff\x8b,\x9e1\xb8\xab@"
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    int_0 = -2068
    str_0 = "LIRg^mglS/J#WU+Kt"
    docstring_param_0 = module_0.DocstringParam(
        int_0, str_0, str_0, str_0, str_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == -2068
    assert docstring_param_0.description == "LIRg^mglS/J#WU+Kt"
    assert docstring_param_0.arg_name == "LIRg^mglS/J#WU+Kt"
    assert docstring_param_0.type_name == "LIRg^mglS/J#WU+Kt"
    assert docstring_param_0.is_optional == "LIRg^mglS/J#WU+Kt"
    assert docstring_param_0.default == "LIRg^mglS/J#WU+Kt"
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    docstring_raises_0 = module_0.DocstringRaises(list_0, list_0, list_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == []
    assert docstring_raises_0.type_name == []
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_meta_0 = module_0.DocstringMeta(docstring_raises_0, list_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert (
        f"{type(docstring_meta_0.args).__module__}.{type(docstring_meta_0.args).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_meta_0.description == []
    none_type_0 = None
    str_0 = "4,G_ "
    docstring_example_0 = module_0.DocstringExample(
        docstring_raises_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert (
        f"{type(docstring_example_0.args).__module__}.{type(docstring_example_0.args).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_example_0.description == "4,G_ "
    assert docstring_example_0.snippet is None
    docstring_returns_0 = module_0.DocstringReturns(
        none_type_0, none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args is None
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None
    module_1.unique(docstring_raises_0)


def test_case_4():
    bytes_0 = b"\xf8\x03\xf5X\x06`\x9b"
    docstring_raises_0 = module_0.DocstringRaises(bytes_0, bytes_0, bytes_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == b"\xf8\x03\xf5X\x06`\x9b"
    assert docstring_raises_0.description == b"\xf8\x03\xf5X\x06`\x9b"
    assert docstring_raises_0.type_name == b"\xf8\x03\xf5X\x06`\x9b"
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_5():
    list_0 = []
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, list_0, list_0)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == []
    assert docstring_deprecated_0.description == []
    assert docstring_deprecated_0.version == []
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_6():
    str_0 = "l,}!0z\t"
    str_1 = "koADh>*M\t"
    list_0 = [str_0, str_0, str_1]
    docstring_example_0 = module_0.DocstringExample(list_0, list_0, str_1)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["l,}!0z\t", "l,}!0z\t", "koADh>*M\t"]
    assert docstring_example_0.description == "koADh>*M\t"
    assert docstring_example_0.snippet == ["l,}!0z\t", "l,}!0z\t", "koADh>*M\t"]
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    list_1 = [str_0, str_0]
    none_type_0 = None
    docstring_example_1 = module_0.DocstringExample(list_1, none_type_0, str_0)
    assert (
        f"{type(docstring_example_1).__module__}.{type(docstring_example_1).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_1.args == ["l,}!0z\t", "l,}!0z\t"]
    assert docstring_example_1.description == "l,}!0z\t"
    assert docstring_example_1.snippet is None
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_7():
    str_0 = ""
    docstring_0 = module_0.Docstring(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == ""
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "param",
        "parameter",
        "arg",
        "attribute",
        "argument",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "except", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
