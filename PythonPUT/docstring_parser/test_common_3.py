# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    str_0 = '"<-8'
    docstring_meta_0 = module_0.DocstringMeta(str_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == '"<-8'
    assert docstring_meta_0.description == '"<-8'
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_2():
    str_0 = "s&[R3{t3AQ|_"
    list_0 = [str_0, str_0]
    none_type_0 = None
    docstring_param_0 = module_0.DocstringParam(
        list_0, none_type_0, list_0, none_type_0, none_type_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ["s&[R3{t3AQ|_", "s&[R3{t3AQ|_"]
    assert docstring_param_0.description is None
    assert docstring_param_0.arg_name == ["s&[R3{t3AQ|_", "s&[R3{t3AQ|_"]
    assert docstring_param_0.type_name is None
    assert docstring_param_0.is_optional is None
    assert docstring_param_0.default == "s&[R3{t3AQ|_"
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}


def test_case_3():
    bool_0 = False
    bytes_0 = b"#m\x8b\r\xc3\xa6$iL?\xcd':\xab\x17\xfc\x94E\xa1"
    none_type_0 = None
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        bytes_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert (
        docstring_deprecated_0.args
        == b"#m\x8b\r\xc3\xa6$iL?\xcd':\xab\x17\xfc\x94E\xa1"
    )
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_1 = None
    docstring_returns_0 = module_0.DocstringReturns(
        bool_0, none_type_1, none_type_1, none_type_1
    )
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args is False
    assert docstring_returns_0.description is None
    assert docstring_returns_0.type_name is None
    assert docstring_returns_0.is_generator is None
    assert docstring_returns_0.return_name is None


def test_case_4():
    none_type_0 = None
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    docstring_raises_0 = module_0.DocstringRaises(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args is None
    assert docstring_raises_0.description is None
    assert docstring_raises_0.type_name is None


def test_case_5():
    none_type_0 = None
    dict_0 = {}
    parse_error_0 = module_0.ParseError(**dict_0)
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        none_type_0, none_type_0, none_type_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args is None
    assert docstring_deprecated_0.description is None
    assert docstring_deprecated_0.version is None


def test_case_6():
    str_0 = "g3PC"
    list_0 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, list_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["g3PC"]
    assert docstring_example_0.description == ["g3PC"]
    assert docstring_example_0.snippet == "g3PC"
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "keyword",
        "key",
        "param",
        "argument",
        "arg",
    }
    assert module_0.RAISES_KEYWORDS == {"raises", "except", "exception", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_1 = "/l_8"
    docstring_meta_0 = module_0.DocstringMeta(str_1, str_1)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == "/l_8"
    assert docstring_meta_0.description == "/l_8"
