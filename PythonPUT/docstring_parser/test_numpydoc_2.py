# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpydoc as module_0
import common as module_1
import re as module_2


def test_case_0():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31


def test_case_1():
    str_0 = '-4a"=H6,ge5t5'
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == '-4a"=H6,ge5t5'
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    str_0 = "%>"
    str_1 = "agK"
    str_2 = ""
    section_0 = module_0.Section(str_2, str_0)
    assert (
        f"{type(section_0).__module__}.{type(section_0).__qualname__}"
        == "numpydoc.Section"
    )
    assert section_0.title == ""
    assert section_0.key == "%>"
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert (
        f"{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}"
        == "builtins.property"
    )
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    raises_section_0 = module_0.RaisesSection(str_0, str_1)
    assert (
        f"{type(raises_section_0).__module__}.{type(raises_section_0).__qualname__}"
        == "numpydoc.RaisesSection"
    )
    assert raises_section_0.title == "%>"
    assert raises_section_0.key == "agK"
    none_type_0 = None
    docstring_0 = numpydoc_parser_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "("
    yields_section_0 = module_0.YieldsSection(numpydoc_parser_0, str_0)
    assert (
        f"{type(yields_section_0).__module__}.{type(yields_section_0).__qualname__}"
        == "numpydoc.YieldsSection"
    )
    assert (
        f"{type(yields_section_0.title).__module__}.{type(yields_section_0.title).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert yields_section_0.key == "("
    assert module_0.YieldsSection.is_generator is True
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "("
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "DIbS}lY<wd\tf\\#\nad"
    docstring_1 = numpydoc_parser_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "DIbS}lY<wd      f\\#"
    assert docstring_1.long_description == "ad"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = module_0.compose(docstring_0, numpydoc_parser_0)
    assert str_2 == "("
    numpydoc_parser_0.add_section(yields_section_0)


def test_case_4():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "("
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "("
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "DIbS}lY<wd\tf\\#\nad"
    docstring_1 = numpydoc_parser_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "DIbS}lY<wd      f\\#"
    assert docstring_1.long_description == "ad"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = module_0.compose(docstring_0, numpydoc_parser_0)
    assert str_2 == "("


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = "GVjCg\x0b-Dz"
    returns_section_0 = module_0.ReturnsSection(str_0, none_type_0)
    assert (
        f"{type(returns_section_0).__module__}.{type(returns_section_0).__qualname__}"
        == "numpydoc.ReturnsSection"
    )
    assert returns_section_0.title == "GVjCg\x0b-Dz"
    assert returns_section_0.key is None
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    assert module_0.ReturnsSection.is_generator is False
    str_1 = "agK"
    str_2 = ""
    section_0 = module_0.Section(str_1, none_type_0)
    assert (
        f"{type(section_0).__module__}.{type(section_0).__qualname__}"
        == "numpydoc.Section"
    )
    assert section_0.title == "agK"
    assert section_0.key is None
    assert (
        f"{type(module_0.Section.title_pattern).__module__}.{type(module_0.Section.title_pattern).__qualname__}"
        == "builtins.property"
    )
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    raises_section_0 = module_0.RaisesSection(str_0, none_type_0)
    assert (
        f"{type(raises_section_0).__module__}.{type(raises_section_0).__qualname__}"
        == "numpydoc.RaisesSection"
    )
    assert raises_section_0.title == "GVjCg\x0b-Dz"
    assert raises_section_0.key is None
    str_3 = "N{\x0be"
    docstring_0 = numpydoc_parser_0.parse(str_3)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "N{\x0be"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    raises_section_1 = module_0.RaisesSection(str_2, str_1)
    assert (
        f"{type(raises_section_1).__module__}.{type(raises_section_1).__qualname__}"
        == "numpydoc.RaisesSection"
    )
    assert raises_section_1.title == ""
    assert raises_section_1.key == "agK"
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_0.NumpydocParser(numpydoc_parser_0)


def test_case_6():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "*"
    yields_section_0 = module_0.YieldsSection(numpydoc_parser_0, str_0)
    assert (
        f"{type(yields_section_0).__module__}.{type(yields_section_0).__qualname__}"
        == "numpydoc.YieldsSection"
    )
    assert (
        f"{type(yields_section_0.title).__module__}.{type(yields_section_0.title).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert yields_section_0.key == "*"
    assert module_0.YieldsSection.is_generator is True
    docstring_0 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "*"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "+#$1g\nA/lxf\x0b96X"
    str_2 = "DIbS}lY<wd\tf\\#\nad"
    docstring_1 = numpydoc_parser_0.parse(str_2)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "DIbS}lY<wd      f\\#"
    assert docstring_1.long_description == "ad"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_2 = numpydoc_parser_0.parse(str_1)
    assert (
        f"{type(docstring_2).__module__}.{type(docstring_2).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_2.short_description == "+#$1g"
    assert docstring_2.long_description == "A/lxf\x0b96X"
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.NUMPYDOC
    str_3 = module_0.compose(docstring_2, numpydoc_parser_0)
    assert str_3 == "+#$1g\nA/lxf\x0b96X"
    str_4 = "K0P=j$#|bpoeIowO\t"
    param_section_0 = module_0.ParamSection(str_4, str_4)
    assert (
        f"{type(param_section_0).__module__}.{type(param_section_0).__qualname__}"
        == "numpydoc.ParamSection"
    )
    assert param_section_0.title == "K0P=j$#|bpoeIowO\t"
    assert param_section_0.key == "K0P=j$#|bpoeIowO\t"
    numpydoc_parser_1 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_1).__module__}.{type(numpydoc_parser_1).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_1.sections).__module__}.{type(numpydoc_parser_1.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_1.sections) == 31
    assert (
        f"{type(numpydoc_parser_1.titles_re).__module__}.{type(numpydoc_parser_1.titles_re).__qualname__}"
        == "re.Pattern"
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "*hjR.Dn/w:j"
    str_1 = "q"
    yields_section_0 = module_0.YieldsSection(numpydoc_parser_0, str_1)
    assert (
        f"{type(yields_section_0).__module__}.{type(yields_section_0).__qualname__}"
        == "numpydoc.YieldsSection"
    )
    assert (
        f"{type(yields_section_0.title).__module__}.{type(yields_section_0.title).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert yields_section_0.key == "q"
    assert module_0.YieldsSection.is_generator is True
    docstring_0 = numpydoc_parser_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "q"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    docstring_1 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "*hjR.Dn/w:j"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    none_type_0 = None
    docstring_2 = numpydoc_parser_0.parse(none_type_0)
    assert (
        f"{type(docstring_2).__module__}.{type(docstring_2).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_2.short_description is None
    assert docstring_2.long_description is None
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.NUMPYDOC
    str_2 = module_0.compose(docstring_2, numpydoc_parser_0)
    assert str_2 == ""
    numpydoc_parser_0.add_section(numpydoc_parser_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "("
    str_1 = "qn,V9'O(P4|;"
    yields_section_0 = module_0.YieldsSection(str_1, str_1)
    assert (
        f"{type(yields_section_0).__module__}.{type(yields_section_0).__qualname__}"
        == "numpydoc.YieldsSection"
    )
    assert yields_section_0.title == "qn,V9'O(P4|;"
    assert yields_section_0.key == "qn,V9'O(P4|;"
    assert module_0.YieldsSection.is_generator is True
    str_2 = "`Y\n\x0b\x0b"
    docstring_0 = numpydoc_parser_0.parse(str_2)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "`Y"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    numpydoc_parser_1 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_1).__module__}.{type(numpydoc_parser_1).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_1.sections).__module__}.{type(numpydoc_parser_1.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_1.sections) == 31
    assert (
        f"{type(numpydoc_parser_1.titles_re).__module__}.{type(numpydoc_parser_1.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_2.findall(str_1, str_0, numpydoc_parser_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    numpydoc_parser_0 = module_0.NumpydocParser()
    assert (
        f"{type(numpydoc_parser_0).__module__}.{type(numpydoc_parser_0).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert (
        f"{type(numpydoc_parser_0.sections).__module__}.{type(numpydoc_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(numpydoc_parser_0.sections) == 31
    assert (
        f"{type(numpydoc_parser_0.titles_re).__module__}.{type(numpydoc_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.KV_REGEX).__module__}.{type(module_0.KV_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_KEY_REGEX).__module__}.{type(module_0.PARAM_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_OPTIONAL_REGEX).__module__}.{type(module_0.PARAM_OPTIONAL_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.PARAM_DEFAULT_REGEX).__module__}.{type(module_0.PARAM_DEFAULT_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.RETURN_KEY_REGEX).__module__}.{type(module_0.RETURN_KEY_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 31
    str_0 = "("
    yields_section_0 = module_0.YieldsSection(numpydoc_parser_0, str_0)
    assert (
        f"{type(yields_section_0).__module__}.{type(yields_section_0).__qualname__}"
        == "numpydoc.YieldsSection"
    )
    assert (
        f"{type(yields_section_0.title).__module__}.{type(yields_section_0.title).__qualname__}"
        == "numpydoc.NumpydocParser"
    )
    assert yields_section_0.key == "("
    assert module_0.YieldsSection.is_generator is True
    str_1 = "\x0b"
    docstring_0 = numpydoc_parser_0.parse(str_1)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.NUMPYDOC
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    docstring_1 = numpydoc_parser_0.parse(str_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "("
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.NUMPYDOC
    assert module_1.PARAM_KEYWORDS == {
        "attribute",
        "arg",
        "argument",
        "param",
        "keyword",
        "parameter",
        "key",
    }
    assert module_1.RAISES_KEYWORDS == {"raises", "exception", "except", "raise"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_0.compose(none_type_0, indent=str_1)
