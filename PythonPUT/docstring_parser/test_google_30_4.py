# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import google as module_0
import common as module_1
import ast as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "]"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "]"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == "]"
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    none_type_0 = None
    module_0.GoogleParser(docstring_0, none_type_0)


def test_case_1():
    google_parser_0 = module_0.GoogleParser()
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12


def test_case_2():
    none_type_0 = None
    google_parser_0 = module_0.GoogleParser(title_colon=none_type_0)
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is None
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12


def test_case_3():
    str_0 = "Ue9/,^ !jsN]IA(G&6-t"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "Ue9/,^ !jsN]IA(G&6-t"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_4():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_0 = "Ue9/,^ !jsN]IA(G&6-t"
    docstring_1 = module_0.parse(str_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "Ue9/,^ !jsN]IA(G&6-t"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_5():
    pass


def test_case_6():
    str_0 = "~b`rJta9;\n[C<YG\t/Jv"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "~b`rJta9;"
    assert docstring_0.long_description == "[C<YG   /Jv"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


def test_case_7():
    str_0 = "]"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "]"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == "]"
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_8():
    not_in_0 = module_2.NotIn()
    assert f"{type(not_in_0).__module__}.{type(not_in_0).__qualname__}" == "ast.NotIn"
    assert module_2.PyCF_ALLOW_TOP_LEVEL_AWAIT == 8192
    assert module_2.PyCF_ONLY_AST == 1024
    assert module_2.PyCF_TYPE_COMMENTS == 4096
    str_0 = "6!\t%@_2A\n\r"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "6!      %@_2A"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "@\rf-\\>q9k^f`k)Y0$R"
    google_parser_0 = module_0.GoogleParser(title_colon=str_0)
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon == "@\rf-\\>q9k^f`k)Y0$R"
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    google_parser_0.add_section(google_parser_0)


def test_case_10():
    str_0 = ""
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == ""
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE


def test_case_11():
    str_0 = "pNT\tuM}bb4.e[pSF>\nV"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "pNT     uM}bb4.e[pSF>"
    assert docstring_0.long_description == "V"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == "pNT     uM}bb4.e[pSF>\nV"
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_12():
    str_0 = "]"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "]"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "\t"
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "argument",
        "arg",
        "keyword",
        "key",
        "param",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"exception", "raise", "raises", "except"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    str_2 = "DYj|"
    str_3 = module_0.compose(docstring_1, indent=str_2)
    assert str_3 == ""
    str_4 = '"'
    docstring_2 = module_0.parse(str_4)
    assert (
        f"{type(docstring_2).__module__}.{type(docstring_2).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_2.short_description == '"'
    assert docstring_2.long_description is None
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.GOOGLE
