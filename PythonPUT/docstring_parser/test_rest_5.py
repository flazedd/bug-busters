# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rest as module_0
import common as module_1


def test_case_0():
    str_0 = "Dy;nKx6|2Sze"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "Dy;nKx6|2Sze"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    docstring_0 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_0 = "bhZEzDdw9=q_k"
    str_1 = module_0.compose(docstring_0, indent=str_0)
    assert str_1 == ""
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    module_0.parse(docstring_0)


def test_case_2():
    str_0 = "iI\nP?"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "iI"
    assert docstring_0.long_description == "P?"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    str_1 = module_0.compose(docstring_0, none_type_0)
    assert str_1 == "iI\nP?"
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    docstring_1 = module_0.parse(none_type_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    str_2 = module_0.compose(docstring_1)
    assert str_2 == ""
    str_3 = module_0.compose(docstring_1, indent=none_type_0)
    assert str_3 == ""


def test_case_3():
    str_0 = "K;\n{2/~:/dM"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "K;"
    assert docstring_0.long_description == "{2/~:/dM"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ":Hy:7N|"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert (
        f"{type(docstring_0.meta).__module__}.{type(docstring_0.meta).__qualname__}"
        == "builtins.list"
    )
    assert len(docstring_0.meta) == 1
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0)
    assert str_1 == ":Hy: 7N|"
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_2 = "}*Mr+#9"
    module_0.compose(str_2, indent=str_2)


def test_case_5():
    tuple_0 = ()
    docstring_0 = module_0.parse(tuple_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.REST
    assert module_0.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_0.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_0.YIELDS_KEYWORDS == {"yields", "yield"}
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_0 = ""
    docstring_1 = module_0.parse(str_0)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.REST
    assert module_1.PARAM_KEYWORDS == {
        "parameter",
        "attribute",
        "param",
        "arg",
        "argument",
        "key",
        "keyword",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raises", "raise", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecation", "deprecated"}
    assert module_1.RETURNS_KEYWORDS == {"return", "returns"}
    assert module_1.YIELDS_KEYWORDS == {"yields", "yield"}
    assert module_1.EXAMPLES_KEYWORDS == {"examples", "example"}
    str_1 = "Cgx][X\\"
    str_2 = "a[CIO}hpTWy\n1FJR"
    docstring_2 = module_0.parse(str_2)
    assert (
        f"{type(docstring_2).__module__}.{type(docstring_2).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_2.short_description == "a[CIO}hpTWy"
    assert docstring_2.long_description == "1FJR"
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style == module_1.DocstringStyle.REST
    docstring_3 = module_0.parse(str_1)
    assert (
        f"{type(docstring_3).__module__}.{type(docstring_3).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_3.short_description == "Cgx][X\\"
    assert docstring_3.long_description is None
    assert docstring_3.blank_after_short_description is False
    assert docstring_3.blank_after_long_description is False
    assert docstring_3.meta == []
    assert docstring_3.style == module_1.DocstringStyle.REST
    docstring_4 = module_0.parse(str_2)
    assert (
        f"{type(docstring_4).__module__}.{type(docstring_4).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_4.short_description == "a[CIO}hpTWy"
    assert docstring_4.long_description == "1FJR"
    assert docstring_4.blank_after_short_description is False
    assert docstring_4.blank_after_long_description is False
    assert docstring_4.meta == []
    assert docstring_4.style == module_1.DocstringStyle.REST
    str_3 = ";KMFxJ|+b\rG\n(\\"
    docstring_5 = module_0.parse(str_3)
    assert (
        f"{type(docstring_5).__module__}.{type(docstring_5).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_5.short_description == ";KMFxJ|+b\rG"
    assert docstring_5.long_description == "(\\"
    assert docstring_5.blank_after_short_description is False
    assert docstring_5.blank_after_long_description is False
    assert docstring_5.meta == []
    assert docstring_5.style == module_1.DocstringStyle.REST
    str_4 = ":CB`P"
    with pytest.raises(module_1.ParseError):
        module_0.parse(str_4)
