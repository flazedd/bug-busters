# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import common as module_0


def test_case_0():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_1():
    rendering_style_0 = module_0.RenderingStyle.COMPACT
    none_type_0 = None
    docstring_meta_0 = module_0.DocstringMeta(rendering_style_0, none_type_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == module_0.RenderingStyle.COMPACT
    assert docstring_meta_0.description is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_2():
    int_0 = -484
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    str_0 = "\n=**f<$|\nd"
    bool_0 = False
    docstring_param_0 = module_0.DocstringParam(
        tuple_0, str_0, str_0, str_0, bool_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == ({-484: -484},)
    assert docstring_param_0.description == "\n=**f<$|\nd"
    assert docstring_param_0.arg_name == "\n=**f<$|\nd"
    assert docstring_param_0.type_name == "\n=**f<$|\nd"
    assert docstring_param_0.is_optional is False
    assert docstring_param_0.default == "\n=**f<$|\nd"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}


def test_case_3():
    str_0 = "]}vl7-!{f\x0b>'y*oO=~X"
    str_1 = '4",4\nX*MZp@_{8Z:i+'
    list_0 = [str_0, str_0, str_0, str_1]
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_1)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == [
        "]}vl7-!{f\x0b>'y*oO=~X",
        "]}vl7-!{f\x0b>'y*oO=~X",
        "]}vl7-!{f\x0b>'y*oO=~X",
        '4",4\nX*MZp@_{8Z:i+',
    ]
    assert docstring_meta_0.description == '4",4\nX*MZp@_{8Z:i+'
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    list_1 = []
    str_2 = '"!m"eP;u-oifl*;W)'
    docstring_returns_0 = module_0.DocstringReturns(list_1, str_0, str_2, list_0)
    assert (
        f"{type(docstring_returns_0).__module__}.{type(docstring_returns_0).__qualname__}"
        == "common.DocstringReturns"
    )
    assert docstring_returns_0.args == []
    assert docstring_returns_0.description == "]}vl7-!{f\x0b>'y*oO=~X"
    assert docstring_returns_0.type_name == '"!m"eP;u-oifl*;W)'
    assert docstring_returns_0.is_generator == [
        "]}vl7-!{f\x0b>'y*oO=~X",
        "]}vl7-!{f\x0b>'y*oO=~X",
        "]}vl7-!{f\x0b>'y*oO=~X",
        '4",4\nX*MZp@_{8Z:i+',
    ]
    assert docstring_returns_0.return_name is None


def test_case_4():
    str_0 = ">I\r4Z'rp>\n"
    str_1 = ""
    list_0 = [str_0, str_0, str_1]
    docstring_param_0 = module_0.DocstringParam(
        list_0, str_1, str_1, str_1, list_0, str_0
    )
    assert (
        f"{type(docstring_param_0).__module__}.{type(docstring_param_0).__qualname__}"
        == "common.DocstringParam"
    )
    assert docstring_param_0.args == [">I\r4Z'rp>\n", ">I\r4Z'rp>\n", ""]
    assert docstring_param_0.description == ""
    assert docstring_param_0.arg_name == ""
    assert docstring_param_0.type_name == ""
    assert docstring_param_0.is_optional == [">I\r4Z'rp>\n", ">I\r4Z'rp>\n", ""]
    assert docstring_param_0.default == ">I\r4Z'rp>\n"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_deprecated_0 = module_0.DocstringDeprecated(list_0, str_0, str_1)
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert docstring_deprecated_0.args == [">I\r4Z'rp>\n", ">I\r4Z'rp>\n", ""]
    assert docstring_deprecated_0.description == ">I\r4Z'rp>\n"
    assert docstring_deprecated_0.version == ""
    list_1 = []
    docstring_raises_0 = module_0.DocstringRaises(list_1, list_1, list_1)
    assert (
        f"{type(docstring_raises_0).__module__}.{type(docstring_raises_0).__qualname__}"
        == "common.DocstringRaises"
    )
    assert docstring_raises_0.args == []
    assert docstring_raises_0.description == []
    assert docstring_raises_0.type_name == []


def test_case_5():
    parse_error_0 = module_0.ParseError()
    assert (
        f"{type(parse_error_0).__module__}.{type(parse_error_0).__qualname__}"
        == "common.ParseError"
    )
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    parse_error_1 = module_0.ParseError()
    assert (
        f"{type(parse_error_1).__module__}.{type(parse_error_1).__qualname__}"
        == "common.ParseError"
    )
    str_0 = "ME="
    docstring_deprecated_0 = module_0.DocstringDeprecated(
        parse_error_0, parse_error_0, str_0
    )
    assert (
        f"{type(docstring_deprecated_0).__module__}.{type(docstring_deprecated_0).__qualname__}"
        == "common.DocstringDeprecated"
    )
    assert (
        f"{type(docstring_deprecated_0.args).__module__}.{type(docstring_deprecated_0.args).__qualname__}"
        == "common.ParseError"
    )
    assert (
        f"{type(docstring_deprecated_0.description).__module__}.{type(docstring_deprecated_0.description).__qualname__}"
        == "common.ParseError"
    )
    assert docstring_deprecated_0.version == "ME="


def test_case_6():
    str_0 = "G\t\\@C5<3-c]!mkb+&"
    list_0 = [str_0]
    docstring_example_0 = module_0.DocstringExample(list_0, str_0, str_0)
    assert (
        f"{type(docstring_example_0).__module__}.{type(docstring_example_0).__qualname__}"
        == "common.DocstringExample"
    )
    assert docstring_example_0.args == ["G\t\\@C5<3-c]!mkb+&"]
    assert docstring_example_0.description == "G\t\\@C5<3-c]!mkb+&"
    assert docstring_example_0.snippet == "G\t\\@C5<3-c]!mkb+&"
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    docstring_0 = module_0.Docstring(list_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == ["G\t\\@C5<3-c]!mkb+&"]
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    docstring_1 = module_0.Docstring()
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description is None
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style is None
    docstring_2 = module_0.Docstring()
    assert (
        f"{type(docstring_2).__module__}.{type(docstring_2).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_2.short_description is None
    assert docstring_2.long_description is None
    assert docstring_2.blank_after_short_description is False
    assert docstring_2.blank_after_long_description is False
    assert docstring_2.meta == []
    assert docstring_2.style is None
    docstring_meta_0 = module_0.DocstringMeta(list_0, str_0)
    assert (
        f"{type(docstring_meta_0).__module__}.{type(docstring_meta_0).__qualname__}"
        == "common.DocstringMeta"
    )
    assert docstring_meta_0.args == ["G\t\\@C5<3-c]!mkb+&"]
    assert docstring_meta_0.description == "G\t\\@C5<3-c]!mkb+&"


def test_case_7():
    docstring_0 = module_0.Docstring()
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style is None
    assert module_0.PARAM_KEYWORDS == {
        "arg",
        "parameter",
        "param",
        "argument",
        "keyword",
        "attribute",
        "key",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "exception", "raises", "raise"}
    assert module_0.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert (
        f"{type(module_0.Docstring.description).__module__}.{type(module_0.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.params).__module__}.{type(module_0.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.raises).__module__}.{type(module_0.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.returns).__module__}.{type(module_0.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.many_returns).__module__}.{type(module_0.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.deprecation).__module__}.{type(module_0.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Docstring.examples).__module__}.{type(module_0.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
