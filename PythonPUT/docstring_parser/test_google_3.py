# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import google as module_0
import common as module_1
import tokenize as module_2
import inspect as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = ":\x0b\rnM"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ":\x0b\rnM"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "yc\nFaX!W9^E\\0_*Ve"
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "yc"
    assert docstring_1.long_description == "FaX!W9^E\\0_*Ve"
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    module_0.GoogleParser(docstring_1)


def test_case_1():
    str_0 = "x>GRnb0YMV"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "x>GRnb0YMV"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    section_type_0 = module_0.SectionType.SINGULAR
    google_parser_0 = module_0.GoogleParser(section_type_0, section_type_0)
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon == module_0.SectionType.SINGULAR
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    module_0.parse(google_parser_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ""
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    google_parser_0 = module_0.GoogleParser()
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    str_1 = module_0.compose(docstring_0)
    assert str_1 == ""
    var_0 = module_2.generate_tokens(str_1)
    assert module_2.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_2.tok_name == {
        0: "ENDMARKER",
        1: "NAME",
        2: "NUMBER",
        3: "STRING",
        4: "NEWLINE",
        5: "INDENT",
        6: "DEDENT",
        7: "LPAR",
        8: "RPAR",
        9: "LSQB",
        10: "RSQB",
        11: "COLON",
        12: "COMMA",
        13: "SEMI",
        14: "PLUS",
        15: "MINUS",
        16: "STAR",
        17: "SLASH",
        18: "VBAR",
        19: "AMPER",
        20: "LESS",
        21: "GREATER",
        22: "EQUAL",
        23: "DOT",
        24: "PERCENT",
        25: "LBRACE",
        26: "RBRACE",
        27: "EQEQUAL",
        28: "NOTEQUAL",
        29: "LESSEQUAL",
        30: "GREATEREQUAL",
        31: "TILDE",
        32: "CIRCUMFLEX",
        33: "LEFTSHIFT",
        34: "RIGHTSHIFT",
        35: "DOUBLESTAR",
        36: "PLUSEQUAL",
        37: "MINEQUAL",
        38: "STAREQUAL",
        39: "SLASHEQUAL",
        40: "PERCENTEQUAL",
        41: "AMPEREQUAL",
        42: "VBAREQUAL",
        43: "CIRCUMFLEXEQUAL",
        44: "LEFTSHIFTEQUAL",
        45: "RIGHTSHIFTEQUAL",
        46: "DOUBLESTAREQUAL",
        47: "DOUBLESLASH",
        48: "DOUBLESLASHEQUAL",
        49: "AT",
        50: "ATEQUAL",
        51: "RARROW",
        52: "ELLIPSIS",
        53: "COLONEQUAL",
        54: "OP",
        55: "AWAIT",
        56: "ASYNC",
        57: "TYPE_IGNORE",
        58: "TYPE_COMMENT",
        59: "SOFT_KEYWORD",
        60: "ERRORTOKEN",
        61: "COMMENT",
        62: "NL",
        63: "ENCODING",
        64: "N_TOKENS",
        256: "NT_OFFSET",
    }
    assert module_2.ENDMARKER == 0
    assert module_2.NAME == 1
    assert module_2.NUMBER == 2
    assert module_2.STRING == 3
    assert module_2.NEWLINE == 4
    assert module_2.INDENT == 5
    assert module_2.DEDENT == 6
    assert module_2.LPAR == 7
    assert module_2.RPAR == 8
    assert module_2.LSQB == 9
    assert module_2.RSQB == 10
    assert module_2.COLON == 11
    assert module_2.COMMA == 12
    assert module_2.SEMI == 13
    assert module_2.PLUS == 14
    assert module_2.MINUS == 15
    assert module_2.STAR == 16
    assert module_2.SLASH == 17
    assert module_2.VBAR == 18
    assert module_2.AMPER == 19
    assert module_2.LESS == 20
    assert module_2.GREATER == 21
    assert module_2.EQUAL == 22
    assert module_2.DOT == 23
    assert module_2.PERCENT == 24
    assert module_2.LBRACE == 25
    assert module_2.RBRACE == 26
    assert module_2.EQEQUAL == 27
    assert module_2.NOTEQUAL == 28
    assert module_2.LESSEQUAL == 29
    assert module_2.GREATEREQUAL == 30
    assert module_2.TILDE == 31
    assert module_2.CIRCUMFLEX == 32
    assert module_2.LEFTSHIFT == 33
    assert module_2.RIGHTSHIFT == 34
    assert module_2.DOUBLESTAR == 35
    assert module_2.PLUSEQUAL == 36
    assert module_2.MINEQUAL == 37
    assert module_2.STAREQUAL == 38
    assert module_2.SLASHEQUAL == 39
    assert module_2.PERCENTEQUAL == 40
    assert module_2.AMPEREQUAL == 41
    assert module_2.VBAREQUAL == 42
    assert module_2.CIRCUMFLEXEQUAL == 43
    assert module_2.LEFTSHIFTEQUAL == 44
    assert module_2.RIGHTSHIFTEQUAL == 45
    assert module_2.DOUBLESTAREQUAL == 46
    assert module_2.DOUBLESLASH == 47
    assert module_2.DOUBLESLASHEQUAL == 48
    assert module_2.AT == 49
    assert module_2.ATEQUAL == 50
    assert module_2.RARROW == 51
    assert module_2.ELLIPSIS == 52
    assert module_2.COLONEQUAL == 53
    assert module_2.OP == 54
    assert module_2.AWAIT == 55
    assert module_2.ASYNC == 56
    assert module_2.TYPE_IGNORE == 57
    assert module_2.TYPE_COMMENT == 58
    assert module_2.SOFT_KEYWORD == 59
    assert module_2.ERRORTOKEN == 60
    assert module_2.COMMENT == 61
    assert module_2.NL == 62
    assert module_2.ENCODING == 63
    assert module_2.N_TOKENS == 64
    assert module_2.NT_OFFSET == 256
    assert module_2.EXACT_TOKEN_TYPES == {
        "!=": 28,
        "%": 24,
        "%=": 40,
        "&": 19,
        "&=": 41,
        "(": 7,
        ")": 8,
        "*": 16,
        "**": 35,
        "**=": 46,
        "*=": 38,
        "+": 14,
        "+=": 36,
        ",": 12,
        "-": 15,
        "-=": 37,
        "->": 51,
        ".": 23,
        "...": 52,
        "/": 17,
        "//": 47,
        "//=": 48,
        "/=": 39,
        ":": 11,
        ":=": 53,
        ";": 13,
        "<": 20,
        "<<": 33,
        "<<=": 44,
        "<=": 29,
        "=": 22,
        "==": 27,
        ">": 21,
        ">=": 30,
        ">>": 34,
        ">>=": 45,
        "@": 49,
        "@=": 50,
        "[": 9,
        "]": 10,
        "^": 32,
        "^=": 43,
        "{": 25,
        "|": 18,
        "|=": 42,
        "}": 26,
        "~": 31,
    }
    assert (
        f"{type(module_2.cookie_re).__module__}.{type(module_2.cookie_re).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_2.blank_re).__module__}.{type(module_2.blank_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_2.Whitespace == "[ \\f\\t]*"
    assert module_2.Comment == "#[^\\r\\n]*"
    assert module_2.Ignore == "[ \\f\\t]*(\\\\\\r?\\n[ \\f\\t]*)*(#[^\\r\\n]*)?"
    assert module_2.Name == "\\w+"
    assert module_2.Hexnumber == "0[xX](?:_?[0-9a-fA-F])+"
    assert module_2.Binnumber == "0[bB](?:_?[01])+"
    assert module_2.Octnumber == "0[oO](?:_?[0-7])+"
    assert module_2.Decnumber == "(?:0(?:_?0)*|[1-9](?:_?[0-9])*)"
    assert (
        module_2.Intnumber
        == "(0[xX](?:_?[0-9a-fA-F])+|0[bB](?:_?[01])+|0[oO](?:_?[0-7])+|(?:0(?:_?0)*|[1-9](?:_?[0-9])*))"
    )
    assert module_2.Exponent == "[eE][-+]?[0-9](?:_?[0-9])*"
    assert (
        module_2.Pointfloat
        == "([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?"
    )
    assert module_2.Expfloat == "[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*"
    assert (
        module_2.Floatnumber
        == "(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)"
    )
    assert (
        module_2.Imagnumber
        == "([0-9](?:_?[0-9])*[jJ]|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)[jJ])"
    )
    assert (
        module_2.Number
        == "(([0-9](?:_?[0-9])*[jJ]|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)[jJ])|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)|(0[xX](?:_?[0-9a-fA-F])+|0[bB](?:_?[01])+|0[oO](?:_?[0-7])+|(?:0(?:_?0)*|[1-9](?:_?[0-9])*)))"
    )
    assert (
        module_2.StringPrefix
        == "(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)"
    )
    assert module_2.Single == "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'"
    assert module_2.Double == '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"'
    assert module_2.Single3 == "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''"
    assert module_2.Double3 == '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""'
    assert (
        module_2.Triple
        == "((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'''|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"\"\")"
    )
    assert (
        module_2.String
        == "((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\")"
    )
    assert (
        module_2.Special
        == "(\\~|\\}|\\|=|\\||\\{|\\^=|\\^|\\]|\\[|@=|@|>>=|>>|>=|>|==|=|<=|<<=|<<|<|;|:=|:|/=|//=|//|/|\\.\\.\\.|\\.|\\->|\\-=|\\-|,|\\+=|\\+|\\*=|\\*\\*=|\\*\\*|\\*|\\)|\\(|\\&=|\\&|%=|%|!=)"
    )
    assert (
        module_2.Funny
        == "(\\r?\\n|(\\~|\\}|\\|=|\\||\\{|\\^=|\\^|\\]|\\[|@=|@|>>=|>>|>=|>|==|=|<=|<<=|<<|<|;|:=|:|/=|//=|//|/|\\.\\.\\.|\\.|\\->|\\-=|\\-|,|\\+=|\\+|\\*=|\\*\\*=|\\*\\*|\\*|\\)|\\(|\\&=|\\&|%=|%|!=))"
    )
    assert (
        module_2.PlainToken
        == "((([0-9](?:_?[0-9])*[jJ]|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)[jJ])|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)|(0[xX](?:_?[0-9a-fA-F])+|0[bB](?:_?[01])+|0[oO](?:_?[0-7])+|(?:0(?:_?0)*|[1-9](?:_?[0-9])*)))|(\\r?\\n|(\\~|\\}|\\|=|\\||\\{|\\^=|\\^|\\]|\\[|@=|@|>>=|>>|>=|>|==|=|<=|<<=|<<|<|;|:=|:|/=|//=|//|/|\\.\\.\\.|\\.|\\->|\\-=|\\-|,|\\+=|\\+|\\*=|\\*\\*=|\\*\\*|\\*|\\)|\\(|\\&=|\\&|%=|%|!=))|((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\")|\\w+)"
    )
    assert (
        module_2.Token
        == "[ \\f\\t]*(\\\\\\r?\\n[ \\f\\t]*)*(#[^\\r\\n]*)?((([0-9](?:_?[0-9])*[jJ]|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)[jJ])|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)|(0[xX](?:_?[0-9a-fA-F])+|0[bB](?:_?[01])+|0[oO](?:_?[0-7])+|(?:0(?:_?0)*|[1-9](?:_?[0-9])*)))|(\\r?\\n|(\\~|\\}|\\|=|\\||\\{|\\^=|\\^|\\]|\\[|@=|@|>>=|>>|>=|>|==|=|<=|<<=|<<|<|;|:=|:|/=|//=|//|/|\\.\\.\\.|\\.|\\->|\\-=|\\-|,|\\+=|\\+|\\*=|\\*\\*=|\\*\\*|\\*|\\)|\\(|\\&=|\\&|%=|%|!=))|((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\")|\\w+)"
    )
    assert (
        module_2.ContStr
        == "((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*('|\\\\\\r?\\n)|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*(\"|\\\\\\r?\\n))"
    )
    assert (
        module_2.PseudoExtras
        == "(\\\\\\r?\\n|\\Z|#[^\\r\\n]*|((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'''|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"\"\"))"
    )
    assert (
        module_2.PseudoToken
        == "[ \\f\\t]*((\\\\\\r?\\n|\\Z|#[^\\r\\n]*|((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'''|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"\"\"))|(([0-9](?:_?[0-9])*[jJ]|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)[jJ])|(([0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?|\\.[0-9](?:_?[0-9])*)([eE][-+]?[0-9](?:_?[0-9])*)?|[0-9](?:_?[0-9])*[eE][-+]?[0-9](?:_?[0-9])*)|(0[xX](?:_?[0-9a-fA-F])+|0[bB](?:_?[01])+|0[oO](?:_?[0-7])+|(?:0(?:_?0)*|[1-9](?:_?[0-9])*)))|(\\r?\\n|(\\~|\\}|\\|=|\\||\\{|\\^=|\\^|\\]|\\[|@=|@|>>=|>>|>=|>|==|=|<=|<<=|<<|<|;|:=|:|/=|//=|//|/|\\.\\.\\.|\\.|\\->|\\-=|\\-|,|\\+=|\\+|\\*=|\\*\\*=|\\*\\*|\\*|\\)|\\(|\\&=|\\&|%=|%|!=))|((|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*('|\\\\\\r?\\n)|(|Fr|bR|f|rF|FR|Br|rb|rf|b|br|Rf|RB|Rb|F|R|B|u|r|rB|U|BR|fr|fR|RF)\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*(\"|\\\\\\r?\\n))|\\w+)"
    )
    assert module_2.endpats == {
        "'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        '"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        '"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "Fr'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'Fr"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "Fr'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'Fr"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "bR'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'bR"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "bR'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'bR"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "f'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'f"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "f'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'f"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "rF'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'rF"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "rF'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'rF"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "FR'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'FR"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "FR'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'FR"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "Br'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'Br"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "Br'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'Br"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "rb'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'rb"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "rb'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'rb"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "rf'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'rf"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "rf'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'rf"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "b'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'b"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "b'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'b"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "br'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'br"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "br'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'br"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "Rf'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'Rf"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "Rf'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'Rf"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "RB'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'RB"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "RB'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'RB"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "Rb'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'Rb"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "Rb'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'Rb"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "F'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'F"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "F'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'F"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "R'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'R"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "R'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'R"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "B'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'B"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "B'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'B"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "u'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'u"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "u'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'u"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "r'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'r"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "r'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'r"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "rB'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'rB"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "rB'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'rB"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "U'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'U"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "U'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'U"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "BR'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'BR"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "BR'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'BR"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "fr'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'fr"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "fr'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'fr"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "fR'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'fR"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "fR'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'fR"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
        "RF'": "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
        'RF"': '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',
        "RF'''": "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",
        'RF"""': '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',
    }
    assert module_2.single_quoted == {
        'rb"',
        "fR'",
        "f'",
        'fR"',
        '"',
        'R"',
        'r"',
        "rf'",
        'Fr"',
        'rf"',
        'Br"',
        "rb'",
        'rF"',
        'Rf"',
        "fr'",
        'RB"',
        'U"',
        "FR'",
        'Rb"',
        "rF'",
        "RB'",
        "br'",
        "F'",
        "rB'",
        'BR"',
        "RF'",
        "bR'",
        "R'",
        'B"',
        "r'",
        "'",
        'f"',
        "Rb'",
        'br"',
        'bR"',
        "U'",
        "b'",
        'RF"',
        'FR"',
        'F"',
        'b"',
        "B'",
        'fr"',
        'rB"',
        "BR'",
        'u"',
        "u'",
        "Rf'",
        "Br'",
        "Fr'",
    }
    assert module_2.triple_quoted == {
        'Br"""',
        "u'''",
        "RB'''",
        'Rb"""',
        'br"""',
        'fR"""',
        "Fr'''",
        "rB'''",
        'rF"""',
        'f"""',
        "FR'''",
        'Rf"""',
        'FR"""',
        '"""',
        'bR"""',
        'r"""',
        "B'''",
        'u"""',
        'U"""',
        "U'''",
        "RF'''",
        'RB"""',
        'rb"""',
        "b'''",
        "rb'''",
        "bR'''",
        "R'''",
        'fr"""',
        'B"""',
        "'''",
        "f'''",
        'BR"""',
        'b"""',
        "fR'''",
        'RF"""',
        'Fr"""',
        "fr'''",
        "Br'''",
        "r'''",
        "BR'''",
        'F"""',
        "Rf'''",
        "Rb'''",
        "F'''",
        "rf'''",
        "br'''",
        'R"""',
        'rf"""',
        "rF'''",
        'rB"""',
    }
    assert module_2.t == "RF"
    assert module_2.u == "RF'''"
    assert module_2.tabsize == 8
    var_0.istitle()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ":\x0b\rM"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ":\x0b\rM"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, str_0)
    assert str_1 == ":\x0b\rM"
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    module_0.Section()


def test_case_5():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = ":\x0b\rM"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == ":\x0b\rM"
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    google_parser_0 = module_0.GoogleParser(none_type_0)
    assert (
        f"{type(google_parser_0).__module__}.{type(google_parser_0).__qualname__}"
        == "google.GoogleParser"
    )
    assert (
        f"{type(google_parser_0.sections).__module__}.{type(google_parser_0.sections).__qualname__}"
        == "builtins.dict"
    )
    assert len(google_parser_0.sections) == 12
    assert google_parser_0.title_colon is True
    assert (
        f"{type(google_parser_0.titles_re).__module__}.{type(google_parser_0.titles_re).__qualname__}"
        == "re.Pattern"
    )
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    google_parser_0.add_section(google_parser_0)


def test_case_7():
    str_0 = "/j \npe~\t;!~DV*,gr#0m"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "/j "
    assert docstring_0.long_description == "pe~     ;!~DV*,gr#0m"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "N85]V*'%A~>~\nFM^QRw6"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description == "N85]V*'%A~>~"
    assert docstring_0.long_description == "FM^QRw6"
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = module_0.compose(docstring_0, str_0)
    assert str_1 == "N85]V*'%A~>~\nFM^QRw6"
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    module_3.getframeinfo(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "\t"
    docstring_0 = module_0.parse(str_0)
    assert (
        f"{type(docstring_0).__module__}.{type(docstring_0).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_0.short_description is None
    assert docstring_0.long_description is None
    assert docstring_0.blank_after_short_description is False
    assert docstring_0.blank_after_long_description is False
    assert docstring_0.meta == []
    assert docstring_0.style == module_1.DocstringStyle.GOOGLE
    assert module_0.EXAMPLES_KEYWORDS == {"example", "examples"}
    assert module_0.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_0.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_0.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_0.YIELDS_KEYWORDS == {"yield", "yields"}
    assert (
        f"{type(module_0.GOOGLE_TYPED_ARG_REGEX).__module__}.{type(module_0.GOOGLE_TYPED_ARG_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.GOOGLE_ARG_DESC_REGEX).__module__}.{type(module_0.GOOGLE_ARG_DESC_REGEX).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.MULTIPLE_PATTERN).__module__}.{type(module_0.MULTIPLE_PATTERN).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.DEFAULT_SECTIONS).__module__}.{type(module_0.DEFAULT_SECTIONS).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.DEFAULT_SECTIONS) == 12
    assert (
        f"{type(module_1.Docstring.description).__module__}.{type(module_1.Docstring.description).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.params).__module__}.{type(module_1.Docstring.params).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.raises).__module__}.{type(module_1.Docstring.raises).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.returns).__module__}.{type(module_1.Docstring.returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.many_returns).__module__}.{type(module_1.Docstring.many_returns).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.deprecation).__module__}.{type(module_1.Docstring.deprecation).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.Docstring.examples).__module__}.{type(module_1.Docstring.examples).__qualname__}"
        == "builtins.property"
    )
    str_1 = "ycaX!Wci\\;He"
    docstring_1 = module_0.parse(str_1)
    assert (
        f"{type(docstring_1).__module__}.{type(docstring_1).__qualname__}"
        == "common.Docstring"
    )
    assert docstring_1.short_description == "ycaX!Wci\\;He"
    assert docstring_1.long_description is None
    assert docstring_1.blank_after_short_description is False
    assert docstring_1.blank_after_long_description is False
    assert docstring_1.meta == []
    assert docstring_1.style == module_1.DocstringStyle.GOOGLE
    assert module_1.PARAM_KEYWORDS == {
        "keyword",
        "argument",
        "arg",
        "param",
        "key",
        "parameter",
        "attribute",
    }
    assert module_1.RAISES_KEYWORDS == {"except", "raise", "raises", "exception"}
    assert module_1.DEPRECATION_KEYWORDS == {"deprecated", "deprecation"}
    assert module_1.RETURNS_KEYWORDS == {"returns", "return"}
    assert module_1.YIELDS_KEYWORDS == {"yield", "yields"}
    assert module_1.EXAMPLES_KEYWORDS == {"example", "examples"}
    str_2 = module_0.compose(docstring_0, str_0)
    assert str_2 == ""
    module_3.getargspec(str_2)
