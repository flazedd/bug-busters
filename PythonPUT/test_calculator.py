# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import calculator as module_0


def test_case_0():
    none_type_0 = None
    bool_0 = False
    calculator_0 = module_0.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    with pytest.raises(ValueError):
        calculator_0.divide(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    calculator_0 = module_0.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_0.divide(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1394
    none_type_0 = None
    calculator_0 = module_0.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_0.add(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    calculator_0 = module_0.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    none_type_0 = None
    calculator_1 = module_0.Calculator()
    assert (
        f"{type(calculator_1).__module__}.{type(calculator_1).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_1.subtract(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    calculator_0 = module_0.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    none_type_0 = None
    calculator_0.multiply(none_type_0, none_type_0)
