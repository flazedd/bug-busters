# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import calculator as module_1


def test_case_0():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    bool_0 = False
    calculator_0 = module_1.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    with pytest.raises(ValueError):
        calculator_0.divide(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    calculator_0 = module_1.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_0.divide(calculator_0, calculator_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    calculator_0 = module_1.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    none_type_0 = None
    calculator_0.add(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "(W+\x0cSXoriLm;Yzk"
    calculator_0 = module_1.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_0.subtract(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    calculator_0 = module_1.Calculator()
    assert (
        f"{type(calculator_0).__module__}.{type(calculator_0).__qualname__}"
        == "calculator.Calculator"
    )
    calculator_0.multiply(none_type_0, none_type_0)
