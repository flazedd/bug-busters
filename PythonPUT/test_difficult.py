# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import difficult as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    set_0 = {bool_0}
    var_0 = difficult_0.calculate(bool_0, set_0, square=set_0)
    assert var_0 == 2
    int_0 = 541
    difficult_0.calculate(var_0, difficult_0, multiply=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    none_type_0 = None
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    difficult_0.calculate(bool_0, none_type_0)


def test_case_2():
    bool_0 = False
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    list_0 = difficult_0.calculate(bool_0, difficult_0, multiply=difficult_0)
    assert list_0 == 0


def test_case_3():
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_1: bool_1, bool_0: bool_1, bool_1: bool_1, bool_0: bool_1}
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    difficult_0.calculate(bool_0, bool_0, dict_0, multiply=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    bool_0 = True
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    list_0 = [difficult_0, bool_0, bool_0, difficult_0]
    difficult_0.calculate(bool_0, list_0, square=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    bytes_0 = b"&\x12"
    difficult_1 = module_0.Difficult()
    assert (
        f"{type(difficult_1).__module__}.{type(difficult_1).__qualname__}"
        == "difficult.Difficult"
    )
    var_0 = difficult_1.calculate(bool_0, bytes_0)
    assert var_0 == 18
    difficult_0.calculate(bool_0, var_0, square=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 541
    bytes_0 = b"7\xdc\x1a^\xd8H\xca\xbc\xb7\x97\xd2\xe9\x82\xd1g"
    difficult_0 = module_0.Difficult()
    assert (
        f"{type(difficult_0).__module__}.{type(difficult_0).__qualname__}"
        == "difficult.Difficult"
    )
    difficult_0.calculate(int_0, bytes_0)
