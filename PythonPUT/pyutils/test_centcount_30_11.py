# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import centcount as module_0
import builtins as module_1
import re as module_2
import enum as module_3


def test_case_0():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"


def test_case_2():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__le__(cent_count_0)
    assert var_0 is True


def test_case_3():
    int_0 = -3469
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(int_0)
    assert var_0 is True
    var_1 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"


def test_case_4():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__pos__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_5():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__le__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__ge__(var_0)
    assert var_1 is False
    var_1.__setitem__(var_0, cent_count_0)


def test_case_6():
    dict_0 = {}
    exception_0 = module_1.Exception(**dict_0)
    float_0 = 119.494
    cent_count_0 = module_0.CentCount(strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(119.494, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__int__()
    assert var_0 == 0
    int_0 = 881
    with pytest.raises(TypeError):
        cent_count_0.__rsub__(int_0)


def test_case_7():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__lt__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_0.__ge__(var_0)
    assert var_1 is True
    cent_count_1 = module_0.CentCount(currency=var_0, strict_mode=var_1)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is True
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency is None
    cent_count_2 = module_0.CentCount(cent_count_1)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode is False
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "USD"
    with pytest.raises(TypeError):
        cent_count_1.__mul__(cent_count_1)


def test_case_8():
    str_0 = "?u+=i59-%C;N\re^jPz"
    with pytest.raises(ValueError):
        module_0.CentCount(str_0)


def test_case_9():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__pos__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"


def test_case_10():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__le__(cent_count_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount(var_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount is True
    assert cent_count_1.currency == "USD"
    dict_0 = {}
    with pytest.raises(TypeError):
        cent_count_0.__mul__(dict_0)


def test_case_11():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_12():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__le__(var_0)
    assert var_1 is True
    var_2 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    str_0 = "|{*S/M2rm"
    var_3 = str_0.__ne__(var_2)
    bool_0 = False
    var_4 = cent_count_0.__le__(bool_0)
    assert var_4 is True
    cent_count_0.__ne__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_13():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__pos__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    module_2.fullmatch(cent_count_0, cent_count_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = 363
    var_0 = cent_count_0.__add__(int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 363
    assert var_0.currency == "USD"
    var_0.__iter__(cent_count_0)


def test_case_15():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__sub__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__le__(var_1)
    assert var_2 is True
    str_0 = "|{*S/M2rm"
    none_type_0 = None
    cent_count_1 = module_0.CentCount(currency=str_0, strict_mode=none_type_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is None
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "|{*S/M2rm"
    with pytest.raises(TypeError):
        cent_count_1.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "|{*kS/M2rm"
    none_type_0 = None
    module_0.CentCount(none_type_0, strict_mode=str_0)


def test_case_17():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_1.__le__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__ge__(var_1)
    assert var_2 is False
    cent_count_2 = module_0.CentCount(currency=cent_count_0, strict_mode=var_2)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode is False
    assert cent_count_2.centcount == 0
    assert (
        f"{type(cent_count_2.currency).__module__}.{type(cent_count_2.currency).__qualname__}"
        == "centcount.CentCount"
    )
    with pytest.raises(TypeError):
        cent_count_0.__truediv__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__ne__(cent_count_0)
    assert var_1 is False
    var_2 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = var_2.__pos__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_2.__pos__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    none_type_0 = None
    module_2.fullmatch(none_type_0, var_4)


def test_case_19():
    str_0 = "USD"
    with pytest.raises(ValueError):
        module_0.CentCount(str_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_1.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_3.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_21():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = module_2.purge()
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_0.__iter__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    str_0 = "|{*@S/2rm"
    cent_count_0.__sub__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__repr__()
    assert var_0 == "0.00 USD"
    var_0.__truediv__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    none_type_0 = None
    var_1 = cent_count_0.__ne__(none_type_0)
    assert var_1 is True
    var_2 = cent_count_0.__ne__(cent_count_0)
    assert var_2 is False
    var_3 = cent_count_0.__ge__(cent_count_0)
    assert var_3 is True
    none_type_1 = None
    var_4 = var_0.__lt__(var_3)
    assert var_4 is True
    var_5 = var_1.__gt__(var_2)
    assert var_5 is True
    var_6 = var_1.__gt__(none_type_1)
    var_3.__repr__(var_0)


def test_case_25():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    with pytest.raises(TypeError):
        cent_count_0.__rsub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__le__(var_0)
    assert var_1 is True
    var_2 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_3.__ne__(var_2)
    assert var_4 is False
    bool_0 = True
    var_5 = cent_count_0.__le__(bool_0)
    assert var_5 is True
    var_6 = cent_count_0.__ne__(var_4)
    assert var_6 is False
    var_7 = var_3.__ge__(var_6)
    assert var_7 is True
    var_8 = var_2.__pos__()
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "centcount.CentCount"
    )
    assert var_8.strict_mode is False
    assert var_8.centcount == 0
    assert var_8.currency == "USD"
    var_9 = cent_count_0.__sub__(var_5)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "centcount.CentCount"
    )
    assert var_9.strict_mode is False
    assert var_9.centcount == -1
    assert var_9.currency == "USD"
    var_10 = var_8.__ge__(var_5)
    assert var_10 is False
    var_11 = var_6.__pos__()
    assert var_11 == 0
    var_12 = var_4.__ne__(var_2)
    var_13 = var_5.__bool__()
    assert var_13 is True
    module_2.compile(var_1)


@pytest.mark.xfail(strict=True)
def test_case_27():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_0.__ge__(cent_count_0)
    assert var_2 is True
    var_3 = var_0.__pos__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__add__(var_1)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = var_1.__pos__()
    assert var_6 == pytest.approx(0.0, abs=0.01, rel=0.01)
    module_2.split(var_2, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_28():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__repr__()
    assert var_0 == "0.00 USD"
    int_0 = var_0.__hash__()
    assert int_0 == -738125880065869480
    var_1 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    int_1 = 387
    var_2 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_0.__iter__(int_1)


@pytest.mark.xfail(strict=True)
def test_case_29():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__le__(var_0)
    assert var_1 is True
    var_2 = var_0.__sub__(cent_count_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = var_0.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_3.__gt__(var_3)
    assert var_4 is False
    str_0 = "|{*S/M2rm"
    var_5 = var_0.__ne__(cent_count_0)
    assert var_5 is False
    var_6 = var_3.__rsub__(var_3)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == 0
    assert var_6.currency == "USD"
    var_7 = var_6.__le__(var_5)
    assert var_7 is True
    var_8 = var_7.__ne__(var_7)
    assert var_8 is False
    float_0 = -188.98
    var_9 = var_3.__ge__(float_0)
    assert var_9 is True
    var_6.__sub__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 USD"
    var_2 = cent_count_0.__le__(var_0)
    assert var_2 is True
    var_3 = var_0.__sub__(cent_count_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_1.__le__(var_0)
    var_5 = var_3.__sub__(var_2)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == -1
    assert var_5.currency == "USD"
    var_6 = var_5.__neg__()
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == 1
    assert var_6.currency == "USD"
    str_0 = "|{*S/M2rm"
    none_type_0 = None
    module_2.sub(none_type_0, none_type_0, str_0, var_3)


def test_case_31():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = module_0.CentCount(strict_mode=cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert (
        f"{type(var_0.strict_mode).__module__}.{type(var_0.strict_mode).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 USD"
    var_2 = cent_count_0.__le__(var_0)
    assert var_2 is True
    var_3 = var_0.__sub__(cent_count_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_0.__neg__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = var_0.__ne__(cent_count_0)
    assert var_6 is False
    var_7 = var_4.__rsub__(var_4)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "centcount.CentCount"
    )
    assert var_7.strict_mode is False
    assert var_7.centcount == 0
    assert var_7.currency == "USD"
    var_8 = var_0.__ge__(var_4)
    assert var_8 is True
    var_9 = var_7.__le__(var_6)
    assert var_9 is True
    var_10 = var_9.__ne__(var_9)
    assert var_10 is False
    var_11 = var_10.__ge__(var_3)
    with pytest.raises(TypeError):
        var_0.__sub__(var_11)


@pytest.mark.xfail(strict=True)
def test_case_32():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 USD"
    int_0 = var_0.__hash__()
    var_2 = cent_count_0.__add__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__le__(var_0)
    assert var_3 is True
    var_4 = var_0.__sub__(cent_count_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = var_0.__neg__()
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = cent_count_0.__rsub__(var_3)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == 1
    assert var_6.currency == "USD"
    var_7 = var_4.__gt__(var_2)
    assert var_7 is False
    var_8 = cent_count_0.__ne__(var_6)
    assert var_8 is True
    module_2.match(var_4, var_8)


def test_case_33():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    str_0 = "Y[}<Q"
    cent_count_1 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "Y[}<Q"
    with pytest.raises(TypeError):
        cent_count_1.__add__(cent_count_0)
