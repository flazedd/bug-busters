# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import dataclasses as module_1
import enum as module_2


def test_case_0():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )


def test_case_1():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "d]"
    set_0 = corpus_0.get_docids_by_exact_tag(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    str_1 = "*"
    var_0 = corpus_0.query(str_1)
    set_2 = corpus_0.invert_docid_set(str_1)
    str_2 = "T=qWvx|~ty\x0c"
    set_3 = corpus_0.get_docids_by_searching_tags(str_2)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "7S;`?J@G0C1i8x_F#A("
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    str_1 = ';?>azBkKM"\x0cqSv!257'
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_3():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    none_type_0 = None
    var_0 = module_1.field(default=set_0, hash=corpus_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    with pytest.raises(AttributeError):
        var_0.__getattr__(corpus_0, none_type_0)


def test_case_4():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "T=qWvx|~ty\x0c"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    var_1 = corpus_0.query(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "GLC9x~7oL6YK~w~ir`S!"
    set_0 = corpus_0.get_docids_by_property(str_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_1 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.query(set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "s=qWvx|~ty\x0c"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.query(var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "GLC9x~7oL6YK~w~ir`S!"
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    set_1 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.query(set_0)


def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "s=qWvx|~ty\x0c"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    var_1 = corpus_0.get_doc(str_0)


def test_case_9():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "d]"
    set_0 = corpus_0.get_docids_with_property(str_0)
    assert len(corpus_0.docids_with_property) == 1
    str_1 = "logical_search"
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    operation_0 = module_0.Operation.CONJUNCTION
    str_2 = "*"
    var_0 = corpus_0.query(str_2)
    none_type_0 = None
    set_2 = corpus_0.get_docids_by_exact_tag(none_type_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_3 = corpus_0.get_docids_with_property(operation_0)
    assert len(corpus_0.docids_with_property) == 2
    str_3 = "[;PV\\pk1&5RUxIR"
    var_1 = corpus_0.query(str_3)
    assert len(corpus_0.docids_by_tag) == 2
    var_2 = corpus_0.query(str_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "K+EUmM?y)["
    str_1 = "o\x0c)Un`ro*; >KLUeoM."
    var_0 = corpus_0.query(str_1)
    set_0 = corpus_0.get_docids_by_exact_tag(corpus_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_1 = corpus_0.invert_docid_set(set_0)
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 2
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "GL9x~7oL6YK~w~ir`S!"
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    none_type_0 = None
    set_1 = corpus_0.invert_docid_set(none_type_0)
    str_1 = "o\x0c)Un`ro*; >KLUeoM."
    var_0 = corpus_0.query(str_1)
    set_2 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    set_3 = corpus_0.invert_docid_set(str_0)
    set_4 = corpus_0.invert_docid_set(var_0)
    str_2 = "aK[k.j^)"
    var_1 = corpus_0.query(str_2)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "GLC9x~7oL6YK~w~ir`S!"
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    none_type_0 = None
    str_1 = "__main__"
    str_2 = "(+6K$KeuGO-"
    set_1 = corpus_0.invert_docid_set(none_type_0)
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    set_2 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    none_type_1 = None
    set_3 = corpus_0.invert_docid_set(str_0)
    str_3 = "T=qWvx|~ty\x0c"
    var_1 = corpus_0.query(str_2)
    module_2.EnumMeta(*none_type_1, **str_3)


@pytest.mark.xfail(strict=True)
def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "GLC9x~7oL6YK~w~ir`S!"
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    str_1 = "f=9>goWI"
    var_0 = corpus_0.get_doc(str_1)
    set_2 = corpus_0.get_docids_by_exact_tag(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_2 = "o\x0c)Un`ro*; >KLUeoM."
    var_1 = corpus_0.query(str_2)
    set_3 = corpus_0.get_docids_by_property(str_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_4 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    set_5 = corpus_0.invert_docid_set(str_0)
    str_3 = "T=qWvx|~ty\x0c"
    set_6 = corpus_0.get_docids_with_property(var_1)
    assert len(corpus_0.docids_with_property) == 2
    node_0 = module_0.Node(corpus_0, set_4, str_3)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == {*()}
    assert node_0.operands == "T=qWvx|~ty\x0c"
    set_7 = node_0.eval()
    var_2 = corpus_0.query(str_3)
    assert len(corpus_0.docids_by_tag) == 2
    str_4 = "logical_search"
    set_8 = corpus_0.get_docids_by_searching_tags(str_4)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_14():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "GLC9x~7oL6YK~w~ir`S!"
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    str_1 = "f=9>goWI"
    str_2 = "^:\n,"
    var_0 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_property) == 1
    var_1 = corpus_0.get_doc(str_1)
    operation_0 = module_0.Operation.INVERSION
    set_2 = corpus_0.get_docids_by_exact_tag(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_3 = "o\x0c)Un`ro*; >KLUeoM."
    var_2 = corpus_0.query(str_3)
    set_3 = corpus_0.get_docids_with_property(operation_0)
    assert len(corpus_0.docids_with_property) == 1
    corpus_0.get_docids_by_searching_tags(var_1)
