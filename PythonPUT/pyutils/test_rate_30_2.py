# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "j^Y|cn*:G"
    module_0.Rate(percentage=str_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "{)d"
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__lt__(bool_0)
    assert var_0 is False
    var_1 = var_0.__gt__(str_0)
    float_0 = -638.64
    set_0 = {float_0, float_0, float_0}
    int_0 = -347
    rate_1 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-2.47, abs=0.01, rel=0.01)
    rate_1.__lt__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    rate_0.__gt__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = 'd\x0c9&4l"Zl;#g"I\\".P'
    int_0 = 1842
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(relative=int_0)
    assert var_0 == "-99.000%"
    rate_0.__ge__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    none_type_1 = None
    str_0 = 'K*k\t\\4E_{{L\x0c"}hfl`'
    int_0 = -2553
    int_1 = 2242
    rate_0 = module_0.Rate(int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2242
    var_0 = rate_0.of(int_0)
    assert var_0 == pytest.approx(-5723826.0, abs=0.01, rel=0.01)
    var_1 = var_0.__eq__(str_0)
    var_2 = var_1.__ne__(none_type_1)
    var_2.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__float__()
    assert var_0 is False
    var_1 = rate_0.__mul__(var_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_0.__add__(var_0)
    assert var_2 == 0
    none_type_0 = None
    var_3 = rate_0.__ne__(var_2)
    assert var_3 is False
    var_4 = var_3.__truediv__(none_type_0)
    var_4.__truediv__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(bool_0)
    assert var_0 is True
    var_1 = rate_0.__le__(bool_0)
    assert var_1 is True
    bool_1 = False
    rate_1 = module_0.Rate(bool_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is False
    var_2 = rate_1.__truediv__(bool_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    rate_1.__ne__(rate_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ""
    int_0 = 1842
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(int_0)
    assert var_0 == pytest.approx(5.428881650380022e-06, abs=0.01, rel=0.01)
    var_1 = rate_0.apply_to(var_0)
    assert var_1 == pytest.approx(5.428881650380022e-08, abs=0.01, rel=0.01)
    int_1 = -1205
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = var_2.__add__(int_1)
    assert var_3 == -1204
    var_4 = rate_0.__sub__(int_0)
    assert var_4 == pytest.approx(-1841.99, abs=0.01, rel=0.01)
    none_type_0 = None
    var_5 = var_1.__eq__(str_0)
    bool_1 = False
    var_6 = rate_0.__add__(bool_1)
    assert var_6 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_7 = var_6.__lt__(bool_0)
    assert var_7 is True
    var_8 = var_5.__le__(none_type_0)
    var_9 = var_8.__le__(var_1)
    var_5.apply_to(var_0)


def test_case_9():
    str_0 = "73o"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = 'd\x0c9&4l"Zl;#g"I\\".P'
    str_1 = ""
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(bool_0)
    assert var_0 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_1 = rate_0.__repr__(relative=bool_0)
    assert var_1 == "-99.000%"
    int_0 = -1205
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = var_2.__add__(int_0)
    assert var_3 == -1204
    none_type_0 = None
    var_4 = rate_0.__hash__()
    assert var_4 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_5 = var_4.__eq__(str_1)
    bool_1 = False
    var_6 = rate_0.__add__(bool_1)
    assert var_6 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_7 = var_6.__lt__(bool_0)
    assert var_7 is True
    var_8 = var_5.__le__(none_type_0)
    var_9 = var_8.__le__(var_1)
    var_1.of(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 1842
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(int_0)
    assert var_0 == pytest.approx(5.428881650380022e-06, abs=0.01, rel=0.01)
    var_1 = rate_0.__repr__(relative=int_0)
    assert var_1 == "-99.000%"
    int_1 = -1205
    var_2 = rate_0.__repr__()
    assert var_2 == "+1.000%"
    var_2.__add__(int_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'd\x0c9&4l"Zl;#g"I\\".P'
    str_1 = ""
    int_0 = 1842
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(int_0)
    assert var_0 == pytest.approx(5.428881650380022e-06, abs=0.01, rel=0.01)
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(0.01, abs=0.01, rel=0.01)
    int_1 = -1205
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = var_2.__add__(int_1)
    assert var_3 == -1204
    var_4 = rate_0.__sub__(int_0)
    assert var_4 == pytest.approx(-1841.99, abs=0.01, rel=0.01)
    none_type_0 = None
    var_5 = rate_0.__hash__()
    assert var_5 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_6 = var_5.__eq__(str_1)
    bool_1 = False
    var_7 = rate_0.__add__(bool_1)
    assert var_7 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_8 = var_7.__lt__(bool_0)
    assert var_8 is True
    var_9 = var_6.__le__(none_type_0)
    var_10 = var_9.__le__(var_1)
    var_11 = rate_0.__le__(var_0)
    assert var_11 is False
    var_1.of(str_0)
