# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    none_type_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    str_0 = "78uYb?dn)1JV"
    str_1 = ""
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, none_type_0, bool_0)
    assert str_2 == ""
    list_0 = binary_search_tree_0.parent_path(str_0)
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    bool_2 = False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.__getitem__(bool_2)


def test_case_3():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bytes_0 = b"\xc5"
    tuple_0 = (bytes_0,)
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = False
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(tuple_0, bool_0)
    bool_1 = binary_search_tree_0.__delitem__(generator_0)
    assert bool_1 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_2 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_2 is True
    assert len(binary_search_tree_0) == 0
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_0.__getitem__(var_1)


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = binary_search_tree_0.iterate_leaves()
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "78uYb?dn)1JV"
    str_1 = ""
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, none_type_0, str_0)
    assert str_2 == ""
    list_0 = binary_search_tree_0.parent_path(str_0)
    bool_0 = False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.__getitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    var_2 = var_0.__repr__()
    assert var_2 == "0"
    var_1.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = True
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, bool_0)
    bool_1 = binary_search_tree_0.__delitem__(generator_0)
    assert bool_1 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_2 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_2 is False
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0"
    var_0.height()


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, var_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_1 = binary_search_tree_0.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    var_2 = var_0.__repr__()
    assert var_2 == "0"
    var_1.height()


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_2 = binary_search_tree_0.__delitem__(var_0)
    assert bool_2 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 3
    binary_search_tree_0.__delitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "x"
    list_0 = binary_search_tree_0.parent_path(str_0)
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = True
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, bool_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = bool_0.__repr__()
    assert var_2 == "True"
    int_0 = binary_search_tree_0.height()
    assert int_0 == 2
    var_2.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "m78uYb?dn)1JV"
    list_0 = binary_search_tree_0.parent_path(str_0)
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = True
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, bool_0)
    var_1 = binary_search_tree_0.iterate_postorder()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "0\n└──0"
    var_2.height()


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "78uYb?dn)1JV"
    list_0 = binary_search_tree_0.parent_path(str_0)
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bool_0 = False
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, bool_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__getitem__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == 0
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == ""
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.__getitem__(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    str_0 = "78uYb?n)1JV"
    list_0 = binary_search_tree_0.parent_path(str_0)
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    bytes_0 = b"\xc5"
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, bool_1)
    bool_2 = binary_search_tree_0.__delitem__(generator_0)
    assert bool_2 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_3 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_3 is False
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 3
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0\n   └──0"
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = bytes_0.__repr__()
    assert var_2 == "b'\\xc5'"
    int_0 = binary_search_tree_0.height()
    assert int_0 == 3
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_2.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    str_0 = "78uYb?dn)1JV"
    str_1 = "x"
    list_0 = binary_search_tree_0.parent_path(str_0)
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(str_0, str_1)
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_0.__delitem__(var_0)


def test_case_20():
    bool_0 = False
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is False
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, var_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "0\n└──0"
    binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    str_0 = "78uYb?dn)1JV"
    list_0 = binary_search_tree_0.parent_path(str_0)
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    bool_2 = False
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_1, bool_2)
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 2
    none_type_2 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 3
    bool_3 = binary_search_tree_0.__delitem__(var_1)
    assert bool_3 is True
    assert len(binary_search_tree_0) == 2
    var_2 = var_1.__repr__()
    assert var_2 == "1"
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "1"
    var_2.get_next_node(node_0)


def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    bool_0 = True
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_1, bool_0)
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == ""
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is True
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)
