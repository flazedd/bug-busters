# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import dataclasses as module_1
import enum as module_2
import __exceptions as module_3


def test_case_0():
    pass


def test_case_1():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    var_0 = corpus_0.get_doc(none_type_0)
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "&Gu"
    set_1 = corpus_0.get_docids_by_property(str_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "$6{ZD/]|"
    set_2 = corpus_0.get_docids_by_searching_tags(str_1)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)


def test_case_3():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )


def test_case_4():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "4'Kr3R&]c\nl7J\x0bbIC\\^#"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_5():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    str_0 = "45?"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "MA"
    str_1 = "H\x0c%'a?7~\x0bKZ"
    set_1 = corpus_0.get_docids_by_property(str_0, str_1)
    assert len(corpus_0.docids_by_property) == 1


def test_case_7():
    int_0 = 359
    var_0 = module_1.field(init=int_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    node_0 = module_0.Node(var_0, var_0, var_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "dataclasses.Field"
    )
    assert (
        f"{type(node_0.op).__module__}.{type(node_0.op).__qualname__}"
        == "dataclasses.Field"
    )
    assert (
        f"{type(node_0.operands).__module__}.{type(node_0.operands).__qualname__}"
        == "dataclasses.Field"
    )
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    str_0 = "9Tf&Pj_"
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_1 = "(Js\\NMEih"
    var_0 = corpus_0.get_doc(str_1)
    set_1 = {str_0, str_0, str_1}
    var_1 = corpus_0.query(str_1)
    set_2 = var_0.__repr__()
    assert set_2 == "None"
    set_3 = corpus_0.get_docids_by_searching_tags(set_1)
    str_2 = "@(4bpK%w`e"
    document_0 = module_0.Document(var_1, none_type_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid is None
    assert document_0.tags is None
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    set_4 = corpus_0.get_docids_with_property(str_2)
    assert len(corpus_0.docids_with_property) == 1
    set_5 = corpus_0.get_docids_by_property(var_1, var_1)
    assert len(corpus_0.docids_by_property) == 1
    var_2 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.get_docids_by_searching_tags(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = '"<'
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_1 = "(Js\\NMEih"
    var_0 = corpus_0.query(str_1)
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "@(4bpK%w`e"
    set_2 = corpus_0.get_docids_with_property(str_2)
    assert len(corpus_0.docids_with_property) == 1
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    var_2 = set_1.__repr__()
    assert var_2 == "set()"
    enum_dict_0 = module_2._EnumDict()
    assert (
        f"{type(enum_dict_0).__module__}.{type(enum_dict_0).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(enum_dict_0) == 0
    corpus_0.query(set_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_1.field()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    str_0 = "a*XdntXf#l\r[|Yj*a"
    set_0 = {str_0}
    node_0 = module_0.Node(set_0, set_0, set_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert node_0.corpus == {"a*XdntXf#l\r[|Yj*a"}
    assert node_0.op == {"a*XdntXf#l\r[|Yj*a"}
    assert node_0.operands == {"a*XdntXf#l\r[|Yj*a"}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_1 = node_0.eval()
    var_0.query(var_0)


def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    bytes_0 = b"J\xd9\\`\x15\xe1SHFV"
    str_0 = "?"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_1 = corpus_0.invert_docid_set(bytes_0)


def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    none_type_0 = None
    str_0 = "9Tf&Pj_"
    set_1 = corpus_0.invert_docid_set(corpus_0)
    str_1 = "(Js\\NMEih"
    var_0 = corpus_0.query(str_1)
    set_2 = corpus_0.get_docids_by_property(none_type_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_2 = "4'Kr3R&]c\nl7J\x0bbIC\\^#"
    set_3 = corpus_0.get_docids_by_searching_tags(str_2)
    str_3 = "@(4bpK%w`e"
    set_4 = corpus_0.get_docids_with_property(str_3)
    assert len(corpus_0.docids_with_property) == 1
    set_5 = corpus_0.get_docids_by_property(str_2, str_2)
    assert len(corpus_0.docids_by_property) == 2
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    var_2 = var_0.__repr__()
    assert var_2 == "None"


@pytest.mark.xfail(strict=True)
def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    str_0 = "9Tf&Pj_"
    str_1 = "[.&:bZK)69;\rIJ\tdG`wR"
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    set_1 = {str_0, str_0, str_1}
    set_2 = corpus_0.invert_docid_set(set_1)
    none_type_1 = None
    str_2 = "z@K'ytYV\trO"
    set_3 = {str_1, str_0, str_2}
    set_4 = corpus_0.invert_docid_set(set_3)
    str_3 = "45?"
    var_0 = module_1.field(metadata=none_type_0, kw_only=corpus_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    set_5 = corpus_0.get_docids_by_searching_tags(var_0)
    str_4 = "@(4bpK%w`e"
    set_6 = corpus_0.get_docids_with_property(str_4)
    assert len(corpus_0.docids_with_property) == 1
    str_5 = ";:M]#ueuo\n@'"
    var_1 = corpus_0.query(str_5)
    assert len(corpus_0.docids_by_property) == 1
    set_7 = corpus_0.get_docids_by_property(var_0, var_0)
    assert len(corpus_0.docids_by_property) == 2
    var_2 = corpus_0.query(str_3)
    assert len(corpus_0.docids_by_tag) == 1
    dict_0 = {}
    var_3 = module_1.dataclass(
        none_type_0, eq=str_3, unsafe_hash=dict_0, kw_only=dict_0, slots=var_2
    )
    set_8 = corpus_0.get_docids_by_exact_tag(none_type_1)
    assert len(corpus_0.docids_by_tag) == 2
    corpus_0.query(set_8)


def test_case_14():
    var_0 = module_1.field()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    set_0 = {var_0, var_0}
    node_0 = module_0.Node(set_0, set_0, set_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.corpus) == 1
    assert (
        f"{type(node_0.op).__module__}.{type(node_0.op).__qualname__}" == "builtins.set"
    )
    assert len(node_0.op) == 1
    assert (
        f"{type(node_0.operands).__module__}.{type(node_0.operands).__qualname__}"
        == "builtins.set"
    )
    assert len(node_0.operands) == 1
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    with pytest.raises(module_3.PyUtilsParseError):
        node_0.eval()


@pytest.mark.xfail(strict=True)
def test_case_15():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "(Js\\NMEih"
    var_0 = corpus_0.query(str_0)
    set_1 = corpus_0.get_docids_by_property(none_type_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    var_1 = module_1.field(metadata=none_type_0, kw_only=corpus_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    set_2 = corpus_0.get_docids_by_searching_tags(var_1)
    str_1 = "@(4bpK%w`e"
    set_3 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    set_4 = corpus_0.get_docids_by_property(var_1, var_1)
    assert len(corpus_0.docids_by_property) == 2
    var_2 = var_1.__repr__()
    enum_dict_0 = module_2._EnumDict()
    assert (
        f"{type(enum_dict_0).__module__}.{type(enum_dict_0).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(enum_dict_0) == 0
    var_3 = corpus_0.query(var_2)
    enum_dict_0.invert_docid_set(set_3)


@pytest.mark.xfail(strict=True)
def test_case_16():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "9Tf&Pj_"
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_1 = "(Js\\NMEih"
    var_0 = corpus_0.query(str_1)
    var_1 = module_1.field(metadata=var_0, kw_only=corpus_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    set_1 = corpus_0.get_docids_by_searching_tags(var_1)
    str_2 = "@(4bpK%w`e"
    set_2 = corpus_0.get_docids_with_property(str_2)
    assert len(corpus_0.docids_with_property) == 1
    var_2 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    dict_0 = {}
    str_3 = "\\VgKH\tf"
    set_3 = corpus_0.get_docids_by_searching_tags(str_3)
    var_3 = var_1.__repr__()
    enum_dict_0 = module_2._EnumDict()
    assert (
        f"{type(enum_dict_0).__module__}.{type(enum_dict_0).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(enum_dict_0) == 0
    set_4 = corpus_0.invert_docid_set(dict_0)
    corpus_0.query(set_4)
