# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1


def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    none_type_1 = None
    node_1 = module_0.Node(none_type_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "bst.Node"
    assert node_1.left is None
    assert node_1.right is None
    assert node_1.value is None
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    none_type_2 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "[None, None, None, None]\n└──[None, None, None, None]"
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 1
    binary_search_tree_0.get_next_node(node_0)


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    list_0 = binary_search_tree_0.parent_path(var_0)
    none_type_0 = None
    list_1 = [none_type_0, none_type_0, none_type_0, none_type_0]
    none_type_1 = binary_search_tree_0.insert(list_1)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "[None, None, None, None]"
    bool_0 = binary_search_tree_0.__delitem__(list_1)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "bst"
    bool_0 = False
    binary_search_tree_0.repr_traverse(str_0, str_0, str_0, bool_0)


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "[[...], [...], [...], [...]]"
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    bool_1 = var_0.__contains__(var_0)
    assert bool_1 is True
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0


def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    bool_1 = binary_search_tree_0.__delitem__(list_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    none_type_0.__contains__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.height()
    assert int_0 == 2
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.get_next_node(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1, none_type_1]
    none_type_2 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "[None, None, None, None]"
    binary_search_tree_0.__contains__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    none_type_2 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    none_type_3 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 3
    var_0 = binary_search_tree_0.__repr__()
    assert (
        var_0
        == "[None, None, None, None]\n└──[None, None, None, None]\n   └──[None, None, None, None]"
    )
    binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_0)
    str_0 = "__main__"
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, node_0, bool_0)
    assert str_1 == "\n__main____main__None"
    var_0 = binary_search_tree_0.get_root()
    list_0 = binary_search_tree_0.parent_path(var_0)
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_1.depth()


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.iterate_preorder()
    var_0 = binary_search_tree_0.iterate_inorder()
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.value) == 4
    list_1 = binary_search_tree_0.parent_path(var_1)
    binary_search_tree_0.__delitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert (
        var_0
        == "[[...]\n└──[...], [...]\n└──[...], [...]\n└──[...], [...]\n└──[...]]\n└──[[...]\n└──[...], [...]\n└──[...], [...]\n└──[...], [...]\n└──[...]]"
    )
    binary_search_tree_0.__delitem__(none_type_0)


def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__len__()
    assert var_1 == 0
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "\n└──"
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == ""
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = [
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
        binary_search_tree_0,
    ]
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "{None: None}"
    str_1 = "5}>E:xa2OH(op?j`s"
    none_type_0 = None
    bool_0 = True
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, none_type_0, bool_0)
    assert str_2 == ""
    none_type_1 = binary_search_tree_0.insert(str_2)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_1 = binary_search_tree_0.__delitem__(str_1)
    assert bool_1 is False
    var_1 = binary_search_tree_0.__getitem__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == ""


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "[None, None, None, None]"
    list_1 = [none_type_0]
    bool_0 = binary_search_tree_0.__delitem__(list_1)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_1 = binary_search_tree_1.__contains__(var_0)
    assert bool_1 is False
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is False
    node_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    none_type_1 = None
    list_0 = [none_type_1, none_type_1, none_type_1, none_type_1]
    none_type_2 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    list_1 = []
    none_type_3 = binary_search_tree_0.insert(list_1)
    assert len(binary_search_tree_0) == 2
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.__repr__()
    assert var_0 == ""
    binary_search_tree_0.__delitem__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "\n└──"
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    bool_1 = binary_search_tree_0.__contains__(var_1)
    assert bool_1 is False
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == ""
    var_1.get_next_node(var_0)


def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.__repr__()
    assert list_0 == ""
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 2
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "\n└──"
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    bool_1 = binary_search_tree_0.__contains__(var_0)
    assert bool_1 is False
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "\n└──"
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "\n└──"
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    var_2 = var_1.__repr__()
    assert var_2 == "'\\n└──'"
    bool_1 = binary_search_tree_0.__delitem__(var_1)
    assert bool_1 is False
    float_0 = -1803.2
    var_1.__contains__(float_0)
