# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    float_0 = 4006.4777
    with pytest.raises(ValueError):
        module_0.Rate(percentage=float_0, percent_change=float_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(none_type_0)


def test_case_2():
    bool_0 = False
    var_0 = bool_0.__hash__()
    assert var_0 == 0
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.apply_to(rate_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.__sub__(rate_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 105
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 105
    rate_0.__lt__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -2082
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-19.82, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(int_0)
    assert var_0 is True
    var_1 = var_0.__mul__(int_0)
    assert var_1 == -2082
    var_2 = rate_0.of(var_1)
    assert var_2 == pytest.approx(41265.24, abs=0.01, rel=0.01)
    var_3 = var_1.__float__()
    assert var_3 == pytest.approx(-2082.0, abs=0.01, rel=0.01)
    bool_0 = True
    var_4 = rate_0.__ne__(var_0)
    assert var_4 is True
    int_1 = 4058
    var_5 = rate_0.__eq__(var_2)
    assert var_5 is False
    tuple_0 = (int_1, int_1)
    var_6 = rate_0.__truediv__(bool_0)
    assert var_6 == pytest.approx(-19.82, abs=0.01, rel=0.01)
    var_7 = var_3.__hash__()
    assert var_7 == -2082
    var_5.__repr__(relative=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2400
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(24.0, abs=0.01, rel=0.01)
    str_0 = "E9"
    rate_0.__truediv__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 105
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 105
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    var_1 = rate_0.__float__()
    assert var_1 == 105
    var_2 = rate_0.__gt__(int_0)
    assert var_2 is False
    rate_0.__sub__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 105
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 105
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    var_1 = rate_0.__ne__(var_0)
    assert var_1 is True
    var_2 = rate_0.__gt__(int_0)
    assert var_2 is False
    var_3 = var_2.__sub__(var_1)
    assert var_3 == -1
    var_4 = var_3.__mul__(var_0)
    assert var_4 == -1
    var_0.of(var_0)


def test_case_8():
    str_0 = ">v|\nX\x0cD.PV#r8\\^"
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percent_change=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    rate_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = 610.321
    bool_0 = False
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(610.321, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(610.321, abs=0.01, rel=0.01)
    var_1 = var_0.__eq__(float_0)
    assert var_1 is True
    var_2 = var_1.__gt__(float_0)
    var_3 = var_2.__lt__(float_0)
    var_4 = var_3.__lt__(float_0)
    var_5 = var_4.__ne__(bool_0)
    var_5.__float__()


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -1805
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(int_0)
    assert var_0 == pytest.approx(1806.01, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True
    var_2 = rate_0.__float__()
    assert var_2 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_3 = var_0.__gt__(var_0)
    assert var_3 is False
    var_4 = var_1.__float__()
    assert var_4 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_5 = var_0.__sub__(var_1)
    assert var_5 == pytest.approx(1805.01, abs=0.01, rel=0.01)
    var_6 = var_5.__ne__(var_4)
    assert var_6 is True
    var_3.__repr__(places=var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = -1806
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = var_0.__le__(bool_0)
    assert var_1 is True
    var_2 = rate_0.__mul__(bool_0)
    assert var_2 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_1.of(var_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 1711
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 1711
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = var_0.__gt__(int_0)
    assert var_1 is False
    rate_0.__repr__(relative=int_0, places=var_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 73
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 73
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    var_1 = var_0.__gt__(int_0)
    assert var_1 is False
    rate_0.__repr__(relative=int_0, places=var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 73
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 73
    rate_0.__repr__(relative=int_0, places=rate_0)
