# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import builtins as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.iterate_postorder()


def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    generator_0 = binary_search_tree_1.get_nodes_in_range_inclusive(
        binary_search_tree_1, binary_search_tree_1
    )
    var_0 = binary_search_tree_1.__getitem__(binary_search_tree_1)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = binary_search_tree_0.parent_path(none_type_0)
    bool_0 = binary_search_tree_0.__contains__(none_type_0)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__len__()
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    none_type_0 = None
    list_0 = binary_search_tree_0.parent_path(none_type_0)
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    bool_0.insert(bool_0)


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.iterate_leaves()
    str_0 = "\rU46;Dv\nc\x0c_fm"
    bool_0 = True
    binary_search_tree_1.repr_traverse(
        str_0, binary_search_tree_0, binary_search_tree_1, bool_0
    )


def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__repr__()
    assert var_1 == "''"
    var_2 = var_1.__len__()
    assert var_2 == 2


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "builtins.generator"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_1 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = binary_search_tree_1.get_root()
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_3 = binary_search_tree_0.__repr__()
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 1
    var_1.__len__()


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = False
    var_0 = binary_search_tree_0.__getitem__(bool_0)
    var_1 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.iterate_postorder()
    bool_1 = binary_search_tree_0.__delitem__(var_1)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_1 = binary_search_tree_0.iterate_preorder()
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.iterate_postorder()
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(var_1)
    binary_search_tree_0.__delitem__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_1 = binary_search_tree_0.__getitem__(list_0)
    str_0 = "'bX,\x0b6QTn+"
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, var_1, list_0)
    assert str_1 == ""
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    object_0 = module_1.object(*var_0)
    bool_1 = binary_search_tree_1.__delitem__(var_0)
    assert bool_1 is False
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(var_0)
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    var_0.__contains__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    bytes_0 = b"\xfdF;^\xf7R\tL\x10T\xb0\xbaW\xcb\x9e\x8d9lT4"
    none_type_0 = binary_search_tree_0.insert(bytes_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(bytes_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.iterate_postorder()
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 2
    var_2.height()


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_1 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(var_1)
    assert bool_0 is True
    list_0 = binary_search_tree_1.parent_path(var_1)
    binary_search_tree_0.__delitem__(node_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.iterate_preorder()
    var_2 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_1, var_1)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__contains__(var_2)
    assert bool_0 is True
    list_0 = binary_search_tree_1.parent_path(var_2)
    var_3 = binary_search_tree_1.__getitem__(var_2)
    var_4 = binary_search_tree_0.__repr__()
    bool_1 = binary_search_tree_0.__delitem__(var_2)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    none_type_1 = binary_search_tree_1.insert(var_4)
    assert len(binary_search_tree_1) == 1
    binary_search_tree_1.__contains__(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "None"
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = binary_search_tree_1.iterate_leaves()
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 1
    binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.iterate_preorder()
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(none_type_0, var_0)
    var_2 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_3 = module_1.object(*var_1)
    none_type_1 = binary_search_tree_0.insert(var_3)
    assert len(binary_search_tree_0) == 1
    generator_1 = binary_search_tree_0.get_nodes_in_range_inclusive(var_2, var_2)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(var_3)
    assert bool_0 is True
    list_0 = binary_search_tree_1.parent_path(var_3)
    var_4 = binary_search_tree_1.__getitem__(var_3)
    var_1.__len__()
