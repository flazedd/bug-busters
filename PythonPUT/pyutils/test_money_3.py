# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import money as module_0
import decimal as module_1
import re as module_2


def test_case_0():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    str_0 = "dvjK@k="
    with pytest.raises(ValueError):
        module_0.Money(str_0)


def test_case_2():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False


def test_case_3():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__gt__(money_0)
    assert var_0 is False
    var_1 = money_0.__le__(var_0)
    assert var_1 is True
    var_2 = var_0.__float__()
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)


def test_case_4():
    float_0 = -1242.2
    money_0 = module_0.Money(float_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__rsub__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"


def test_case_5():
    none_type_0 = None
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__sub__(none_type_0)


def test_case_6():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__lt__(money_0)
    assert var_1 is False


def test_case_7():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__lt__(money_0)
    assert var_1 is False
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_2 = money_0.__ne__(var_1)
    assert var_2 is False
    var_3 = money_0.__rsub__(money_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_1.__float__()
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_8():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__sub__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    str_0 = "`Yc\\xeIA<MNs9,*=:]4"
    money_1 = module_0.Money(var_2, str_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "`Yc\\xeIA<MNs9,*=:]4"
    var_3 = var_1.__sub__(var_1)
    assert var_3 == 0
    var_4 = var_2.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_3.__pos__()
    assert var_5 == 0
    var_6 = var_3.__ne__(var_4)
    var_7 = var_2.__add__(var_5)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    var_8 = money_0.__lt__(var_4)
    assert var_8 is True
    var_2.scan(var_2)


def test_case_9():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__gt__(money_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    assert var_2 == "False"


def test_case_10():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__rsub__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__repr__()
    assert var_2 == "1.00 USD"


def test_case_11():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__lt__(money_0)
    assert var_0 is False


def test_case_12():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    none_type_0 = None
    var_1 = var_0.__eq__(none_type_0)
    assert var_1 is False
    var_2 = var_1.__sub__(none_type_0)
    money_1 = module_0.Money(var_1, money_0, strict_mode=money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_1.currency).__module__}.{type(money_1.currency).__qualname__}"
        == "money.Money"
    )
    var_3 = var_1.__sub__(var_0)
    var_4 = var_0.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    with pytest.raises(TypeError):
        money_1.__gt__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    money_1 = module_0.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0.__setattr__(money_1, money_0, money_0)


def test_case_14():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__eq__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__dir__()
    var_3 = money_0.__add__(var_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    int_0 = money_0.__hash__()


@pytest.mark.xfail(strict=True)
def test_case_15():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    decimal_0 = module_1.Decimal()
    assert (
        f"{type(decimal_0).__module__}.{type(decimal_0).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = var_0.__le__(money_0)
    var_2 = money_0.__truediv__(var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_1.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_3.__pos__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = money_0.__add__(var_4)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    module_2.escape(money_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    money_0 = module_0.Money(strict_mode=set_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == {*()}
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__le__(money_0)
    assert var_0 is True
    var_1 = money_0.__pos__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__repr__()
    assert var_2 == "0.00 USD"
    var_3 = var_1.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_4 = var_1.__gt__(money_0)
    assert var_4 is False
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_5 = money_0.__add__(var_4)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_2.__lt__(money_0)
    var_5.__lt__(var_2)


def test_case_17():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = module_0.Money()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = module_1.Decimal()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_3 = var_0.__le__(money_0)
    assert var_3 is True
    with pytest.raises(TypeError):
        money_0.__truediv__(var_0)


def test_case_18():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"


def test_case_19():
    set_0 = set()
    money_0 = module_0.Money(strict_mode=set_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == {*()}
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__mul__(set_0)


def test_case_20():
    none_type_0 = None
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    with pytest.raises(TypeError):
        money_0.__gt__(none_type_0)


def test_case_21():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    bytes_0 = b""
    money_1 = module_0.Money(var_0, bytes_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_1 = money_1.__repr__()
    assert var_1 == "$0.00"


@pytest.mark.xfail(strict=True)
def test_case_22():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__ne__(var_0)
    assert var_1 is False
    var_1.truncate_fractional_cents()


def test_case_23():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__lt__(money_0)
    assert var_0 is False
    var_1 = money_0.__eq__(money_0)
    assert var_1 is True
    var_2 = money_0.__le__(var_1)
    assert var_2 is True
    var_3 = var_1.__float__()
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)


def test_case_24():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    money_1 = module_0.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = var_0.__sub__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__repr__()
    assert var_3 == "-1.00 USD"


def test_case_25():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    with pytest.raises(TypeError):
        money_0.__mul__(var_0)


def test_case_26():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.round_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = var_0.__sub__(money_0)
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_2 = var_1.__eq__(var_0)
    var_3 = money_0.__sub__(money_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    money_1 = module_0.Money(currency=var_1, strict_mode=var_2)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "builtins.NotImplementedType"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_1.currency).__module__}.{type(money_1.currency).__qualname__}"
        == "builtins.NotImplementedType"
    )
    with pytest.raises(TypeError):
        money_1.__sub__(money_0)


def test_case_27():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    money_1 = module_0.Money(var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_0.Money()
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_2 = money_1.__eq__(var_0)
    assert var_2 is False
    var_3 = money_1.__repr__()
    assert var_3 == "1.00 USD"


def test_case_28():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__sub__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    none_type_0 = None
    str_0 = "S"
    bytes_0 = b'\x0c{\x0f"#\xee\x9f{'
    money_1 = module_0.Money(currency=str_0, strict_mode=bytes_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode == b'\x0c{\x0f"#\xee\x9f{'
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "S"
    with pytest.raises(TypeError):
        money_1.__sub__(none_type_0)


def test_case_29():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__ge__(var_0)
    assert var_2 is True
    money_1 = module_0.Money(money_0, strict_mode=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    with pytest.raises(TypeError):
        money_1.__rsub__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_30():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__sub__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_4 = var_0.__ge__(var_3)
    assert var_4 is True
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_0.__call__(money_0, var_2, module=var_0, type=var_2, start=var_2)


def test_case_31():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    money_1 = module_0.Money(currency=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is True
    with pytest.raises(TypeError):
        money_1.__rsub__(money_0)


def test_case_32():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    money_1 = module_0.Money(var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = var_1.__mul__(var_0)
    money_2 = module_0.Money(strict_mode=var_0)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert (
        f"{type(money_2.strict_mode).__module__}.{type(money_2.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_3 = money_0.__float__()
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = var_1.__sub__(var_3)
    var_5 = var_1.__rsub__(var_1)
    assert var_5 == 0
    with pytest.raises(TypeError):
        money_2.__add__(var_3)


def test_case_33():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__sub__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    str_0 = "`Yc\\xeIA<MNs9,*=:]4"
    money_1 = module_0.Money(var_2, str_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "`Yc\\xeIA<MNs9,*=:]4"
    var_3 = var_1.__sub__(var_1)
    assert var_3 == 0
    var_4 = var_2.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    with pytest.raises(TypeError):
        var_0.__lt__(money_1)


def test_case_34():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    int_0 = var_0.__hash__()
    int_1 = money_0.__hash__()
    var_2 = money_0.__sub__(int_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_0.__ne__(var_0)
    assert var_3 is False
    var_4 = var_0.__pos__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = money_0.__float__()
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_6 = var_0.__eq__(var_3)
    assert var_6 is True
    var_7 = var_0.__sub__(var_0)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    var_8 = var_3.__le__(var_5)
    var_9 = var_0.__le__(var_6)
    assert var_9 is True
    regex_flag_0 = module_2.RegexFlag.DOTALL
    var_10 = var_0.__gt__(regex_flag_0)
    assert var_10 is False
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_11 = var_7.__gt__(var_1)
    assert var_11 is False
    var_12 = var_2.__add__(var_3)
    assert f"{type(var_12).__module__}.{type(var_12).__qualname__}" == "money.Money"
    assert var_12.strict_mode is False
    assert (
        f"{type(var_12.amount).__module__}.{type(var_12.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_12.currency == "USD"
    var_13 = int_0.__ge__(var_4)
    var_14 = var_12.__repr__()
    var_15 = var_7.__repr__()
    assert var_15 == "0.00 USD"
    var_16 = var_9.__truediv__(var_7)
    money_1 = module_0.Money(var_15)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_17 = var_9.__truediv__(money_0)
    var_18 = var_6.__truediv__(int_0)
    assert var_18 == pytest.approx(3.259774458161105e-08, abs=0.01, rel=0.01)


def test_case_35():
    bool_0 = False
    str_0 = "\\?\r5k~8mBl:B|(N4ko-F"
    money_0 = module_0.Money(currency=str_0, strict_mode=str_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == "\\?\r5k~8mBl:B|(N4ko-F"
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "\\?\r5k~8mBl:B|(N4ko-F"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__lt__(bool_0)
