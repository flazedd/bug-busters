# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    binary_search_tree_0.__delitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.iterate_preorder()
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_1)
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_1.value) == 0
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == ""
    str_0 = 'Z0dr\tb`^S"U\r'
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_1.value) == 1
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == 'Z0dr\tb`^S"U\r'
    none_type_2 = binary_search_tree_0.insert(var_3)
    assert len(binary_search_tree_0) == 2
    assert len(var_1.value) == 2
    var_4 = binary_search_tree_0.__repr__()
    assert var_4 == 'Z0dr\tb`^S"U\r\n└──Z0dr\tb`^S"U\r'
    var_5 = none_type_1.__repr__()
    assert var_5 == "None"
    binary_search_tree_0.get_next_node(none_type_2)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    list_0 = binary_search_tree_0.parent_path(var_0)
    var_1 = binary_search_tree_0.iterate_postorder()
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == ""


def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    dict_0 = {bool_0: binary_search_tree_0}
    bool_1 = binary_search_tree_0.__contains__(dict_0)
    assert bool_1 is False
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    dict_0 = {bool_0: binary_search_tree_0}
    str_0 = "\x0bDp7"
    bool_1 = True
    binary_search_tree_0.repr_traverse(str_0, bool_0, dict_0, bool_1)


def test_case_7():
    int_0 = 342
    str_0 = "~g!XX)Agb/{O\x0cuG.%u"
    none_type_0 = None
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_1 = binary_search_tree_0.repr_traverse(int_0, str_0, none_type_0, bool_0)
    assert str_1 == ""
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""


def test_case_9():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    none_type_0 = None
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 0
    var_1.__delitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = None
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(
        none_type_0, none_type_1
    )
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    var_2 = binary_search_tree_0.get_next_node(var_0)
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    assert len(var_1.value) == 0
    bool_2 = binary_search_tree_0.__contains__(none_type_1)
    assert bool_2 is False
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    assert len(var_1.value) == 1
    var_3 = binary_search_tree_0.__repr__()
    var_4 = binary_search_tree_0.iterate_leaves()
    var_4.get_next_node(var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    str_0 = ":tb>Ecn0"
    bool_0 = False
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, none_type_0, bool_0)
    assert str_1 == ""
    bool_1 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_1 is True
    bool_2 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_2 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    binary_search_tree_0.get_next_node(str_1)


def test_case_13():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    str_0 = 'Z0dr\tb`^S"U\r'
    list_0 = binary_search_tree_0.parent_path(var_0)
    str_1 = ":tb>Ecn0"
    bool_0 = False
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, none_type_0, bool_0)
    assert str_2 == ""
    bool_1 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_1 is True
    binary_search_tree_0.__contains__(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    binary_search_tree_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = None
    var_0 = binary_search_tree_0.__getitem__(none_type_1)
    float_0 = 4167.53
    list_0 = [none_type_0, none_type_1, none_type_1]
    none_type_2 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "[None, None, None]"
    bool_0 = var_0.__le__(float_0)
    float_0.__getitem__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    var_1 = module_1.object(*var_0)
    bool_1 = binary_search_tree_0.__contains__(var_0)
    assert bool_1 is False
    binary_search_tree_0.get_next_node(var_0)


def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    str_0 = "vb9 "
    var_0 = binary_search_tree_0.__getitem__(none_type_0)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    str_1 = binary_search_tree_1.repr_traverse(str_0, none_type_0, none_type_0, bool_1)
    assert str_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    str_0 = 'Z0dr\tb`^S"U\r'
    list_0 = binary_search_tree_0.parent_path(var_0)
    bool_0 = False
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, none_type_0, bool_0)
    assert str_1 == ""
    bool_1 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_1 is True
    bool_2 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_2 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    str_2 = binary_search_tree_0.repr_traverse(
        str_1, none_type_0, none_type_0, none_type_0
    )
    assert str_2 == ""
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    bool_3 = binary_search_tree_0.__contains__(bool_2)
    assert bool_3 is False
    none_type_1 = binary_search_tree_0.insert(bool_1)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    binary_search_tree_0.get_next_node(var_0)


def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    generic_0 = module_2.Generic()
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_2.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_2.T).__module__}.{type(module_2.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.KT).__module__}.{type(module_2.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT).__module__}.{type(module_2.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_co).__module__}.{type(module_2.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.V_co).__module__}.{type(module_2.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT_co).__module__}.{type(module_2.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_contra).__module__}.{type(module_2.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.CT_co).__module__}.{type(module_2.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.AnyStr).__module__}.{type(module_2.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_2.TYPE_CHECKING is False
    str_0 = "vb9 "
    var_1 = binary_search_tree_0.__getitem__(var_0)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    str_1 = binary_search_tree_1.repr_traverse(str_0, none_type_0, var_0, bool_1)
    assert str_1 == "\nvb9 None"


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.iterate_postorder()
    list_0 = binary_search_tree_0.parent_path(var_0)
    node_0 = module_0.Node(int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 1
    generic_0 = module_2.Generic()
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_2.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_2.T).__module__}.{type(module_2.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.KT).__module__}.{type(module_2.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT).__module__}.{type(module_2.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_co).__module__}.{type(module_2.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.V_co).__module__}.{type(module_2.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT_co).__module__}.{type(module_2.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_contra).__module__}.{type(module_2.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.CT_co).__module__}.{type(module_2.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.AnyStr).__module__}.{type(module_2.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_2.TYPE_CHECKING is False
    node_1 = module_0.Node(var_1)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "bst.Node"
    assert node_1.left is None
    assert node_1.right is None
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.generator"
    )
    str_0 = "vb9 "
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    set_0 = set()
    none_type_1 = None
    binary_search_tree_1.repr_traverse(set_0, str_0, node_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    object_0 = module_1.object(*var_0)
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is False
    binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    none_type_0 = binary_search_tree_1.insert(binary_search_tree_1)
    assert len(binary_search_tree_1) == 1
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_1.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    str_0 = 'Z0dr\tb`^S"U\r'
    list_0 = binary_search_tree_1.parent_path(var_1)
    str_1 = ":tb>'*E9Ncn0"
    bool_0 = True
    str_2 = binary_search_tree_1.repr_traverse(str_0, str_1, none_type_0, bool_0)
    assert str_2 == ""
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(none_type_0, list_0)
    generic_0 = module_2.Generic(*generator_0)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_2.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_2.T).__module__}.{type(module_2.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.KT).__module__}.{type(module_2.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT).__module__}.{type(module_2.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_co).__module__}.{type(module_2.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.V_co).__module__}.{type(module_2.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT_co).__module__}.{type(module_2.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_contra).__module__}.{type(module_2.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.CT_co).__module__}.{type(module_2.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.AnyStr).__module__}.{type(module_2.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_2.TYPE_CHECKING is False
    binary_search_tree_1.__getitem__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.iterate_preorder()
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    str_0 = '\x0c0dr\tb`u*"U\r'
    list_0 = binary_search_tree_0.parent_path(var_1)
    var_2 = binary_search_tree_0.get_next_node(var_1)
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_1.value) == 0
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_0)
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, none_type_0, none_type_0, none_type_0
    )
    assert str_1 == ""
    str_2 = 'Z0dr\tb`^S"U\r'
    none_type_1 = binary_search_tree_0.insert(str_2)
    assert len(binary_search_tree_0) == 1
    assert len(var_1.value) == 1
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == 'Z0dr\tb`^S"U\r'
    var_4 = var_3.__repr__()
    assert var_4 == "'Z0dr\\tb`^S\"U\\r'"
    var_5 = binary_search_tree_0.__getitem__(var_4)
    str_2.get_next_node(var_5)


@pytest.mark.xfail(strict=True)
def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.iterate_preorder()
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_1)
    var_2 = binary_search_tree_0.get_next_node(var_1)
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_1.value) == 0
    generator_1 = binary_search_tree_0.iterate_nodes_by_depth(bool_0)
    str_0 = binary_search_tree_0.repr_traverse(
        var_0, none_type_0, none_type_0, none_type_0
    )
    assert str_0 == ""
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == ""
    none_type_1 = binary_search_tree_0.insert(var_3)
    assert len(binary_search_tree_0) == 1
    assert len(var_1.value) == 1
    var_4 = generator_0.__repr__()
    var_5 = binary_search_tree_0.__getitem__(var_4)
    generator_2 = binary_search_tree_0.iterate_nodes_by_depth(var_4)
    var_3.get_next_node(var_3)


def test_case_26():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.iterate_preorder()
    var_1 = module_0.Node(binary_search_tree_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_1)
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(var_1)


@pytest.mark.xfail(strict=True)
def test_case_27():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    str_0 = '\x0c0dr\tb`u*"U\r'
    list_0 = binary_search_tree_0.parent_path(var_0)
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, none_type_0, none_type_0, none_type_0
    )
    assert str_1 == ""
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    none_type_2 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    var_3 = var_1.__repr__()
    assert var_3 == "0"
    var_2.insert(var_3)
