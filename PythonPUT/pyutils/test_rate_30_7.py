# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import rate as module_1


def test_case_0():
    object_0 = module_0.object()
    none_type_0 = None
    rate_0 = module_1.Rate(object_0, percentage=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_0.multiplier).__module__}.{type(rate_0.multiplier).__qualname__}"
        == "builtins.object"
    )
    var_0 = rate_0.__float__()
    bool_0 = True
    rate_1 = module_1.Rate(percentage=bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)


def test_case_1():
    bool_0 = True
    with pytest.raises(ValueError):
        module_1.Rate(bool_0, percent_change=bool_0)


def test_case_2():
    with pytest.raises(ValueError):
        module_1.Rate()


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 3034
    none_type_0 = None
    rate_0 = module_1.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(31.34, abs=0.01, rel=0.01)
    rate_0.apply_to(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_1.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_0.__mul__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2063
    bool_0 = False
    rate_0 = module_1.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(int_0)
    assert var_0 == pytest.approx(0.0004847309743092584, abs=0.01, rel=0.01)
    str_0 = "Pnz_5J\\bkLy>sW0"
    bool_1 = True
    rate_1 = module_1.Rate(percentage=bool_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    rate_1.__truediv__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -1193.356
    none_type_0 = None
    rate_0 = module_1.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-11.93356, abs=0.01, rel=0.01)
    rate_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    int_0 = 214
    rate_0 = module_1.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(2.14, abs=0.01, rel=0.01)
    rate_0.__sub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 2063
    bool_0 = False
    rate_0 = module_1.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(int_0)
    assert var_0 == pytest.approx(0.0004847309743092584, abs=0.01, rel=0.01)
    var_1 = rate_0.of(rate_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0.__truediv__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    rate_0 = module_1.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    rate_0.__lt__(rate_0)


def test_case_10():
    int_0 = -330
    bool_0 = True
    rate_0 = module_1.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__ne__(int_0)
    assert var_0 is True
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True
    var_2 = rate_0.__float__()
    assert var_2 is True
    var_3 = rate_0.__gt__(bool_0)
    assert var_3 is False
    var_4 = rate_0.__ge__(var_2)
    assert var_4 is True
    var_5 = var_2.__add__(var_3)
    assert var_5 == 1
    bool_1 = True
    rate_1 = module_1.Rate(var_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is True
    var_6 = var_3.__sub__(var_2)
    assert var_6 == -1
    var_7 = var_4.__mul__(bool_1)
    assert var_7 == 1
    var_8 = var_6.__mul__(rate_0)
    rate_2 = rate_0.__le__(var_2)
    assert rate_2 is True
    with pytest.raises(ValueError):
        module_1.Rate()


@pytest.mark.xfail(strict=True)
def test_case_11():
    object_0 = module_0.object()
    none_type_0 = None
    rate_0 = module_1.Rate(object_0, percentage=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_0.multiplier).__module__}.{type(rate_0.multiplier).__qualname__}"
        == "builtins.object"
    )
    var_0 = rate_0.__float__()
    rate_0.__ne__(none_type_0)


def test_case_12():
    int_0 = 9
    rate_0 = module_1.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.09, abs=0.01, rel=0.01)


def test_case_13():
    str_0 = "eN1!n-o\\Zg<\x0cU0X+\\EFP"
    bool_0 = True
    rate_0 = module_1.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__float__()
    assert var_0 is True
    var_1 = rate_0.__gt__(bool_0)
    assert var_1 is False
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = rate_0.__truediv__(var_2)
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = rate_0.__le__(var_1)
    assert var_4 is False
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.Rate(str_0, percentage=var_4, percent_change=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\x15\x8e\xa4p\xb6w\x88\xcbv\xdb"
    rate_0 = module_1.Rate(bytes_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == b"\x15\x8e\xa4p\xb6w\x88\xcbv\xdb"
    rate_0.__repr__()


def test_case_15():
    int_0 = -330
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    rate_0 = module_1.Rate(bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__repr__()
    assert var_0 == "+0.000%"
    var_1 = rate_0.__float__()
    assert var_1 is False
    var_2 = var_0.__gt__(none_type_0)
    var_3 = rate_0.__float__()
    assert var_3 is False
    var_4 = var_1.__add__(var_3)
    assert var_4 == 0
    rate_1 = module_1.Rate(percent_change=var_3)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_5 = rate_1.__sub__(int_0)
    assert var_5 == pytest.approx(331.0, abs=0.01, rel=0.01)
    var_6 = bool_0.__hash__()
    assert var_6 == 0
    var_7 = var_1.__sub__(var_0)
    var_8 = rate_0.__mul__(var_5)
    assert var_8 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_9 = rate_1.__ge__(var_3)
    assert var_9 is True
    var_10 = var_5.__lt__(var_8)
    assert var_10 is False
    var_11 = var_10.__hash__()
    assert var_11 == 0
    var_12 = var_11.__ne__(bool_1)
    assert var_12 is False
    var_13 = rate_1.__lt__(var_1)
    assert var_13 is False


def test_case_16():
    none_type_0 = None
    str_0 = "eN1!n-o\\Zg<\x0cU0X+\\EFP"
    bool_0 = True
    rate_0 = module_1.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__float__()
    assert var_0 is True
    var_1 = rate_0.__gt__(bool_0)
    assert var_1 is False
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = rate_0.__truediv__(var_2)
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = rate_0.__le__(var_1)
    assert var_4 is False
    rate_1 = module_1.Rate(percentage=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_5 = var_3.__hash__()
    assert var_5 == 1
    bool_1 = False
    dict_0 = {var_1: bool_1, str_0: none_type_0}
    var_6 = var_0.__sub__(dict_0)
    var_7 = rate_0.__mul__(bool_0)
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_8 = var_2.__ge__(var_7)
    var_9 = rate_1.__repr__(relative=var_3)
    assert var_9 == "-99.000%"
    with pytest.raises(ValueError):
        module_1.Rate()


def test_case_17():
    int_0 = -1794
    bool_0 = False
    rate_0 = module_1.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__ne__(int_0)
    assert var_0 is True
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True
    var_2 = rate_0.__float__()
    assert var_2 is False
    var_3 = rate_0.__gt__(bool_0)
    assert var_3 is False
    var_4 = var_1.__ge__(bool_0)
    assert var_4 is True
    var_5 = rate_0.__ge__(var_2)
    assert var_5 is True
    var_6 = var_2.__add__(var_3)
    assert var_6 == 0
    bool_1 = True
    rate_1 = module_1.Rate(var_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is True
    var_7 = var_3.__sub__(var_2)
    assert var_7 == 0
    var_8 = var_5.__mul__(bool_1)
    assert var_8 == 1
    var_9 = var_7.__mul__(rate_0)
    var_10 = rate_0.__le__(var_2)
    assert var_10 is True
    with pytest.raises(ValueError):
        module_1.Rate()
