# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2345
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(23.45, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(23.45, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_0.of(var_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2336
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(24.36, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(24.36, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(int_0)
    assert var_1 is False
    var_2 = rate_0.__le__(rate_0)
    assert var_2 is True
    var_0.__repr__(relative=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 2308
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2308
    var_0 = rate_0.__float__()
    assert var_0 == 2308
    var_1 = rate_0.__lt__(var_0)
    assert var_1 is False
    rate_0.__add__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2308
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2308
    var_0 = rate_0.__float__()
    assert var_0 == 2308
    var_1 = rate_0.__lt__(var_0)
    assert var_1 is False
    rate_0.apply_to(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2336
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2336
    var_0 = rate_0.__float__()
    assert var_0 == 2336
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True
    var_2 = rate_0.__eq__(int_0)
    assert var_2 is True
    var_3 = rate_0.of(var_2)
    assert var_3 == pytest.approx(2336.0, abs=0.01, rel=0.01)
    var_4 = rate_0.__mul__(var_1)
    assert var_4 == pytest.approx(2336.0, abs=0.01, rel=0.01)
    var_4.of(var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 2336
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2336
    var_0 = rate_0.__float__()
    assert var_0 == 2336
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True
    var_2 = rate_0.__eq__(int_0)
    assert var_2 is True
    var_3 = var_0.__truediv__(var_1)
    assert var_3 == pytest.approx(2336.0, abs=0.01, rel=0.01)
    var_4 = rate_0.__mul__(var_1)
    assert var_4 == pytest.approx(2336.0, abs=0.01, rel=0.01)
    var_4.of(var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    str_0 = "J/&6Es-4r^PehSb\nyp>{"
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    rate_0.__truediv__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 2336
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2336
    var_0 = rate_0.__hash__()
    assert var_0 == 2336
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = rate_0.__le__(int_0)
    assert var_2 is True
    rate_0.__repr__(relative=rate_0, places=rate_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(bool_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__hash__()
    assert var_2 == 1
    var_3 = var_2.__ne__(list_0)
    var_3.__repr__(relative=list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 2308
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2308
    var_0 = rate_0.__sub__(int_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True
    var_2 = rate_0.__eq__(int_0)
    assert var_2 is True
    var_3 = rate_0.__eq__(int_0)
    assert var_3 is True
    var_4 = rate_0.__lt__(int_0)
    assert var_4 is False
    var_5 = rate_0.__repr__()
    assert var_5 == "+230800.000%"
    var_6 = var_1.__lt__(rate_0)
    var_5.__sub__(var_4)


def test_case_11():
    int_0 = 2336
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2336
    var_0 = rate_0.__float__()
    assert var_0 == 2336
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True
    var_2 = rate_0.apply_to(var_0)
    assert var_2 == pytest.approx(5456896.0, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(23.36, abs=0.01, rel=0.01)
    var_3 = rate_1.__le__(var_0)
    assert var_3 is True
    with pytest.raises(ValueError):
        module_0.Rate(var_1, percent_change=var_3)


def test_case_12():
    str_0 = "R9"
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percentage=str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 2336
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2336
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = var_0.__mul__(rate_0)
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_3 = rate_0.__le__(int_0)
    assert var_3 is True
    rate_0.__repr__(relative=rate_0, places=rate_0)
