# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import money as module_1
import decimal as module_2
import builtins as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.purge()
    assert module_0.ASCII == module_0.RegexFlag.ASCII
    assert module_0.A == module_0.RegexFlag.ASCII
    assert module_0.IGNORECASE == module_0.RegexFlag.IGNORECASE
    assert module_0.I == module_0.RegexFlag.IGNORECASE
    assert module_0.LOCALE == module_0.RegexFlag.LOCALE
    assert module_0.L == module_0.RegexFlag.LOCALE
    assert module_0.UNICODE == module_0.RegexFlag.UNICODE
    assert module_0.U == module_0.RegexFlag.UNICODE
    assert module_0.MULTILINE == module_0.RegexFlag.MULTILINE
    assert module_0.M == module_0.RegexFlag.MULTILINE
    assert module_0.DOTALL == module_0.RegexFlag.DOTALL
    assert module_0.S == module_0.RegexFlag.DOTALL
    assert module_0.VERBOSE == module_0.RegexFlag.VERBOSE
    assert module_0.X == module_0.RegexFlag.VERBOSE
    assert module_0.TEMPLATE == module_0.RegexFlag.TEMPLATE
    assert module_0.T == module_0.RegexFlag.TEMPLATE
    assert module_0.DEBUG == module_0.RegexFlag.DEBUG
    var_0.truncate_fractional_cents()


def test_case_1():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__ge__(money_1)
    assert var_2 is True
    var_3 = var_1.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = money_0.__rsub__(var_3)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_1.__add__(var_2)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = money_1.__gt__(var_2)
    assert var_6 is False
    var_7 = var_1.__dir__()
    var_8 = money_0.__sub__(var_1)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = money_1.__le__(var_6)
    assert var_9 is True
    money_1.__truediv__(var_0)


def test_case_3():
    str_0 = "USD"
    with pytest.raises(ValueError):
        module_1.Money(str_0)


def test_case_4():
    bool_0 = True
    none_type_0 = None
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    bool_1 = True
    money_1 = module_1.Money(bool_0, strict_mode=none_type_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is None
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_1.__rsub__(bool_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_5():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__ne__(money_1)
    assert var_1 is False
    var_2 = money_1.__add__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    module_0.compile(var_2)


def test_case_6():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__ge__(money_0)
    assert var_1 is True
    var_2 = var_1.__repr__()
    assert var_2 == "True"
    var_3 = money_0.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )


def test_case_7():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    bool_0 = False
    var_2 = money_0.__gt__(bool_0)
    assert var_2 is False
    int_0 = money_0.__hash__()


def test_case_8():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    money_1 = module_1.Money(money_0, none_type_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    with pytest.raises(TypeError):
        money_0.__add__(none_type_0)


def test_case_9():
    str_0 = "T%"
    with pytest.raises(ValueError):
        module_1.Money(str_0)


def test_case_10():
    none_type_0 = None
    money_0 = module_1.Money(strict_mode=none_type_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is None
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = money_0.__eq__(none_type_0)
    assert var_1 is False
    with pytest.raises(TypeError):
        money_0.__gt__(none_type_0)


def test_case_11():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__rsub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__gt__(money_0)
    assert var_1 is False
    var_2 = money_0.round_fractional_cents()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    int_0 = money_0.__hash__()
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_3 = var_0.__ne__(var_1)
    assert var_3 is False


def test_case_12():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__rsub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__gt__(money_0)
    assert var_1 is False
    var_2 = var_0.__le__(var_1)
    assert var_2 is True
    var_3 = money_0.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    int_0 = var_2.__hash__()
    assert int_0 == 1
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_4 = var_0.__lt__(var_0)
    assert var_4 is False


def test_case_13():
    bool_0 = True
    none_type_0 = None
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_1 = module_1.Money(bool_0, strict_mode=none_type_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is None
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_1.__repr__()
    assert var_0 == "1.00 USD"


def test_case_14():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__lt__(money_0)
    assert var_0 is False
    var_1 = money_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__gt__(var_0)
    assert var_2 is False
    var_3 = var_1.__sub__(money_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"


def test_case_15():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__gt__(money_0)
    assert var_1 is False
    var_2 = var_0.__le__(var_1)
    assert var_2 is True
    var_3 = var_0.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    int_0 = var_1.__hash__()
    assert int_0 == 0
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_4 = var_3.__lt__(var_1)
    assert var_4 is False


@pytest.mark.xfail(strict=True)
def test_case_16():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_0.__mul__(var_0)


def test_case_17():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )


def test_case_18():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__ne__(money_1)
    assert var_1 is False
    var_2 = money_1.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    bool_0 = True
    var_3 = var_2.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = money_0.__gt__(bool_0)
    assert var_4 is False
    var_5 = money_0.round_fractional_cents()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_6 = money_0.__sub__(var_5)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_7 = var_3.__le__(var_5)
    assert var_7 is True
    with pytest.raises(TypeError):
        money_0.__truediv__(var_3)


def test_case_19():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__ge__(money_1)
    assert var_2 is True
    var_3 = money_0.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    bool_0 = True
    var_4 = money_1.__rsub__(bool_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_1.__add__(var_2)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = money_1.__gt__(var_2)
    assert var_6 is False
    var_7 = var_0.__repr__()
    assert var_7 == "'0.00 USD'"
    var_8 = money_0.__sub__(var_1)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = money_1.__le__(var_6)
    assert var_9 is True
    with pytest.raises(TypeError):
        var_1.__mul__(var_3)


def test_case_20():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__ne__(money_1)
    assert var_1 is False
    var_2 = money_1.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_0.__ge__(money_1)
    assert var_3 is True
    bool_0 = True
    var_4 = var_2.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = money_0.__gt__(bool_0)
    assert var_5 is False
    var_6 = money_0.__sub__(var_4)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_4.__le__(var_3)
    assert var_7 is True
    with pytest.raises(TypeError):
        money_0.__truediv__(var_4)


def test_case_21():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_0.__repr__()
    assert var_2 == "'0.00 USD'"
    var_3 = money_0.__gt__(money_0)
    assert var_3 is False
    var_4 = var_1.round_fractional_cents()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_5 = money_0.__sub__(var_4)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"


@pytest.mark.xfail(strict=True)
def test_case_22():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    module_0.compile(money_1)


def test_case_23():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    money_1 = module_1.Money(money_0, strict_mode=none_type_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is None
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_0.__le__(money_1)
    assert var_0 is True
    var_1 = money_0.__sub__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__repr__()
    assert var_2 == "-1.00 USD"
    int_0 = 3922
    var_3 = money_0.__rsub__(int_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    bool_0 = False
    var_4 = money_1.__ge__(var_1)
    assert var_4 is True
    var_5 = var_4.__lt__(var_1)
    var_6 = money_0.__sub__(int_0)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_2.__lt__(bool_0)
    var_8 = var_3.__dir__()
    var_9 = var_6.__lt__(var_0)
    assert var_9 is True


def test_case_24():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = var_0.__lt__(money_0)
    money_1 = module_1.Money(money_0, var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_1.currency).__module__}.{type(money_1.currency).__qualname__}"
        == "builtins.NotImplementedType"
    )
    var_2 = var_1.__dir__()
    var_3 = money_0.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    with pytest.raises(TypeError):
        money_0.__sub__(money_1)


def test_case_25():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = module_0.RegexFlag.MULTILINE
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    assert module_0.ASCII == module_0.RegexFlag.ASCII
    assert module_0.A == module_0.RegexFlag.ASCII
    assert module_0.IGNORECASE == module_0.RegexFlag.IGNORECASE
    assert module_0.I == module_0.RegexFlag.IGNORECASE
    assert module_0.LOCALE == module_0.RegexFlag.LOCALE
    assert module_0.L == module_0.RegexFlag.LOCALE
    assert module_0.UNICODE == module_0.RegexFlag.UNICODE
    assert module_0.U == module_0.RegexFlag.UNICODE
    assert module_0.MULTILINE == module_0.RegexFlag.MULTILINE
    assert module_0.M == module_0.RegexFlag.MULTILINE
    assert module_0.DOTALL == module_0.RegexFlag.DOTALL
    assert module_0.S == module_0.RegexFlag.DOTALL
    assert module_0.VERBOSE == module_0.RegexFlag.VERBOSE
    assert module_0.X == module_0.RegexFlag.VERBOSE
    assert module_0.TEMPLATE == module_0.RegexFlag.TEMPLATE
    assert module_0.T == module_0.RegexFlag.TEMPLATE
    assert module_0.DEBUG == module_0.RegexFlag.DEBUG
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__ge__(money_1)
    assert var_2 is False
    bool_0 = True
    var_3 = money_1.__gt__(var_2)
    assert var_3 is True
    var_4 = var_1.__dir__()
    var_5 = money_0.__sub__(var_1)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_4.__le__(bool_0)


def test_case_26():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    bool_0 = False
    var_2 = var_0.__ge__(var_1)
    money_1 = module_1.Money(currency=bool_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_3 = money_1.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency is None
    with pytest.raises(TypeError):
        var_3.__lt__(var_1)


def test_case_27():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(currency=var_0, strict_mode=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode == "0.00 USD"
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "0.00 USD"
    with pytest.raises(TypeError):
        money_1.__add__(var_0)


def test_case_28():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(currency=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "0.00 USD"
    with pytest.raises(TypeError):
        money_0.__add__(money_1)


def test_case_29():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(strict_mode=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode == "0.00 USD"
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__le__(money_0)
    assert var_1 is True
    with pytest.raises(TypeError):
        money_1.__sub__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_30():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__eq__(money_0)
    assert var_0 is True
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_1.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_1.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    bool_0 = True
    var_4 = var_3.__rsub__(var_1)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_4.__getitem__(var_4, bool_0)


def test_case_31():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(strict_mode=money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__ge__(money_0)
    assert var_2 is True
    var_3 = money_1.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_2.__neg__()
    assert var_4 == -1
    var_5 = money_1.__rsub__(var_1)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    with pytest.raises(TypeError):
        money_1.__rsub__(var_2)


def test_case_32():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    float_0 = -754.20241
    money_1 = module_1.Money(float_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "0.00 USD"
    with pytest.raises(TypeError):
        money_1.__rsub__(money_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(strict_mode=money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    money_1.__ne__(var_0)


def test_case_34():
    int_0 = 3
    money_0 = module_1.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__gt__(int_0)


def test_case_35():
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_1.Money(var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_1.Money(strict_mode=money_0)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert (
        f"{type(money_2.strict_mode).__module__}.{type(money_2.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_1 = money_0.__add__(money_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    with pytest.raises(TypeError):
        money_2.__lt__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    exception_0 = module_3.Exception()
    money_0 = module_1.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_1.logger).__module__}.{type(module_1.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_1.logger.filters == []
    assert module_1.logger.name == "money"
    assert module_1.logger.level == 0
    assert (
        f"{type(module_1.logger.parent).__module__}.{type(module_1.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_1.logger.propagate is True
    assert module_1.logger.handlers == []
    assert module_1.logger.disabled is False
    assert (
        f"{type(module_1.logger.manager).__module__}.{type(module_1.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_1.Money.AMOUNT_RE).__module__}.{type(module_1.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.CURRENCY_RE).__module__}.{type(module_1.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_1.Money.parse).__module__}.{type(module_1.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    float_0 = -3768.96003
    money_1 = module_1.Money(float_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.round_fractional_cents()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_2 = money_1.__repr__()
    assert var_2 == "-3768.96 USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_3 = money_1.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    int_0 = var_2.__hash__()
    assert int_0 == 2589553811627178580
    int_1 = var_2.__hash__()
    assert int_1 == 2589553811627178580
    var_4 = var_1.__rsub__(money_1)
    money_1.__ne__(exception_0)
