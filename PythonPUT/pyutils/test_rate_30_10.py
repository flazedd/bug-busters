# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_0.__lt__(none_type_0)


def test_case_3():
    int_0 = 92
    none_type_0 = None
    rate_0 = module_0.Rate(int_0, percentage=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 92
    var_0 = rate_0.__hash__()
    assert var_0 == 92
    var_1 = var_0.__repr__()
    assert var_1 == "92"


@pytest.mark.xfail(strict=True)
def test_case_4():
    tuple_0 = ()
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+101.000%"
    var_0.__add__(tuple_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.apply_to(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__add__(bool_0)
    assert var_1 == pytest.approx(2.0, abs=0.01, rel=0.01)
    var_2 = var_0.__ge__(none_type_0)
    var_3 = var_2.__eq__(var_0)
    var_4 = var_0.__sub__(none_type_0)
    var_5 = var_4.__ne__(bool_0)
    var_6 = var_5.__ge__(bool_0)
    var_7 = var_1.__lt__(var_5)
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_6():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(rate_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 92
    none_type_0 = None
    rate_0 = module_0.Rate(int_0, percentage=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 92
    var_0 = rate_0.of(int_0)
    assert var_0 == pytest.approx(8464.0, abs=0.01, rel=0.01)
    var_1 = var_0.__lt__(rate_0)
    var_2 = var_1.__hash__()
    assert var_2 == -9223363241378224002
    var_3 = rate_0.__truediv__(var_0)
    assert var_3 == pytest.approx(0.010869565217391304, abs=0.01, rel=0.01)
    var_3.__repr__(relative=var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    rate_0.__sub__(none_type_0)


def test_case_9():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    var_1 = rate_0.__ne__(var_0)
    assert var_1 is True


def test_case_10():
    str_0 = "k P]hZ(1M*Oo"
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percent_change=none_type_0)


def test_case_11():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    var_1 = rate_0.__ge__(bool_0)
    assert var_1 is True
    var_2 = rate_0.__ne__(var_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    float_0 = 144.552
    none_type_0 = None
    none_type_1 = None
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(144.552, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(relative=float_0)
    assert var_0 == "+14355.200%"
    var_1 = rate_0.__truediv__(float_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__truediv__(float_0)
    assert var_2 == pytest.approx(0.006917925729149372, abs=0.01, rel=0.01)
    var_3 = var_2.__sub__(float_0)
    assert var_3 == pytest.approx(-144.54508207427085, abs=0.01, rel=0.01)
    var_4 = var_3.__ge__(none_type_1)
    var_5 = var_2.__mul__(var_1)
    assert var_5 == pytest.approx(0.006917925729149372, abs=0.01, rel=0.01)
    var_6 = var_4.__ne__(none_type_0)
    var_7 = var_6.__eq__(float_0)
    var_7.apply_to(float_0)


def test_case_13():
    bytes_0 = b""
    float_0 = 107.72
    int_0 = 158
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.58, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(1.58, abs=0.01, rel=0.01)
    var_1 = rate_0.__lt__(var_0)
    assert var_1 is False
    var_2 = var_0.__gt__(float_0)
    assert var_2 is False
    var_3 = rate_0.__le__(float_0)
    assert var_3 is True
    var_4 = var_3.__le__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -1143
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(bool_0)
    assert var_0 is False
    var_1 = var_0.__add__(var_0)
    assert var_1 == 0
    var_2 = rate_0.__ge__(var_0)
    assert var_2 is True
    var_1.of(int_0)
