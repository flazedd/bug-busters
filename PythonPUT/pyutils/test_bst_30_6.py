# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "None"


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_1 = binary_search_tree_0.iterate_inorder()
    var_1.iterate_leaves()


def test_case_3():
    list_0 = []
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_1 = binary_search_tree_0.parent_path(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_1.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bytes_0 = b"V\x85\xe9\x06^og\x9cK+\xe0)\xf8\xd7\x898"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    bool_0 = binary_search_tree_0.__contains__(bytes_0)
    assert bool_0 is False
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    none_type_0 = binary_search_tree_0.insert(bool_1)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "False"
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is False
    str_0 = "H"
    str_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = []
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is False
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "None"
    binary_search_tree_0.repr_traverse(none_type_1, binary_search_tree_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = binary_search_tree_0.get_root()
    list_0 = binary_search_tree_0.parent_path(var_1)
    var_2 = var_0.__repr__()
    assert var_2 == "''"
    var_2.insert(list_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    assert var_1 == "0"
    var_1.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = var_0.__repr__()
    var_2 = var_1.__repr__()
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    none_type_0 = None
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_3 = binary_search_tree_2.iterate_postorder()
    bool_1 = binary_search_tree_0.__contains__(none_type_0)
    assert bool_1 is False
    var_3.insert(var_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is None
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    binary_search_tree_0.parent_path(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    list_0 = []
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__getitem__(none_type_0)
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "None"
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value is None
    binary_search_tree_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = []
    bool_0 = binary_search_tree_0.iterate_inorder()
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "[]"
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == []
    list_1 = binary_search_tree_0.parent_path(var_1)
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "[]"
    binary_search_tree_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.__getitem__(none_type_0)
    list_0 = []
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is False
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "[]"
    var_2 = module_0.Node(none_type_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value is None
    binary_search_tree_0.parent_path(var_2)


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}B<kcG}^8-sS\x0c`W'd{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    list_0 = []
    binary_search_tree_0.__delitem__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}B<kcG}^-s\x0c`W'd{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}B<kcG}^ -sS\x0c`W'5{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = module_0.BinarySearchTree()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.BinarySearchTree"
    )
    assert len(var_0) == 0
    var_1 = var_0.get_root()
    var_2 = binary_search_tree_0.iterate_leaves()
    binary_search_tree_0.parent_path(var_2)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}B<kcG}^ -sS\x0c`W'5{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "o}B<kcG}^ -sS\x0c`W'5{\n└──o}B<kcG}^ -sS\x0c`W'5{"
    var_0.get_root()


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}B<kcG}^8-sS\x0c`W'd{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "o}B<kcG}^8-sS\x0c`W'd{"
    var_1 = binary_search_tree_0.iterate_preorder()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(var_0)
    var_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    list_0 = binary_search_tree_0.__repr__()
    assert list_0 == "o}j<kcG}^8-sS\x0c`r'{\n└──o}j<kcG}^8-sS\x0c`r'{"
    bool_0 = binary_search_tree_0.__delitem__(list_0)
    assert bool_0 is False
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(list_0)
    binary_search_tree_0.__getitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = int_0.__repr__()
    assert var_0 == "2"
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(int_0)
    var_1 = binary_search_tree_0.__getitem__(var_0)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    var_0.height()


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}j<kcG^c-8\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "o}j<kcG^c-8\x0c`r'{\n└──o}j<kcG^c-8\x0c`r'{"
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, var_0)
    var_1 = binary_search_tree_0.__getitem__(var_0)
    tuple_0 = (int_0,)
    set_0 = {var_0, tuple_0, none_type_0}
    binary_search_tree_0.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = binary_search_tree_0.iterate_inorder()
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    bool_0 = binary_search_tree_0.__delitem__(str_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    tuple_0 = (int_0,)
    set_0 = {var_0, tuple_0, none_type_0}
    binary_search_tree_0.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    var_0 = int_0.__repr__()
    assert var_0 == "2"
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    var_0.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.iterate_leaves()
    var_1 = binary_search_tree_1.iterate_inorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_1.insert(str_0)
    assert len(binary_search_tree_1) == 1
    var_2 = binary_search_tree_1.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_3 = binary_search_tree_1.get_next_node(var_2)
    bool_0 = binary_search_tree_1.__contains__(str_0)
    assert bool_0 is True
    var_4 = binary_search_tree_1.__repr__()
    assert var_4 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 1
    var_5 = binary_search_tree_1.__len__()
    assert var_5 == 1
    int_1 = binary_search_tree_1.height()
    assert int_1 == 1
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    bool_1 = binary_search_tree_2.__delitem__(var_4)
    assert bool_1 is False
    bool_2 = binary_search_tree_1.__delitem__(str_0)
    assert bool_2 is True
    assert len(binary_search_tree_1) == 0
    var_6 = binary_search_tree_1.__getitem__(bool_2)
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "1.qxFAih*VPb|U"
    str_1 = "V$wH6}mtSFqqm}gcT-N"
    node_0 = module_0.Node(str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "1.qxFAih*VPb|U"
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, node_0, node_0)
    assert str_2 == "\n1.qxFAih*VPb|UV$wH6}mtSFqqm}gcT-N1.qxFAih*VPb|U"
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    str_3 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_1.insert(str_3)
    assert len(binary_search_tree_1) == 1
    none_type_1 = binary_search_tree_1.insert(str_3)
    assert len(binary_search_tree_1) == 2
    var_0 = binary_search_tree_1.__repr__()
    assert var_0 == "o}j<kcG}^8-sS\x0c`r'{\n└──o}j<kcG}^8-sS\x0c`r'{"
    module_1.Generic(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "builtins.generator"
    )
    var_2 = binary_search_tree_0.__repr__()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    var_4 = binary_search_tree_0.__getitem__(bool_0)
    protocol_0 = module_1.Protocol(*var_0)
    assert (
        f"{type(protocol_0).__module__}.{type(protocol_0).__qualname__}"
        == "typing.Protocol"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    protocol_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_28():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = binary_search_tree_0.iterate_inorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_3 = binary_search_tree_0.get_next_node(var_2)
    var_4 = binary_search_tree_0.__repr__()
    assert var_4 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    module_1.Generic(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_29():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_inorder()
    var_1 = binary_search_tree_0.iterate_inorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_3 = binary_search_tree_0.get_next_node(var_2)
    var_4 = binary_search_tree_0.__repr__()
    assert var_4 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_5 = binary_search_tree_0.__len__()
    assert var_5 == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(str_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    var_6 = binary_search_tree_0.__getitem__(bool_0)
    protocol_0 = module_1.Protocol(*var_0)
    assert (
        f"{type(protocol_0).__module__}.{type(protocol_0).__qualname__}"
        == "typing.Protocol"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    protocol_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_30():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_2 = binary_search_tree_0.get_next_node(var_1)
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 1
    var_5 = binary_search_tree_0.__getitem__(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "bst.Node"
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.value == "o}j<kcG}^8-sS\x0c`r'{"
    module_1.Protocol(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_2 = binary_search_tree_0.get_next_node(var_1)
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(str_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    var_5 = binary_search_tree_0.__getitem__(bool_0)
    protocol_0 = module_1.Protocol(*var_0)
    assert (
        f"{type(protocol_0).__module__}.{type(protocol_0).__qualname__}"
        == "typing.Protocol"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    protocol_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_32():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == "o}j<kcG}^8-sS\x0c`r'{"
    var_2 = binary_search_tree_0.get_next_node(var_1)
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "o}j<kcG}^8-sS\x0c`r'{"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_5 = binary_search_tree_0.__getitem__(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "bst.Node"
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.value == "o}j<kcG}^8-sS\x0c`r'{"
    module_1.Protocol(*var_0)


def test_case_33():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = binary_search_tree_0.iterate_inorder()
    str_0 = "o}j<kcG}^8-sS\x0c`r'{"
    none_type_0 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    var_2 = module_0.Node(str_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == "o}j<kcG}^8-sS\x0c`r'{"
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(var_2)
