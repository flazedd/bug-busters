# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '"'
    module_0.Rate(percentage=str_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb7]\x12nmb\x85C0\xb4"
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    bytes_0.__sub__(none_type_0)


def test_case_3():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)
    str_0 = "B"
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percentage=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    int_0 = -678
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-6.78, abs=0.01, rel=0.01)
    rate_0.apply_to(none_type_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.of(var_1)
    assert var_2 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_3 = var_2.__sub__(none_type_0)
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xb7]\x12nmb\x85C0\xb4"
    bool_0 = True
    set_0 = {bytes_0}
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(set_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == {b"\xb7]\x12nmb\x85C0\xb4"}
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    rate_1.__sub__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xf5\x8f\xccz\xfa\xd5\x9cTI,$S\xb9\xb4\x9dE"
    none_type_0 = None
    rate_0 = module_0.Rate(bytes_0, percent_change=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == b"\xf5\x8f\xccz\xfa\xd5\x9cTI,$S\xb9\xb4\x9dE"
    rate_0.__ne__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = 'C9eRuBDeuV"G@Fe'
    int_0 = -2423
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2423
    rate_0.__ge__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0.of(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b"\xb7]\x12nmb\x85C0\xb4"
    bool_0 = True
    set_0 = {bytes_0}
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(set_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == {b"\xb7]\x12nmb\x85C0\xb4"}
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(none_type_0)
    rate_0.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(none_type_0)
    rate_0.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b"P\x1f\x00\x8c`\xact\x1e\x81\xe76V\x1b"
    int_0 = -2423
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2423
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    rate_0.__add__(bytes_0)


def test_case_13():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+101.000%"
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\xb7]\x12nmb\x85C0\xb4"
    bool_0 = False
    float_0 = -2195.52
    rate_0 = module_0.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-21.9552, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    var_0.apply_to(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    rate_1 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_1.__gt__(rate_1)
    assert var_0 is False
    var_1 = rate_1.__le__(var_0)
    assert var_1 is False
    var_2 = rate_1.__hash__()
    assert var_2 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_3 = rate_1.__ge__(var_2)
    assert var_3 is True
    set_0 = set()
    module_0.Rate(percent_change=set_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    rate_1 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_1.__gt__(rate_1)
    assert var_0 is False
    var_1 = rate_1.__le__(var_0)
    assert var_1 is False
    var_2 = rate_1.__le__(var_1)
    assert var_2 is False
    var_3 = rate_1.__ge__(var_2)
    assert var_3 is True
    set_0 = set()
    module_0.Rate(percent_change=set_0)


def test_case_17():
    bytes_0 = b"\xb7]\x12nmb\x85C0\xb4"
    bool_0 = True
    set_0 = {bytes_0}
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(set_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == {b"\xb7]\x12nmb\x85C0\xb4"}
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(none_type_0)
    var_3 = rate_0.__repr__(relative=bool_0)
    assert var_3 == "+1.000%"
