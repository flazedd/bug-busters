# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == [None]
    list_1 = binary_search_tree_0.parent_path(var_1)
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.Node"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.iterate_inorder()
    bool_0 = binary_search_tree_0.__contains__(var_1)
    assert bool_0 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1.iterate_leaves()


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_1 = binary_search_tree_0.iterate_postorder()
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_2 = binary_search_tree_2.iterate_preorder()
    protocol_0 = module_1.Protocol(*var_1)
    assert (
        f"{type(protocol_0).__module__}.{type(protocol_0).__qualname__}"
        == "typing.Protocol"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    int_0 = binary_search_tree_2.height()
    assert int_0 == 0


def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "False"
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    assert var_1.value is False
    list_0 = binary_search_tree_0.parent_path(var_1)
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.Node"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__repr__()
    assert var_1 == "''"
    var_1.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "IbC]iq3w"
    var_0 = binary_search_tree_0.iterate_postorder()
    none_type_0 = None
    var_1 = binary_search_tree_0.get_root()
    binary_search_tree_0.repr_traverse(str_0, str_0, binary_search_tree_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    var_1 = binary_search_tree_0.iterate_postorder()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = binary_search_tree_1.iterate_preorder()
    var_3 = binary_search_tree_1.iterate_postorder()
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    int_1 = binary_search_tree_1.height()
    assert int_1 == 0
    var_1.height()


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    float_0 = -168.89
    none_type_0 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 2
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "-168.89\n└──-168.89"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 2
    binary_search_tree_0.parent_path(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    generator_0 = binary_search_tree_0.iterate_leaves()
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    float_0 = -168.89
    none_type_0 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    float_0 = -168.89
    none_type_0 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "-168.89"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    binary_search_tree_0.parent_path(none_type_0)


def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == ""
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    float_0 = -168.89
    none_type_0 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 2
    none_type_2 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 3
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "-168.89\n└──-168.89\n   └──-168.89"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 3
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    assert var_1.value == pytest.approx(-168.89, abs=0.01, rel=0.01)
    var_0.parent_path(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    dict_0 = {binary_search_tree_0: binary_search_tree_0}
    none_type_0 = binary_search_tree_0.insert(dict_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "{{...}: {...}}"
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "{{...}: {...}}"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == [None]
    var_2 = binary_search_tree_0.get_next_node(var_1)
    var_3 = binary_search_tree_0.iterate_inorder()
    binary_search_tree_0.insert(var_3)


def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is False
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == ""
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    list_0 = binary_search_tree_1.parent_path(binary_search_tree_1)
    float_0 = -168.89
    none_type_0 = binary_search_tree_1.insert(float_0)
    assert len(binary_search_tree_1) == 1
    none_type_1 = binary_search_tree_1.insert(float_0)
    assert len(binary_search_tree_1) == 2
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 2
    bool_2 = binary_search_tree_1.__contains__(bool_1)
    assert bool_2 is False
    binary_search_tree_1.parent_path(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_1.__repr__()
    assert var_1 == ""
    var_2 = binary_search_tree_0.__getitem__(bool_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == 1
    var_3 = binary_search_tree_1.__getitem__(var_0)
    var_4 = binary_search_tree_0.__getitem__(int_0)
    var_0.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    dict_0 = {binary_search_tree_1: binary_search_tree_1}
    var_0 = binary_search_tree_0.__getitem__(dict_0)
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, binary_search_tree_0, dict_0]
    none_type_1 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.__delitem__(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    list_0 = binary_search_tree_1.parent_path(var_0)
    dict_0 = {var_0: int_0}
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(dict_0)
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    none_type_3 = binary_search_tree_1.insert(var_0)
    assert len(binary_search_tree_1) == 1
    bool_1 = binary_search_tree_1.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_1) == 0
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    none_type_4 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 3
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 3
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "1\n├──0\n└──1"
    int_2 = binary_search_tree_0.depth()
    assert int_2 == 2
    var_0.get_next_node(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is False
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    list_0 = binary_search_tree_1.parent_path(var_0)
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 2
    none_type_2 = binary_search_tree_1.insert(var_0)
    assert len(binary_search_tree_1) == 1
    bool_1 = binary_search_tree_0.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 1
    none_type_3 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.iterate_postorder()
    var_2.iterate_preorder()


def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    list_0 = binary_search_tree_1.parent_path(var_0)
    dict_0 = {var_0: int_0}
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(dict_0)
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    none_type_3 = binary_search_tree_1.insert(var_0)
    assert len(binary_search_tree_1) == 1
    bool_1 = binary_search_tree_1.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_1) == 0
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    none_type_4 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 3
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 3
    int_2 = binary_search_tree_0.depth()
    assert int_2 == 2


def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    list_0 = binary_search_tree_1.parent_path(var_0)
    dict_0 = {var_0: int_0}
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(dict_0)
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 2
    none_type_3 = binary_search_tree_1.insert(var_0)
    assert len(binary_search_tree_1) == 1
    bool_1 = binary_search_tree_1.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_1) == 0
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 0
    int_2 = binary_search_tree_0.height()
    assert int_2 == 2
    none_type_4 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 3
    none_type_5 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 4
    var_2 = binary_search_tree_1.__len__()
    assert var_2 == 0
    int_3 = binary_search_tree_1.depth()
    assert int_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_2.height()
    assert int_0 == 0
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_2.iterate_leaves()
    dict_0 = {var_0: int_0}
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    generator_0 = binary_search_tree_2.iterate_nodes_by_depth(dict_0)
    var_2 = binary_search_tree_0.__getitem__(bool_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert (
        f"{type(var_2.right).__module__}.{type(var_2.right).__qualname__}" == "bst.Node"
    )
    assert var_2.value == 1
    node_0 = module_0.Node(int_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    var_3 = binary_search_tree_0.get_next_node(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.value == 1
    binary_search_tree_0.__contains__(none_type_2)


def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    var_3 = binary_search_tree_1.__repr__()
    assert var_3 == ""
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    var_4 = binary_search_tree_1.__getitem__(var_1)
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)
