# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import enum as module_1
import dataclasses as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_0.query(corpus_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    module_1.unique(corpus_0)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}


def test_case_3():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    document_0 = module_0.Document(reference=corpus_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert (
        f"{type(document_0.reference).__module__}.{type(document_0.reference).__qualname__}"
        == "logical_search.Corpus"
    )
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_0 = "(`d"
    var_0 = corpus_0.query(str_0)


def test_case_4():
    none_type_0 = None
    str_0 = "O-[Oe)X"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_0 = corpus_1.get_docids_by_searching_tags(none_type_0)
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    str_1 = "GWT,PoLpP%mTTj7"
    set_1 = corpus_1.get_docids_with_property(str_1)
    assert len(corpus_1.docids_with_property) == 1
    set_2 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1


@pytest.mark.xfail(strict=True)
def test_case_5():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    str_0 = "\n3Xgwm\x0c\t\\nV!n&2XmN\t"
    set_0 = corpus_0.get_docids_by_property(none_type_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "L*|^Fin(x>}"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.__contains__(corpus_0, none_type_0)


def test_case_6():
    none_type_0 = None
    str_0 = "O-[Oe)X"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = {str_0, str_0, str_0, str_0}
    document_0 = module_0.Document(tags=set_0, properties=set_0, reference=none_type_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {"O-[Oe)X"}
    assert document_0.properties == {"O-[Oe)X"}
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_1 = corpus_1.get_docids_by_searching_tags(none_type_0)
    str_1 = "='Q*pZ`si\tzfpmNN8"
    var_0 = corpus_1.query(str_1)
    assert len(corpus_1.docids_by_tag) == 1
    str_2 = "GWT,PoLpP%mTTj7"
    set_2 = corpus_1.get_docids_with_property(str_2)
    assert len(corpus_1.docids_with_property) == 1
    var_1 = corpus_1.get_doc(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    str_0 = "O-[Oe)X"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = {str_0, str_0, str_0, str_0}
    document_0 = module_0.Document(tags=set_0, properties=set_0, reference=none_type_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {"O-[Oe)X"}
    assert document_0.properties == {"O-[Oe)X"}
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_1 = corpus_1.get_docids_by_searching_tags(none_type_0)
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    str_1 = "GWT,PoLpP%mTTj7"
    set_2 = corpus_1.get_docids_with_property(str_1)
    assert len(corpus_1.docids_with_property) == 1
    set_3 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    corpus_1.add_doc(document_0)


def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = ' fL!&JW"h'
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    none_type_0 = None
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    document_0 = module_0.Document(var_0, corpus_0, none_type_0, var_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == {*()}
    assert (
        f"{type(document_0.tags).__module__}.{type(document_0.tags).__qualname__}"
        == "logical_search.Corpus"
    )
    assert document_0.properties is None
    assert document_0.reference == {*()}
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    var_1 = corpus_1.get_docids_by_exact_tag(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    set_2 = corpus_1.get_docids_with_property(str_0)
    assert len(corpus_1.docids_with_property) == 1
    var_2 = module_2.field(default=var_1, init=var_1, kw_only=var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = 'fL!&JW"h'
    document_0 = module_0.Document(tags=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == 'fL!&JW"h'
    assert document_0.properties == []
    assert document_0.reference is None
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    var_0 = document_0.__repr__()
    assert (
        var_0 == "Document(docid='', tags='fL!&JW\"h', properties=[], reference=None)"
    )
    none_type_0 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_tag) == 8
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    set_0 = corpus_0.invert_docid_set(var_0)
    var_1 = document_0.__repr__()
    assert (
        var_1 == "Document(docid='', tags='fL!&JW\"h', properties=[], reference=None)"
    )
    document_1 = module_0.Document(tags=none_type_0)
    assert (
        f"{type(document_1).__module__}.{type(document_1).__qualname__}"
        == "logical_search.Document"
    )
    assert document_1.docid == ""
    assert document_1.tags is None
    assert document_1.properties == []
    assert document_1.reference is None
    var_1.get_docids_by_searching_tags(none_type_0)


def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    none_type_0 = None
    set_1 = corpus_0.get_docids_with_property(none_type_0)
    assert len(corpus_0.docids_with_property) == 1
    str_0 = "gy"
    set_2 = corpus_0.get_docids_by_property(str_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    var_1 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    set_3 = corpus_1.get_docids_by_searching_tags(str_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


@pytest.mark.xfail(strict=True)
def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "g\x0c*\x0b\t^3'\\fO&yAPR"
    set_1 = corpus_0.get_docids_by_property(str_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = 'fL!&JW"h'
    document_0 = module_0.Document(tags=str_1)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == 'fL!&JW"h'
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    set_2 = corpus_0.invert_docid_set(str_1)
    none_type_0 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_tag) == 8
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    none_type_1 = corpus_0.add_doc(document_0)
    set_3 = corpus_0.invert_docid_set(set_2)
    var_0 = set_2.__repr__()
    assert var_0 == "set()"
    corpus_0.query(set_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "g\x0c*\x0b\t^3'\\fO&yAPR"
    str_1 = "gy"
    set_1 = corpus_0.get_docids_by_property(str_0, str_1)
    assert len(corpus_0.docids_by_property) == 1
    document_0 = module_0.Document(tags=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == "g\x0c*\x0b\t^3'\\fO&yAPR"
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    var_0 = document_0.__repr__()
    assert (
        var_0
        == "Document(docid='', tags=\"g\\x0c*\\x0b\\t^3'\\\\fO&yAPR\", properties=[], reference=None)"
    )
    none_type_0 = corpus_1.add_doc(document_0)
    assert len(corpus_1.docids_by_tag) == 16
    assert (
        f"{type(corpus_1.documents_by_docid).__module__}.{type(corpus_1.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_1.documents_by_docid) == 1
    set_2 = corpus_1.invert_docid_set(var_0)
    var_1 = document_0.__repr__()
    assert (
        var_1
        == "Document(docid='', tags=\"g\\x0c*\\x0b\\t^3'\\\\fO&yAPR\", properties=[], reference=None)"
    )
    var_2 = corpus_1.query(str_1)
    assert len(corpus_1.docids_by_tag) == 17
    var_3 = document_0.__repr__()
    assert (
        var_3
        == "Document(docid='', tags=\"g\\x0c*\\x0b\\t^3'\\\\fO&yAPR\", properties=[], reference=None)"
    )
    var_4 = corpus_0.query(var_0)
    document_1 = module_0.Document(var_0, var_0)
    assert (
        f"{type(document_1).__module__}.{type(document_1).__qualname__}"
        == "logical_search.Document"
    )
    assert (
        document_1.docid
        == "Document(docid='', tags=\"g\\x0c*\\x0b\\t^3'\\\\fO&yAPR\", properties=[], reference=None)"
    )
    assert (
        document_1.tags
        == "Document(docid='', tags=\"g\\x0c*\\x0b\\t^3'\\\\fO&yAPR\", properties=[], reference=None)"
    )
    assert document_1.properties == []
    assert document_1.reference is None
    set_3 = corpus_1.get_docids_by_searching_tags(var_0)
    str_2 = "$kJvL[hRX\nGM&"
    var_0.get_docids_with_property(str_2)


def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "g\x0c*\x0b\t^3'\\fO&yAPR"
    set_1 = corpus_0.invert_docid_set(str_0)
    str_1 = "gy"
    set_2 = corpus_0.get_docids_by_property(str_0, str_1)
    assert len(corpus_0.docids_by_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_2 = "Toe\r\r[%7QOaQ<Mi6X"
    var_1 = corpus_1.query(str_2)
    assert len(corpus_1.docids_by_tag) == 1
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


@pytest.mark.xfail(strict=True)
def test_case_14():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = '"rB#2}=)m!f: N2n\r5'
    set_1 = corpus_0.invert_docid_set(str_0)
    str_1 = "gy"
    set_2 = corpus_0.get_docids_by_property(str_0, str_1)
    assert len(corpus_0.docids_by_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 2
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_1.add_doc(corpus_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    var_0 = corpus_0.get_doc(corpus_0)
    str_0 = "g\x0c*\x0b\t^3'\\fO&yAPR"
    set_1 = corpus_0.invert_docid_set(str_0)
    set_2 = corpus_0.get_docids_by_property(corpus_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    bytes_0 = b"N\xda\x17#\xba\x0f\x1c\xde,\x9f\xf4\xa8R\xaa\xb8b\x0cFP"
    corpus_0.query(bytes_0)
