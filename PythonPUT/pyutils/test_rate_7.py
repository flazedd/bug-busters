# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "xn"
    module_0.Rate(percentage=str_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_2():
    float_0 = 457.742079
    rate_0 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(5.57742079, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_3():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_2,)
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_1)
    assert var_0 is True
    var_1 = var_0.__gt__(bool_1)
    assert var_1 is False
    var_2 = var_1.__eq__(tuple_0)
    var_3 = var_2.__le__(bool_2)
    var_4 = var_3.__ne__(bool_2)
    var_4.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    float_0 = 3349.5
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3349.5, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(float_0)
    assert var_0 is True
    module_0.Rate(percent_change=set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__add__(bool_0)
    assert var_0 == pytest.approx(1.01, abs=0.01, rel=0.01)
    float_0 = 1942.141
    list_0 = [float_0, float_0]
    int_0 = -950
    rate_1 = module_0.Rate(int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -950
    var_1 = rate_1.__repr__()
    assert var_1 == "-95000.000%"
    var_1.__add__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 1516
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 1516
    rate_0.apply_to(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = -526.756564 - 1368j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    rate_0 = module_0.Rate(set_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == {(-526.756564 - 1368j)}
    rate_0.of(set_0)


def test_case_9():
    float_0 = 3349.5
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3349.5, abs=0.01, rel=0.01)
    rate_1 = rate_0.__eq__(rate_0)
    assert rate_1 is True


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_0.__mul__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    float_0 = 274.35
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(274.35, abs=0.01, rel=0.01)
    rate_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    float_0 = 1942.141
    int_0 = -950
    var_0 = rate_0.__sub__(float_0)
    assert var_0 == pytest.approx(-1941.131, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -950
    var_1 = rate_1.__repr__()
    assert var_1 == "-95000.000%"
    var_2 = var_1.__gt__(bool_0)
    var_3 = rate_0.__ge__(float_0)
    assert var_3 is False
    none_type_0 = None
    var_1.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__add__(bool_0)
    assert var_0 == pytest.approx(1.01, abs=0.01, rel=0.01)
    float_0 = 1942.141
    int_0 = -950
    rate_1 = module_0.Rate(int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -950
    var_1 = bool_0.__gt__(bool_0)
    assert var_1 is False
    var_2 = rate_0.__ge__(float_0)
    assert var_2 is False
    var_3 = rate_0.__hash__()
    assert var_3 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_2.__truediv__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    float_0 = 1942.141
    int_0 = -950
    rate_1 = module_0.Rate(int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -950
    var_0 = bool_0.__gt__(bool_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(float_0)
    assert var_1 is False
    var_2 = rate_1.__hash__()
    assert var_2 == -950
    none_type_0 = None
    var_3 = rate_1.__truediv__(int_0)
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = rate_0.apply_to(var_0)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_5 = rate_1.__mul__(bool_1)
    assert var_5 == pytest.approx(-950.0, abs=0.01, rel=0.01)
    var_6 = var_5.__eq__(int_0)
    assert var_6 is True
    var_7 = var_4.__le__(int_0)
    assert var_7 is False
    var_8 = var_7.__lt__(var_4)
    var_9 = var_2.__mul__(none_type_0)
    var_4.of(var_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    float_0 = 3364.1521519423927
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3364.1521519423927, abs=0.01, rel=0.01)
    rate_0.__repr__(relative=rate_0, places=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -788
    int_1 = -1754
    dict_0 = {int_0: int_1, int_0: int_0, int_1: int_1}
    float_0 = -1682.31828
    float_1 = 425.328
    rate_0 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(5.25328, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(float_0)
    assert var_0 is True
    var_0.of(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__add__(bool_0)
    assert var_0 == pytest.approx(1.01, abs=0.01, rel=0.01)
    int_0 = -950
    rate_1 = module_0.Rate(int_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -950
    var_1 = bool_0.__gt__(bool_0)
    assert var_1 is False
    var_2 = rate_0.__ge__(bool_0)
    assert var_2 is True
    var_3 = rate_0.__hash__()
    assert var_3 == pytest.approx(1.01, abs=0.01, rel=0.01)
    none_type_0 = None
    var_4 = var_1.__truediv__(none_type_0)
    var_4.apply_to(bool_0)


def test_case_18():
    str_0 = "m<e(@5t"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)
