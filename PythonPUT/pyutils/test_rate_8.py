# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0
import builtins as module_1


def test_case_0():
    int_0 = 0
    with pytest.raises(ValueError):
        module_0.Rate(percentage=int_0, percent_change=int_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    rate_0.__add__(none_type_0)


def test_case_3():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.Rate(bool_0, percent_change=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 3614
    int_1 = 433
    rate_0 = module_0.Rate(percent_change=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(5.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(places=int_0)
    assert (
        var_0

    )
    var_0.__float__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    float_0 = 805.1048
    float_1 = -2032.22
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_1 = rate_0.__truediv__(float_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.apply_to(float_1)
    assert var_2 == pytest.approx(-1636150.076656, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bool_0)
    assert var_3 is False
    var_4 = rate_0.__add__(var_2)
    assert var_4 == pytest.approx(-1635344.971856, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-19.3222, abs=0.01, rel=0.01)
    var_5 = rate_1.__mul__(float_0)
    assert var_5 == pytest.approx(-15556.395966559998, abs=0.01, rel=0.01)
    var_6 = rate_0.__eq__(var_2)
    assert var_6 is False
    var_7 = rate_0.__float__()
    assert var_7 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_8 = rate_1.__le__(var_6)
    assert var_8 is True
    var_9 = var_2.__hash__()
    assert var_9 == -176756701693278006
    var_10 = var_9.__sub__(var_7)
    var_11 = var_6.__truediv__(var_1)
    var_11.__float__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    none_type_0 = None
    none_type_1 = None
    rate_0 = module_0.Rate(none_type_1, percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    rate_0.__mul__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    int_0 = 3614
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(36.14, abs=0.01, rel=0.01)
    rate_0.__ne__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 3614
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 3614
    var_0 = rate_0.__lt__(int_0)
    assert var_0 is False
    none_type_0 = None
    var_1 = rate_0.__repr__(relative=none_type_0)
    assert var_1 == "+361400.000%"
    var_2 = rate_0.__float__()
    assert var_2 == 3614
    set_0 = set()
    var_3 = var_2.__le__(set_0)
    var_4 = var_2.__hash__()
    assert var_4 == 3614
    object_0 = module_1.object()
    rate_0.__sub__(object_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 3614
    int_1 = 433
    rate_0 = module_0.Rate(percent_change=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(5.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__gt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__repr__(places=int_0)
    assert (
        var_1
        == "+533.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000%"
    )
    var_1.__float__()


def test_case_10():
    int_0 = 836
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(9.36, abs=0.01, rel=0.01)


def test_case_11():
    str_0 = "iS^a&o1Km"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    int_0 = 293
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3.93, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(relative=rate_0)
    assert var_0 == "+293.000%"
    var_1 = rate_0.__float__()
    assert var_1 == pytest.approx(3.93, abs=0.01, rel=0.01)
    var_2 = var_1.__le__(var_1)
    assert var_2 is True
    rate_0.__sub__(none_type_0)


def test_case_13():
    bool_0 = True
    bool_1 = True
    float_0 = 805.1048
    float_1 = -2032.22
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_1 = rate_0.__truediv__(float_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.apply_to(float_1)
    assert var_2 == pytest.approx(-1636150.076656, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bool_1)
    assert var_3 is False
    var_4 = rate_0.__add__(var_2)
    assert var_4 == pytest.approx(-1635344.971856, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-19.3222, abs=0.01, rel=0.01)
    var_5 = rate_1.__mul__(float_0)
    assert var_5 == pytest.approx(-15556.395966559998, abs=0.01, rel=0.01)
    var_6 = rate_0.__eq__(var_2)
    assert var_6 is False
    var_7 = var_6.__ne__(bool_0)
    assert var_7 is True
    var_8 = var_7.__hash__()
    assert var_8 == 1
    int_0 = 0
    var_9 = var_3.__sub__(int_0)
    assert var_9 == 0
    var_10 = var_9.__truediv__(var_1)
    var_11 = var_1.__lt__(var_10)
    var_12 = rate_1.__le__(var_2)
    assert var_12 is False
    var_13 = var_4.__float__()
    assert var_13 == pytest.approx(-1635344.971856, abs=0.01, rel=0.01)
    var_14 = var_9.__repr__()
    assert var_14 == "0"
    rate_2 = module_0.Rate(percent_change=var_4)
    assert f"{type(rate_2).__module__}.{type(rate_2).__qualname__}" == "rate.Rate"
    assert rate_2.multiplier == pytest.approx(-16352.44971856, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate(percentage=var_0, percent_change=bool_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    int_0 = 3614
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 3614
    none_type_0 = None
    var_0 = rate_0.of(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__repr__(relative=none_type_0)
    assert var_1 == "+361400.000%"
    var_2 = rate_0.__repr__()
    assert var_2 == "+361400.000%"
    module_1.object(**none_type_0)


def test_case_15():
    bool_0 = True
    bool_1 = True
    float_0 = 805.1048
    float_1 = -2032.22
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_1 = rate_0.__truediv__(float_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.apply_to(float_1)
    assert var_2 == pytest.approx(-1636150.076656, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bool_1)
    assert var_3 is False
    var_4 = rate_0.__add__(var_2)
    assert var_4 == pytest.approx(-1635344.971856, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-19.3222, abs=0.01, rel=0.01)
    var_5 = rate_1.__mul__(float_0)
    assert var_5 == pytest.approx(-15556.395966559998, abs=0.01, rel=0.01)
    var_6 = rate_0.__eq__(var_2)
    assert var_6 is False
    var_7 = var_6.__ne__(bool_0)
    assert var_7 is True
    var_8 = var_7.__hash__()
    assert var_8 == 1
    var_9 = var_4.__hash__()
    assert var_9 == -2240947363337794576
    var_10 = var_7.__sub__(float_0)
    var_11 = var_4.__truediv__(var_0)
    assert var_11 == pytest.approx(-2031.22, abs=0.01, rel=0.01)
    var_12 = rate_0.__ge__(var_11)
    assert var_12 is True
    var_13 = var_7.__float__()
    assert var_13 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_14 = var_6.__float__()
    assert var_14 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_15 = var_7.__le__(var_5)
    var_16 = var_2.__float__()
    assert var_16 == pytest.approx(-1636150.076656, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    bool_1 = True
    float_0 = 805.1048
    float_1 = -2032.22
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_1 = rate_0.__truediv__(float_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = rate_0.apply_to(float_1)
    assert var_2 == pytest.approx(-1636150.076656, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bool_1)
    assert var_3 is False
    var_4 = rate_0.__add__(var_2)
    assert var_4 == pytest.approx(-1635344.971856, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-19.3222, abs=0.01, rel=0.01)
    var_5 = rate_1.__mul__(float_0)
    assert var_5 == pytest.approx(-15556.395966559998, abs=0.01, rel=0.01)
    var_6 = rate_0.__eq__(var_2)
    assert var_6 is False
    var_7 = rate_0.__float__()
    assert var_7 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    var_8 = rate_1.__le__(var_6)
    assert var_8 is True
    var_9 = rate_1.__sub__(var_5)
    assert var_9 == pytest.approx(15537.073766559997, abs=0.01, rel=0.01)
    var_10 = var_5.__truediv__(var_7)
    assert var_10 == pytest.approx(-19.3222, abs=0.01, rel=0.01)
    var_11 = var_7.__lt__(var_2)
    assert var_11 is False
    var_12 = rate_1.__ge__(var_7)
    assert var_12 is False
    var_13 = var_12.__le__(var_5)
    var_14 = var_7.__float__()
    assert var_14 == pytest.approx(805.1048, abs=0.01, rel=0.01)
    rate_1.__repr__(places=bool_0)
