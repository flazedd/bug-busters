# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 0
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    bool_1 = binary_search_tree_0.__contains__(var_0)
    assert bool_1 is False
    var_0.height()


@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    bool_1 = binary_search_tree_0.__contains__(var_0)
    assert bool_1 is False
    var_0.height()


def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(
        binary_search_tree_0, binary_search_tree_0
    )
    bytes_0 = b"\xc9\x08EH\xf4"
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    generator_1 = binary_search_tree_0.get_nodes_in_range_inclusive(bytes_0, var_0)
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    bool_1 = var_1.__le__(var_1)
    assert bool_1 is True
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bytes_0 = b"\xc9\x08EH\xf4"
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(bytes_0, bytes_0)
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    none_type_1 = binary_search_tree_0.insert(binary_search_tree_1)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    binary_search_tree_0.get_next_node(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    binary_search_tree_0.get_next_node(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    binary_search_tree_0.repr_traverse(var_0, var_0, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.iterate_leaves()
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    binary_search_tree_0.get_next_node(var_0)


def test_case_9():
    bytes_0 = b"\x88\xaf\xdeG\x11P\\M\x82\x8e\xfb\x04\xde\x14\x19Q"
    node_0 = module_0.Node(bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == b"\x88\xaf\xdeG\x11P\\M\x82\x8e\xfb\x04\xde\x14\x19Q"


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.get_root()
    var_0.iterate_postorder()


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is True
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_0.__delitem__(var_0)


def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bytes_0 = b"\x88\xaf\xdeG\x11P\\M\x8e\xfb\x04\xde\x14\x19Q"
    var_0 = binary_search_tree_0.iterate_leaves()
    list_0 = binary_search_tree_0.parent_path(var_0)
    none_type_0 = binary_search_tree_0.__len__()
    node_0 = module_0.Node(bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == b"\x88\xaf\xdeG\x11P\\M\x8e\xfb\x04\xde\x14\x19Q"
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bytes_0 = b"\x88\xaf\xdeG\x11P\\M\x8e\xfb\x04\xde\x14\x19Q"
    var_0 = binary_search_tree_0.iterate_leaves()
    list_0 = binary_search_tree_0.parent_path(var_0)
    none_type_0 = binary_search_tree_0.insert(list_0)
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(bytes_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == b"\x88\xaf\xdeG\x11P\\M\x8e\xfb\x04\xde\x14\x19Q"
    binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = binary_search_tree_0.iterate_inorder()
    str_0 = binary_search_tree_0.repr_traverse(none_type_0, var_0, none_type_0, var_1)
    assert str_0 == ""
    var_2 = binary_search_tree_0.iterate_inorder()
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(binary_search_tree_0)
    bytes_0 = b"\x88\xaf\xdeG\x11P\\M\x82\x8e\xfb\x04\xde\x14\x19Q"
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(bytes_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    node_0 = module_0.Node(generator_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    binary_search_tree_0.repr_traverse(int_0, int_0, node_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is True
    var_0.get_root()


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(
        binary_search_tree_0, binary_search_tree_0
    )
    none_type_0 = None
    bytes_0 = b"\xc9\x08EH\xf4"
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    generator_1 = binary_search_tree_0.get_nodes_in_range_inclusive(bytes_0, var_0)
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    binary_search_tree_0.__contains__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    none_type_0 = None
    str_0 = "]BWgohk{hf.c="
    str_1 = binary_search_tree_0.repr_traverse(
        none_type_0, str_0, none_type_0, none_type_0
    )
    assert str_1 == ""
    var_1 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    var_2 = binary_search_tree_0.iterate_leaves()
    generic_0 = module_1.Generic(*var_2)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    node_1 = module_0.Node(var_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "bst.Node"
    assert node_1.left is None
    assert node_1.right is None
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.generator"
    )
    bool_0 = var_2.__le__(var_1)
    binary_search_tree_0.get_next_node(var_1)


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    none_type_1 = None
    binary_search_tree_0.insert(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_1)
    var_0 = binary_search_tree_0.get_root()
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_1)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_1)
    assert bool_0 is True
    var_1 = binary_search_tree_0.iterate_inorder()
    binary_search_tree_0.__delitem__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is True
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 0
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    bool_1 = binary_search_tree_0.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_0.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    none_type_1 = None
    bool_0 = False
    binary_search_tree_0.repr_traverse(none_type_1, var_0, node_0, bool_0)
