# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import enum as module_1
import dataclasses as module_2


def test_case_0():
    pass


def test_case_1():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "\x0b<NYg5/6ahvCv\x0c7h6"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)
    document_0 = module_0.Document()
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    var_1 = document_0.__eq__(set_0)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    bytes_0 = b"\xf7n\xe0\xde\xb7\xd1tj\xc2\xf3j\x04v\xc1\xfa.\xc5\xa9%\xb5"
    str_0 = "\nC(//?OgXOaH~f45\nc"
    set_0 = corpus_0.get_docids_with_property(str_0)
    assert len(corpus_0.docids_with_property) == 1
    operation_0 = module_0.Operation.INVERSION
    none_type_0 = None
    node_0 = module_0.Node(corpus_0, operation_0, none_type_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.INVERSION
    assert node_0.operands is None
    document_0 = module_0.Document(reference=bytes_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert (
        document_0.reference
        == b"\xf7n\xe0\xde\xb7\xd1tj\xc2\xf3j\x04v\xc1\xfa.\xc5\xa9%\xb5"
    )
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}


def test_case_3():
    str_0 = "'kGycT07M"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_property(corpus_0, str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_1 = corpus_0.invert_docid_set(corpus_0)
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    document_0 = module_0.Document(tags=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == "'kGycT07M"
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None


@pytest.mark.xfail(strict=True)
def test_case_4():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    corpus_0.query(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_1 = corpus_0.invert_docid_set(set_0)
    module_1.EnumMeta()


def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = "U^_"
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    var_1 = corpus_1.get_doc(str_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_7():
    operation_0 = module_0.Operation.QUERY
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = " G\x0cz\nye]oeB"
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    var_1 = corpus_1.get_doc(operation_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    none_type_1 = None
    str_0 = 'LR0S~" )al<X{L9hu'
    var_0 = corpus_1.query(str_0)
    set_0 = corpus_0.invert_docid_set(none_type_1)
    document_0 = module_0.Document(none_type_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid is None
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_9():
    str_0 = "t%fofu-;TA[w`"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    none_type_0 = None
    set_0 = corpus_1.get_docids_by_property(str_0, none_type_0)
    assert len(corpus_1.docids_by_property) == 1
    document_0 = module_0.Document()
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    none_type_1 = corpus_1.add_doc(document_0)
    assert (
        f"{type(corpus_1.documents_by_docid).__module__}.{type(corpus_1.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_1.documents_by_docid) == 1
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = "-Be:=6"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_0 = corpus_0.invert_docid_set(var_0)
    set_1 = corpus_1.get_docids_by_searching_tags(str_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


@pytest.mark.xfail(strict=True)
def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "A(xkDLkiG&m::ZOP"
    corpus_0.query(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}
    str_0 = "=+"
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    set_0 = corpus_0.invert_docid_set(var_0)
    document_0 = module_0.Document(properties=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == "=+"
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_0.add_doc(document_0)


def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}
    str_0 = "O-Be:=B6"
    set_0 = corpus_2.get_docids_with_property(str_0)
    assert len(corpus_2.docids_with_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_1 = corpus_0.invert_docid_set(var_0)
    str_1 = "%c!(#O@X,i(\r1*X*,x'6"
    var_1 = corpus_1.query(str_1)
    set_2 = corpus_0.get_docids_by_searching_tags(str_0)
    corpus_3 = module_0.Corpus()
    assert (
        f"{type(corpus_3).__module__}.{type(corpus_3).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_3.docids_by_tag).__module__}.{type(corpus_3.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_by_tag) == 0
    assert (
        f"{type(corpus_3.docids_by_property).__module__}.{type(corpus_3.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_by_property) == 0
    assert (
        f"{type(corpus_3.docids_with_property).__module__}.{type(corpus_3.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_with_property) == 0
    assert corpus_3.documents_by_docid == {}


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "t%fofu-;TA[w`"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_1 = "U^_"
    var_0 = corpus_1.query(str_1)
    assert len(corpus_1.docids_by_tag) == 1
    set_0 = corpus_1.get_docids_by_searching_tags(str_1)
    var_1 = module_2.field(default_factory=str_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    auto_0 = module_1.auto()
    assert f"{type(auto_0).__module__}.{type(auto_0).__qualname__}" == "enum.auto"
    assert (
        f"{type(module_1.auto.value).__module__}.{type(module_1.auto.value).__qualname__}"
        == "builtins.object"
    )
    var_1.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "t%fofu-;TA[w`"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}
    none_type_0 = None
    var_0 = corpus_2.query(str_0)
    assert len(corpus_2.docids_by_tag) == 1
    set_0 = corpus_2.invert_docid_set(var_0)
    document_0 = module_0.Document(tags=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == "t%fofu-;TA[w`"
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_1 = "Y^1tN"
    none_type_1 = corpus_2.add_doc(document_0)
    assert len(corpus_2.docids_by_tag) == 13
    assert (
        f"{type(corpus_2.documents_by_docid).__module__}.{type(corpus_2.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_2.documents_by_docid) == 1
    str_2 = 'cu\tFR{V=NXF47"0]fd!U'
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    var_1 = module_2.field(init=none_type_0, repr=str_2)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    corpus_2.add_doc(document_0)


def test_case_16():
    str_0 = "t%fofu-;TA[w`"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    none_type_0 = None
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_0 = corpus_1.invert_docid_set(var_0)
    document_0 = module_0.Document(tags=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == "t%fofu-;TA[w`"
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_1 = "Y^1tN"
    none_type_1 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_tag) == 13
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    str_2 = 'cu\tFR{V=NXF47"0]fd!U'
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    var_1 = module_2.field(init=none_type_0, repr=str_2)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    str_3 = "Y^1tN"
    none_type_2 = corpus_1.add_doc(document_0)
    assert len(corpus_1.docids_by_tag) == 12
    assert (
        f"{type(corpus_1.documents_by_docid).__module__}.{type(corpus_1.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_1.documents_by_docid) == 1
    set_2 = corpus_1.get_docids_by_searching_tags(str_3)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_17():
    str_0 = "t%fofu-;TA[w`"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}
    str_1 = "U^_"
    var_0 = corpus_2.query(str_1)
    assert len(corpus_2.docids_by_tag) == 1
    set_0 = corpus_0.invert_docid_set(str_0)
    document_0 = module_0.Document(tags=set_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_2 = "Y^1tN"
    none_type_0 = corpus_0.add_doc(document_0)
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    set_1 = corpus_0.invert_docid_set(str_1)
    document_1 = module_0.Document(reference=str_2)
    assert (
        f"{type(document_1).__module__}.{type(document_1).__qualname__}"
        == "logical_search.Document"
    )
    assert document_1.docid == ""
    assert document_1.tags == {*()}
    assert document_1.properties == []
    assert document_1.reference == "Y^1tN"
    corpus_3 = module_0.Corpus()
    assert (
        f"{type(corpus_3).__module__}.{type(corpus_3).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_3.docids_by_tag).__module__}.{type(corpus_3.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_by_tag) == 0
    assert (
        f"{type(corpus_3.docids_by_property).__module__}.{type(corpus_3.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_by_property) == 0
    assert (
        f"{type(corpus_3.docids_with_property).__module__}.{type(corpus_3.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_3.docids_with_property) == 0
    assert corpus_3.documents_by_docid == {}


def test_case_18():
    operation_0 = module_0.Operation.QUERY
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    none_type_1 = None
    str_0 = "U^_"
    set_0 = corpus_0.get_docids_by_searching_tags(none_type_0)
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_1 = corpus_0.invert_docid_set(var_0)
    document_0 = module_0.Document(tags=set_1, properties=set_1)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == {*()}
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    none_type_2 = corpus_0.add_doc(document_0)
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    set_2 = corpus_1.get_docids_by_searching_tags(document_0)
    var_1 = module_2.dataclass(init=set_0, eq=operation_0, match_args=none_type_1)
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    none_type_3 = corpus_0.add_doc(document_0)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_19():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = "U^_"
    str_1 = "O-Be:=B6"
    str_2 = 'fm0B"xO=@'
    set_0 = corpus_0.get_docids_with_property(str_2)
    assert len(corpus_0.docids_with_property) == 1
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_property) == 1
    set_1 = corpus_0.invert_docid_set(var_0)
    document_0 = module_0.Document(tags=set_1, properties=set_1)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == {*()}
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_3 = "Y^1tN"
    none_type_0 = corpus_0.add_doc(document_0)
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    set_2 = corpus_0.invert_docid_set(set_1)
    none_type_1 = corpus_0.add_doc(document_0)
    set_3 = corpus_1.get_docids_by_searching_tags(str_3)
    var_1 = module_2.field(init=str_0, metadata=str_3)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_2 = corpus_0.add_doc(document_0)
    str_4 = "i"
    set_4 = corpus_0.get_docids_by_searching_tags(str_4)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


@pytest.mark.xfail(strict=True)
def test_case_20():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}
    none_type_0 = None
    str_0 = "U^_"
    str_1 = "O-Be:=B6"
    set_0 = corpus_1.get_docids_by_property(corpus_1, none_type_0)
    assert len(corpus_1.docids_by_property) == 1
    set_1 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    str_2 = "* \r>gks1"
    var_0 = corpus_0.query(str_2)
    set_2 = {none_type_0, str_0}
    module_1.EnumMeta(*set_2)


@pytest.mark.xfail(strict=True)
def test_case_21():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    str_0 = "O-Be:=B6"
    set_0 = corpus_0.get_docids_with_property(str_0)
    assert len(corpus_0.docids_with_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    set_1 = corpus_0.invert_docid_set(none_type_0)
    str_1 = "Rh.sTb*K(@"
    str_2 = "8}"
    tuple_0 = (str_0, str_2)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    document_0 = module_0.Document(str_1, properties=list_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == "Rh.sTb*K(@"
    assert document_0.tags == {*()}
    assert document_0.properties == [
        ("O-Be:=B6", "8}"),
        ("O-Be:=B6", "8}"),
        ("O-Be:=B6", "8}"),
        ("O-Be:=B6", "8}"),
    ]
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    none_type_1 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_property) == 2
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    corpus_0.add_doc(document_0)
