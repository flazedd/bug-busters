# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = 1647.57062
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "1647.57062"
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    bool_1 = True
    bool_2 = binary_search_tree_0.__contains__(bool_1)
    assert bool_2 is False
    none_type_2 = binary_search_tree_0.insert(var_3)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    var_4 = binary_search_tree_0.iterate_inorder()
    var_4.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is None
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value is None
    var_2.iterate_leaves()


def test_case_4():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__getitem__(none_type_0)
    list_0 = [var_0, binary_search_tree_0]
    node_0 = module_0.Node(list_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.list"
    )
    assert len(node_0.value) == 2
    var_1 = binary_search_tree_0.iterate_inorder()


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.iterate_postorder()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_2 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = -787.372
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    bool_1 = False
    bool_2 = binary_search_tree_0.__contains__(bool_1)
    assert bool_2 is False
    bool_3 = binary_search_tree_0.__delitem__(var_3)
    assert bool_3 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    bool_0 = binary_search_tree_0.__delitem__(node_0)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    node_0 = module_0.Node(set_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == {*()}
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is False
    float_0 = 1647.57062
    none_type_0 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "1647.57062"
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 1
    bool_1 = True
    bool_2 = binary_search_tree_0.__contains__(bool_1)
    assert bool_2 is False
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    var_1.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    str_0 = "hECc2I|\x0c8ZB4RA"
    bool_0 = True
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, none_type_0, bool_0)
    assert str_1 == ""
    var_0 = binary_search_tree_0.iterate_inorder()
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_2 = binary_search_tree_0.get_next_node(var_1)
    binary_search_tree_0.repr_traverse(
        var_1, str_0, binary_search_tree_0, binary_search_tree_0
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "None"
    binary_search_tree_0.parent_path(var_0)


def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__len__()
    assert var_1 == 0
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == ""
    var_2 = var_1.__repr__()
    assert var_2 == "0"
    var_3 = var_2.__repr__()
    assert var_3 == "'0'"


def test_case_11():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    binary_search_tree_0.get_next_node(var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    binary_search_tree_0.get_next_node(none_type_0)


def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.get_root()
    var_0 = binary_search_tree_0.iterate_preorder()


def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "None"
    var_1 = binary_search_tree_0.iterate_inorder()
    var_2 = binary_search_tree_0.iterate_inorder()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    module_1.Generic(*var_1)


def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = 1165
    bool_1 = binary_search_tree_0.__delitem__(int_0)
    assert bool_1 is False
    none_type_1 = binary_search_tree_1.insert(binary_search_tree_1)
    assert len(binary_search_tree_1) == 1
    var_0 = binary_search_tree_1.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_1.get_next_node(var_0)
    bool_2 = binary_search_tree_1.__delitem__(binary_search_tree_1)
    assert bool_2 is True
    assert len(binary_search_tree_1) == 0
    assert len(var_0.value) == 0
    none_type_2 = binary_search_tree_1.insert(none_type_1)
    assert len(binary_search_tree_1) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_1.__repr__()
    assert var_2 == "None"
    binary_search_tree_1.parent_path(var_0)


def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    bool_1 = False
    bool_2 = binary_search_tree_0.__delitem__(bool_1)
    assert bool_2 is False
    var_0 = binary_search_tree_0.iterate_inorder()
    var_0.insert(var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = -1334.0927131850185
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_1 = binary_search_tree_0.iterate_postorder()
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 1
    bool_1 = binary_search_tree_0.__contains__(var_2)
    assert bool_1 is False
    var_3 = binary_search_tree_0.get_root()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.value == pytest.approx(-1334.0927131850185, abs=0.01, rel=0.01)
    none_type_2 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}" == "bst.Node"
    )
    var_2.__len__()


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = 1647.57062
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "1647.57062"
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    none_type_2 = binary_search_tree_0.insert(var_3)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    var_4 = binary_search_tree_0.__repr__()
    assert var_4 == "1647.57062\n└──1"
    var_4.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = -135.4462
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_0.iterate_postorder()
    var_3 = binary_search_tree_0.__len__()
    assert var_3 == 1
    bool_1 = True
    bool_2 = binary_search_tree_0.__contains__(bool_1)
    assert bool_2 is False
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 1
    var_5 = binary_search_tree_0.get_root()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "bst.Node"
    assert var_5.left is None
    assert var_5.right is None
    assert var_5.value == pytest.approx(-135.4462, abs=0.01, rel=0.01)
    var_6 = var_3.__repr__()
    assert var_6 == "1"
    none_type_2 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    assert (
        f"{type(var_5.right).__module__}.{type(var_5.right).__qualname__}" == "bst.Node"
    )
    var_7 = binary_search_tree_0.__getitem__(var_4)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "bst.Node"
    assert var_7.left is None
    assert var_7.right is None
    assert var_7.value is True
    var_8 = binary_search_tree_0.__len__()
    assert var_8 == 2
    var_2.get_root()


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_1 = binary_search_tree_0.get_next_node(var_0)
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    float_0 = 1645.6711055836486
    none_type_1 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "1645.6711055836486"
    bool_1 = True
    bool_2 = binary_search_tree_0.__contains__(bool_1)
    assert bool_2 is False
    none_type_2 = binary_search_tree_0.insert(float_0)
    assert len(binary_search_tree_0) == 2
    assert len(var_0.value) == 2
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "1645.6711055836486\n└──1645.6711055836486"
    var_4 = binary_search_tree_0.__len__()
    assert var_4 == 2
    var_4.iterate_preorder()
