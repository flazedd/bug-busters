# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    list_0 = binary_search_tree_0.parent_path(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_1 = binary_search_tree_0.__contains__(bool_0)
    assert bool_1 is False
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = True
    str_0 = binary_search_tree_0.repr_traverse(
        binary_search_tree_0, none_type_0, none_type_0, none_type_0
    )
    assert str_0 == ""
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.iterate_postorder()
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_0)
    list_0 = binary_search_tree_0.parent_path(none_type_0)
    generator_1 = binary_search_tree_0.get_nodes_in_range_inclusive(bool_1, list_0)
    generic_0 = module_1.Generic(*var_0)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    generator_1.depth()


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    bool_0 = False
    str_0 = binary_search_tree_0.__repr__()
    assert str_0 == "None"
    binary_search_tree_0.__delitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is True
    var_1 = binary_search_tree_0.get_next_node(var_0)
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "True"
    var_3 = var_2.__repr__()
    assert var_3 == "'True'"
    var_3.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    str_0 = ""
    binary_search_tree_0.repr_traverse(var_0, str_0, binary_search_tree_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "None"
    binary_search_tree_0.__delitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.get_nodes_in_range_inclusive(bool_0, bool_0)


def test_case_9():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = False
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "False"
    binary_search_tree_0.__delitem__(var_0)


def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}" == "bst.Node"
    )
    assert var_0.value is True
    bool_1 = binary_search_tree_0.__len__()
    assert bool_1 == 2
    var_1 = binary_search_tree_0.get_next_node(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is True
    var_2 = module_0.BinarySearchTree()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.BinarySearchTree"
    )
    assert len(var_2) == 0
    var_3 = var_2.__repr__()
    assert var_3 == ""
    var_4 = var_2.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_1 = 506
    int_2 = binary_search_tree_0.height()
    assert int_2 == 1
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is False
    bool_2 = binary_search_tree_0.__delitem__(bool_1)
    assert bool_2 is False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "True"
    binary_search_tree_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_1 = 506
    int_2 = binary_search_tree_0.height()
    assert int_2 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is True
    bool_1 = True
    var_1 = binary_search_tree_0.__getitem__(bool_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is True
    bool_2 = binary_search_tree_0.__delitem__(int_1)
    assert bool_2 is False
    bool_3 = binary_search_tree_0.__delitem__(bool_2)
    assert bool_3 is False
    binary_search_tree_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_0 = 506
    bool_1 = binary_search_tree_0.__delitem__(int_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "True"
    var_1 = bool_1.__repr__()
    assert var_1 == "False"
    binary_search_tree_0.parent_path(int_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    float_0 = 2578.0
    bool_1 = binary_search_tree_0.__delitem__(float_0)
    assert bool_1 is False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "True"
    var_1 = var_0.__repr__()
    assert var_1 == "'True'"
    var_0.parent_path(var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "True\n└──True"
    bool_1 = binary_search_tree_0.__delitem__(int_0)
    assert bool_1 is False
    binary_search_tree_0.get_next_node(none_type_0)


def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_0 = 506
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is True
    bool_1 = True
    var_1 = binary_search_tree_0.__getitem__(bool_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is True
    bool_2 = binary_search_tree_0.__delitem__(int_0)
    assert bool_2 is False
    bool_3 = binary_search_tree_0.__delitem__(bool_2)
    assert bool_3 is False
    str_0 = "k_t6%0<WWtW$Ir#/y|"
    str_1 = "rMpC "
    bool_4 = True
    str_2 = binary_search_tree_0.repr_traverse(str_0, str_1, var_1, bool_4)
    assert str_2 == "\nk_t6%0<WWtW$Ir#/y|rMpC True"
    var_2 = binary_search_tree_0.iterate_preorder()


def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "True"
    var_1 = binary_search_tree_0.__getitem__(int_1)
    none_type_1 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}" == "bst.Node"
    )
    assert var_2.right is None
    assert var_2.value is True
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    assert var_2.left is None
    var_3 = binary_search_tree_0.get_next_node(var_2)
    bool_2 = True
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_2)
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value == 0
    var_1 = binary_search_tree_0.__getitem__(bool_0)
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    set_0 = {int_0}
    list_0 = []
    str_0 = "?pvrG}`sU\x0chs;)@"
    tuple_0 = (set_0, list_0, binary_search_tree_0, str_0)
    var_2 = binary_search_tree_0.iterate_postorder()
    var_2.__delitem__(tuple_0)


def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    none_type_0 = None
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    int_2 = binary_search_tree_0.height()
    assert int_2 == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is None
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(node_0.value) == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    int_2 = 506
    int_3 = binary_search_tree_0.iterate_leaves()
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is True
    bool_1 = binary_search_tree_0.__delitem__(int_2)
    assert bool_1 is False
    var_1 = binary_search_tree_0.iterate_preorder()
    bool_2 = binary_search_tree_0.__len__()
    assert bool_2 == 1
    var_2 = binary_search_tree_0.get_next_node(var_0)
    module_1.Generic(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_1 = 506
    int_2 = binary_search_tree_0.height()
    assert int_2 == 1
    var_0 = module_0.Node(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is None
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is False
    binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    none_type_0 = None
    bool_0 = False
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is False
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_0)
    bool_1 = binary_search_tree_0.__delitem__(var_1)
    assert bool_1 is False
    var_2 = binary_search_tree_0.get_next_node(var_0)
    str_0 = binary_search_tree_0.repr_traverse(
        none_type_0, var_1, none_type_0, generator_0
    )
    assert str_0 == ""
    module_1.Generic(*generator_0)


def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    none_type_0 = None
    bool_0 = False
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.value is False
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(var_1)
    bool_1 = binary_search_tree_0.__delitem__(var_1)
    assert bool_1 is False
    var_2 = binary_search_tree_0.get_next_node(var_0)
    str_0 = binary_search_tree_0.repr_traverse(
        none_type_0, var_1, none_type_0, generator_0
    )
    assert str_0 == ""
    generic_0 = module_1.Generic(*generator_0)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    var_3 = binary_search_tree_0.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_26():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = False
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 2
    assert len(node_0.value) == 2
    int_2 = binary_search_tree_0.__repr__()
    assert int_2 == "False\n└──False"
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}" == "bst.Node"
    )
    assert var_0.value is False
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 2
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(node_0)
    bool_1 = binary_search_tree_0.__delitem__(var_1)
    assert bool_1 is False
    var_1.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    bool_0 = False
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is False
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 1
    var_3 = binary_search_tree_0.iterate_inorder()
    bool_1 = binary_search_tree_0.__delitem__(var_2)
    assert bool_1 is False
    var_4 = binary_search_tree_0.get_next_node(var_1)
    var_5 = binary_search_tree_0.__repr__()
    assert var_5 == "False"
    module_1.Generic(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_28():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 2
    int_2 = binary_search_tree_0.height()
    assert int_2 == 2
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert (
        f"{type(var_1.left).__module__}.{type(var_1.left).__qualname__}" == "bst.Node"
    )
    assert var_1.right is None
    assert var_1.value is True
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    assert var_1.left is None
    binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    none_type_0 = None
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = True
    none_type_1 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    int_2 = 512
    int_3 = binary_search_tree_0.height()
    assert int_3 == 1
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 1
    bool_1 = binary_search_tree_0.__delitem__(int_2)
    assert bool_1 is False
    var_2 = binary_search_tree_0.iterate_leaves()
    bool_2 = binary_search_tree_0.__delitem__(bool_1)
    assert bool_2 is False
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "True"
    var_4 = binary_search_tree_0.iterate_preorder()
    bool_3 = False
    var_5 = binary_search_tree_0.__getitem__(bool_3)
    str_0 = ""
    str_1 = binary_search_tree_0.repr_traverse(none_type_0, str_0, none_type_0, var_2)
    assert str_1 == ""
    module_1.Generic(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_30():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = None
    none_type_2 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "True\n└──0"
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.get_next_node(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_31():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = False
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == "False"
    var_1 = binary_search_tree_0.__getitem__(int_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value is False
    none_type_1 = binary_search_tree_0.insert(int_1)
    assert len(binary_search_tree_0) == 2
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    none_type_2 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 3
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "False\n└──0\n   └──0"
    var_3 = binary_search_tree_0.get_root()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}" == "bst.Node"
    )
    assert var_3.value is False
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 2
    var_4 = binary_search_tree_0.get_next_node(var_3)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "bst.Node"
    assert var_4.left is None
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}" == "bst.Node"
    )
    assert var_4.value == 0
    module_1.Generic(**var_2)


def test_case_32():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    bool_0 = True
    none_type_0 = binary_search_tree_0.insert(bool_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.__getitem__(int_1)
    none_type_1 = binary_search_tree_0.insert(int_1)
    assert len(binary_search_tree_0) == 2
    bool_1 = True
    none_type_2 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 3
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "True\n└──0\n│  └──0"
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert (
        f"{type(var_2.left).__module__}.{type(var_2.left).__qualname__}" == "bst.Node"
    )
    assert var_2.right is None
    assert var_2.value is True
    var_3 = binary_search_tree_0.get_root()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert (
        f"{type(var_3.left).__module__}.{type(var_3.left).__qualname__}" == "bst.Node"
    )
    assert var_3.right is None
    assert var_3.value is True
    bool_2 = binary_search_tree_0.__delitem__(int_1)
    assert bool_2 is True
    assert len(binary_search_tree_0) == 2
    var_4 = binary_search_tree_0.get_next_node(var_3)
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(bool_1)
    dict_0 = {}
    generic_0 = module_1.Generic(**dict_0)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    var_5 = binary_search_tree_0.iterate_inorder()
