# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    none_type_0 = binary_search_tree_1.insert(binary_search_tree_1)
    assert len(binary_search_tree_1) == 1
    int_0 = binary_search_tree_1.height()
    assert int_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = []
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(
        binary_search_tree_0, list_0
    )
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    tuple_0 = ()
    binary_search_tree_0.insert(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    none_type_2 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 2
    str_1 = "d"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 2
    int_2 = binary_search_tree_0.height()
    assert int_2 == 2
    binary_search_tree_0.parent_path(none_type_2)


def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = False
    var_0 = binary_search_tree_0.__getitem__(bool_0)


def test_case_5():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(none_type_0)


def test_case_6():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "Z^j[X\n#5:"
    node_0 = module_0.Node(str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "Z^j[X\n#5:"
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    bool_0 = False
    binary_search_tree_0.repr_traverse(binary_search_tree_0, str_0, node_0, bool_0)


def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = True
    str_0 = binary_search_tree_0.repr_traverse(
        none_type_0, none_type_0, none_type_0, bool_0
    )
    assert str_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = var_0.__len__()
    assert var_1 == 0
    var_2 = var_1.__repr__()
    assert var_2 == "0"
    var_2.depth()


def test_case_11():
    str_0 = "@Q>\x0c:=&"
    node_0 = module_0.Node(str_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == "@Q>\x0c:=&"


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    binary_search_tree_0.get_next_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    none_type_1 = binary_search_tree_0.insert(none_type_0)
    assert len(binary_search_tree_0) == 1
    var_0.get_nodes_in_range_inclusive(var_0, binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    bytes_0 = b"fQ\xb6"
    var_1 = binary_search_tree_0.__getitem__(bytes_0)
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    var_2 = binary_search_tree_0.iterate_inorder()
    binary_search_tree_0.parent_path(none_type_0)


def test_case_15():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    bytes_0 = b"fQ\xb6"
    var_0 = binary_search_tree_0.__getitem__(bytes_0)
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "\tO("
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False


def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.__getitem__(var_0)
    bool_0 = binary_search_tree_0.__delitem__(var_0)
    assert bool_0 is False
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "None"


def test_case_18():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    str_0 = "UX[/6^<6/Eg:]"
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(str_0, none_type_0)
    str_1 = binary_search_tree_0.repr_traverse(bool_0, bool_0, none_type_0, none_type_0)
    assert str_1 == ""
    int_0 = binary_search_tree_0.iterate_postorder()
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_2 = binary_search_tree_0.get_root()
    none_type_1 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 1
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    list_0 = []
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(
        binary_search_tree_0, list_0
    )
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 1
    var_0 = binary_search_tree_0.__getitem__(binary_search_tree_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1


def test_case_20():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "d"
    var_0 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.__repr__()
    assert int_1 == ""
    var_1 = binary_search_tree_0.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "d"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    float_0 = -2790.7041
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(float_0)
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == ""
    var_2 = binary_search_tree_0.iterate_leaves()
    int_2 = binary_search_tree_0.height()
    assert int_2 == 1
    list_0 = binary_search_tree_0.parent_path(var_1)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "builtins.generator"
    )
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == ""
    node_1 = module_0.Node(var_2)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "bst.Node"
    assert node_1.left is None
    assert node_1.right is None
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "builtins.generator"
    )
    binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "2/6^</Eg]"
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(str_0, none_type_0)
    bytes_0 = b"^}:"
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "/Vc4}j d>Tqs7>#o\t"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    binary_search_tree_0.__delitem__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    str_0 = binary_search_tree_0.repr_traverse(bool_0, bool_0, none_type_0, none_type_0)
    assert str_0 == ""
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.__getitem__(var_0)
    var_2 = binary_search_tree_0.get_root()
    var_3 = binary_search_tree_0.iterate_leaves()
    none_type_1 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    var_4 = binary_search_tree_0.__getitem__(var_1)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "bst.Node"
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.value is None
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_5 = binary_search_tree_0.iterate_leaves()
    var_6 = var_5.__repr__()
    str_1 = ":sLX?bMZ<ZK"
    str_2 = binary_search_tree_0.repr_traverse(str_1, var_6, var_4, var_3)
    var_6.__getitem__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    bytes_0 = b"fQ\xb6"
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    float_0 = -959.579786716329
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_0 = binary_search_tree_0.__getitem__(float_0)
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0"
    var_2 = var_1.__repr__()
    assert var_2 == "'0'"
    dict_0 = {var_0: bytes_0, float_0: bytes_0}
    binary_search_tree_0.__delitem__(dict_0)


def test_case_25():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "d"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == ""
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_2 = binary_search_tree_0.iterate_preorder()
    var_3 = binary_search_tree_0.get_next_node(var_1)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "d"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_2 = binary_search_tree_0.get_root()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == ""
    var_3 = binary_search_tree_0.iterate_leaves()
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.Node"
    )
    module_1.Generic(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    str_0 = binary_search_tree_0.repr_traverse(int_0, int_0, none_type_0, none_type_0)
    assert str_0 == ""
    none_type_1 = binary_search_tree_0.insert(str_0)
    assert len(binary_search_tree_0) == 1
    str_1 = "d"
    bool_0 = binary_search_tree_0.__delitem__(str_1)
    assert bool_0 is False
    var_0 = binary_search_tree_0.__getitem__(str_1)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == ""
    var_2 = binary_search_tree_0.iterate_inorder()
    node_0 = module_0.Node(var_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.Node"
    )
    module_1.Generic(*var_2)
