# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 4981
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 4981
    var_0 = rate_0.__float__()
    assert var_0 == 4981
    rate_1 = module_0.Rate(percentage=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(49.81, abs=0.01, rel=0.01)
    var_1 = int_0.__ge__(rate_1)
    rate_0.__gt__(var_1)


def test_case_1():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(none_type_0)


def test_case_2():
    int_0 = 3905
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(40.05, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(40.05, abs=0.01, rel=0.01)
    var_1 = var_0.__hash__()
    assert var_1 == 115292150460678184
    var_2 = rate_0.__eq__(rate_0)
    assert var_2 is True
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_3():
    int_0 = 4981
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 4981
    var_0 = rate_0.__float__()
    assert var_0 == 4981
    var_1 = rate_0.__hash__()
    assert var_1 == 4981
    var_2 = var_1.__le__(rate_0)
    none_type_0 = None
    var_3 = none_type_0.__ne__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    int_0 = 1261
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(13.61, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is False
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = rate_0.__sub__(var_0)
    assert var_2 == pytest.approx(13.61, abs=0.01, rel=0.01)
    var_0.apply_to(var_2)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "%j)j\x0cvD]\x0co(n"
    int_0 = 1261
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 1261
    var_0 = rate_0.__ne__(int_0)
    assert var_0 is False
    set_0 = {var_0}
    rate_0.__repr__(relative=str_0, places=set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+100.000%"
    var_1 = rate_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = rate_1.__ge__(var_1)
    assert var_2 is False
    rate_0.__gt__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    int_0 = 4981
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 4981
    rate_1 = module_0.Rate(percentage=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(49.81, abs=0.01, rel=0.01)
    var_0 = rate_1.__hash__()
    assert var_0 == pytest.approx(49.81, abs=0.01, rel=0.01)
    rate_1.__sub__(none_type_0)


def test_case_8():
    str_0 = "%j)j\x0cvD]\x0co(n"
    int_0 = 1261
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(13.61, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+1361.000%"
    var_1 = var_0.__gt__(str_0)
    assert var_1 is True
    var_2 = rate_0.of(int_0)
    assert var_2 == pytest.approx(17162.21, abs=0.01, rel=0.01)
    var_3 = var_2.__ne__(var_2)
    assert var_3 is False
    var_4 = rate_0.__float__()
    assert var_4 == pytest.approx(13.61, abs=0.01, rel=0.01)
    var_5 = var_2.__sub__(rate_0)
    var_6 = var_4.__le__(var_2)
    assert var_6 is True
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 4981
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 4981
    var_0 = rate_0.__float__()
    assert var_0 == 4981
    rate_0.__add__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -104.84049
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-1.0484049, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(float_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(float_0)
    assert var_1 is True
    var_2 = rate_0.__eq__(var_1)
    assert var_2 is False
    var_1.apply_to(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    int_0 = 1261
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(13.61, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is False
    var_1 = rate_0.apply_to(rate_0)
    assert var_1 == pytest.approx(185.23209999999997, abs=0.01, rel=0.01)
    var_2 = rate_0.__le__(bool_0)
    assert var_2 is False
    var_3 = var_2.__hash__()
    assert var_3 == 0
    var_4 = var_3.__sub__(var_3)
    assert var_4 == 0
    var_2.apply_to(var_4)


def test_case_12():
    str_0 = "%j)j\x0cvD]\x0co(n"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    int_0 = -1185
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-10.85, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(var_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    int_1 = 1107
    rate_1 = module_0.Rate(percent_change=int_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(12.07, abs=0.01, rel=0.01)
    var_0.apply_to(var_2)
