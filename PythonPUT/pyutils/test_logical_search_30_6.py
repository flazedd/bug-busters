# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import __exceptions as module_1
import dataclasses as module_2


def test_case_0():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )


def test_case_1():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.get_docids_by_searching_tags(corpus_0)


def test_case_3():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(str_0)


def test_case_4():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_5():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "Ry[KL:eV0QU4"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1


def test_case_7():
    str_0 = "Jhcyo@56[?T0et"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.get_doc(str_0)
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    var_1 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1


def test_case_8():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_0 = corpus_1.get_docids_by_searching_tags(str_0)
    str_1 = ".3%IM^fDI.$/pH*J:=\\X"
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    corpus_0.query(none_type_0)


def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "<*v&(\r,%"
    var_0 = corpus_0.query(str_0)


def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "1EGo{t6rd.#\x0c2%"
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_0 = corpus_1.get_docids_by_searching_tags(str_0)
    document_0 = module_0.Document()
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_1 = "WulE(zV.\n!"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1


def test_case_12():
    str_0 = "U$8"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    var_0 = corpus_0.get_doc(str_0)
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_0 = corpus_1.get_docids_by_searching_tags(str_0)
    document_0 = module_0.Document(tags=set_0, reference=var_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_1 = '; )VRY\x0boi~["Nn!bB(O'
    var_1 = corpus_0.query(str_1)


def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = "Z#e"
    node_0 = module_0.Node(corpus_0, corpus_1, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(node_0.op).__module__}.{type(node_0.op).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.operands == "Z#e"
    set_0 = node_0.eval()
    str_1 = "^"
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    corpus_2 = module_0.Corpus()
    assert (
        f"{type(corpus_2).__module__}.{type(corpus_2).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_2.docids_by_tag).__module__}.{type(corpus_2.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_tag) == 0
    assert (
        f"{type(corpus_2.docids_by_property).__module__}.{type(corpus_2.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_by_property) == 0
    assert (
        f"{type(corpus_2.docids_with_property).__module__}.{type(corpus_2.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_2.docids_with_property) == 0
    assert corpus_2.documents_by_docid == {}


def test_case_14():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "\\9hl(G[>F"
    str_1 = "D("
    set_0 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "9X3"
    set_1 = corpus_0.get_docids_by_property(str_1, str_0)
    assert len(corpus_0.docids_by_property) == 1
    operation_0 = module_0.Operation.DISJUNCTION
    str_3 = "k73H\rI$.se\t"
    set_2 = corpus_0.get_docids_with_property(str_3)
    assert len(corpus_0.docids_with_property) == 1
    set_3 = corpus_0.invert_docid_set(set_0)
    node_0 = module_0.Node(corpus_0, operation_0, str_2)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.DISJUNCTION
    assert node_0.operands == "9X3"
    with pytest.raises(module_1.PyUtilsParseError):
        node_0.eval()


def test_case_15():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "~:H}kw=a[I2\x0bvzqU"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "D("
    set_0 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "93"
    str_3 = "F8P&qugaD.ld1:"
    set_1 = corpus_0.get_docids_by_property(str_1, str_0)
    assert len(corpus_0.docids_by_property) == 2
    str_4 = '{m]o"ja'
    str_5 = "2b,nnoS%JMjC'?"
    tuple_0 = (str_3, str_5)
    list_0 = [tuple_0, tuple_0, tuple_0]
    document_0 = module_0.Document(properties=list_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == [
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
    ]
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    set_2 = corpus_0.get_docids_by_searching_tags(corpus_0)
    set_3 = corpus_0.get_docids_by_searching_tags(str_5)
    str_6 = "`"
    var_1 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_tag) == 1
    var_2 = corpus_0.query(str_6)
    assert len(corpus_0.docids_by_tag) == 2
    str_7 = "NIU8fn<d5u\\\\V^X/#| 3"
    set_4 = corpus_0.get_docids_by_property(str_4, str_7)
    assert len(corpus_0.docids_by_property) == 3
    str_8 = 'p"0yO7XLn<'
    none_type_0 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_property) == 4
    assert len(corpus_0.docids_with_property) == 1
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    str_9 = "O\tBk}/|Q"
    var_3 = corpus_0.query(str_9)
    assert len(corpus_0.docids_by_tag) == 3
    var_4 = corpus_0.query(str_8)
    assert len(corpus_0.docids_by_tag) == 4


@pytest.mark.xfail(strict=True)
def test_case_16():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "~:H}kw=a[I2\x0bvzqU"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "D("
    set_0 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "9X3"
    str_3 = "F8P&qugaD.ld1:"
    set_1 = corpus_0.get_docids_by_property(str_1, str_0)
    assert len(corpus_0.docids_by_property) == 2
    str_4 = '{m]o"ja'
    str_5 = "2b,nnoS%JMjC'?"
    tuple_0 = (str_3, str_5)
    list_0 = [tuple_0, tuple_0, tuple_0]
    document_0 = module_0.Document(properties=list_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == [
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
    ]
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    set_2 = corpus_0.get_docids_by_searching_tags(corpus_0)
    set_3 = corpus_0.get_docids_by_searching_tags(str_5)
    str_6 = "`"
    var_1 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_tag) == 1
    var_2 = corpus_0.query(str_6)
    assert len(corpus_0.docids_by_tag) == 2
    str_7 = "NIU8fn<d5u\\\\V^X/#| 3"
    set_4 = corpus_0.get_docids_by_property(str_4, str_7)
    assert len(corpus_0.docids_by_property) == 3
    none_type_0 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_property) == 4
    assert len(corpus_0.docids_with_property) == 1
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    str_8 = '[VRNv"T@^'
    set_5 = {str_8}
    set_6 = corpus_0.invert_docid_set(set_5)
    var_3 = module_2.field(default=str_2, hash=none_type_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    corpus_0.query(var_2)


@pytest.mark.xfail(strict=True)
def test_case_17():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "~:H}kw=a[I2\x0bvzqU"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "D("
    set_0 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "9X3"
    str_3 = "F8P&qugaD.ld1:"
    set_1 = corpus_0.get_docids_by_property(str_1, str_0)
    assert len(corpus_0.docids_by_property) == 2
    str_4 = '{m]o"ja'
    str_5 = "2b,nnoS%JMjC'?"
    tuple_0 = (str_3, str_5)
    list_0 = [tuple_0, tuple_0, tuple_0]
    document_0 = module_0.Document(properties=list_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == [
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
        ("F8P&qugaD.ld1:", "2b,nnoS%JMjC'?"),
    ]
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    str_6 = "^"
    set_2 = corpus_0.get_docids_by_searching_tags(corpus_0)
    set_3 = corpus_0.get_docids_by_searching_tags(str_5)
    str_7 = "`"
    var_1 = corpus_0.query(str_6)
    assert len(corpus_0.docids_by_tag) == 1
    var_2 = corpus_0.query(str_7)
    assert len(corpus_0.docids_by_tag) == 2
    str_8 = "NIU8fn<d5u\\\\V^X/#| 3"
    set_4 = corpus_0.get_docids_by_property(str_4, str_8)
    assert len(corpus_0.docids_by_property) == 3
    none_type_0 = corpus_0.add_doc(document_0)
    assert len(corpus_0.docids_by_property) == 4
    assert len(corpus_0.docids_with_property) == 1
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    str_9 = '[VRNv"T@^'
    set_5 = {str_9}
    set_6 = corpus_0.invert_docid_set(set_5)
    set_7 = corpus_0.invert_docid_set(str_7)
    var_3 = module_2.field(default=str_2, hash=none_type_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_2.MISSING).__module__}.{type(module_2.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_2.KW_ONLY).__module__}.{type(module_2.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_2.Field.compare).__module__}.{type(module_2.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default).__module__}.{type(module_2.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.default_factory).__module__}.{type(module_2.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.hash).__module__}.{type(module_2.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.init).__module__}.{type(module_2.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.kw_only).__module__}.{type(module_2.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.metadata).__module__}.{type(module_2.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.name).__module__}.{type(module_2.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.repr).__module__}.{type(module_2.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_2.Field.type).__module__}.{type(module_2.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    corpus_0.query(var_2)
