# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    bool_0 = False
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = " 'jblsb$<_2`}K3qwX"
    bool_1 = False
    str_1 = binary_search_tree_0.repr_traverse(bool_0, str_0, none_type_0, bool_1)
    assert str_1 == ""
    node_0 = module_0.Node(bool_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is False
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    generator_0 = binary_search_tree_1.get_nodes_in_range_inclusive(var_0, var_0)
    var_1 = binary_search_tree_1.__getitem__(var_0)
    var_2 = binary_search_tree_1.__len__()
    assert var_2 == 0
    var_0.__contains__(var_2)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = None
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False
    str_0 = ""
    str_1 = binary_search_tree_0.repr_traverse(none_type_0, bool_0, none_type_0, str_0)
    assert str_1 == ""


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    str_0 = " )'^zBh"
    list_0 = binary_search_tree_0.parent_path(str_0)
    none_type_0 = None
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    binary_search_tree_0.repr_traverse(
        str_0, binary_search_tree_0, binary_search_tree_0, none_type_0
    )


def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_1.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "None"
    var_1.get_nodes_in_range_inclusive(var_1, var_1)


def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = 547
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(int_0)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0


def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    int_0 = 547
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    list_1 = binary_search_tree_0.parent_path(int_0)
    str_0 = "bst"
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, none_type_0, str_0)
    assert str_1 == ""
    var_1 = binary_search_tree_0.get_root()
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is True
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    list_0 = binary_search_tree_0.parent_path(bool_0)
    var_0 = binary_search_tree_0.get_root()
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    bool_2 = False
    str_0 = binary_search_tree_0.repr_traverse(none_type_0, var_0, none_type_0, bool_2)
    assert str_0 == ""
    var_1 = binary_search_tree_0.iterate_postorder()
    bool_3 = binary_search_tree_0.__contains__(var_1)
    assert bool_3 is False
    node_0 = module_0.Node(none_type_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    list_1 = binary_search_tree_0.parent_path(int_0)
    int_1 = binary_search_tree_0.height()
    assert int_1 == 0
    var_1 = binary_search_tree_0.get_root()
    str_0 = "bst"
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, var_0, int_0)
    assert str_1 == "\nbstbst"
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(list_0, str_0)
    str_2 = binary_search_tree_0.repr_traverse(int_1, str_0, var_1, bool_0)
    assert str_2 == ""
    bool_1 = binary_search_tree_0.__delitem__(int_1)
    assert bool_1 is False
    var_2 = binary_search_tree_0.iterate_inorder()
    var_3 = binary_search_tree_0.get_root()
    node_0 = module_0.Node(int_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    int_0 = 547
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    list_1 = binary_search_tree_0.parent_path(int_0)
    var_1 = binary_search_tree_0.get_root()
    str_0 = "bst"
    bool_1 = True
    str_1 = binary_search_tree_0.repr_traverse(var_0, str_0, var_1, bool_1)
    assert str_1 == ""
    bool_2 = binary_search_tree_0.__delitem__(int_0)
    assert bool_2 is False
    var_2 = binary_search_tree_0.iterate_postorder()
    str_2 = "&F$}{"
    bool_3 = binary_search_tree_0.__delitem__(var_2)
    assert bool_3 is False
    str_3 = binary_search_tree_0.repr_traverse(str_2, var_0, var_0, bool_2)
    var_2.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_0)
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    binary_search_tree_0.__getitem__(var_0)


def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    list_0 = []
    binary_search_tree_0.__delitem__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    binary_search_tree_0.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_1.value) == 1
    list_0 = binary_search_tree_0.parent_path(var_1)
    int_0 = 547
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_1.value) == 0
    list_1 = binary_search_tree_0.parent_path(int_0)
    int_2 = binary_search_tree_0.height()
    assert int_2 == 0
    var_2 = binary_search_tree_0.get_root()
    none_type_1 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    assert len(var_1.value) == 1
    binary_search_tree_0.parent_path(var_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    none_type_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert len(binary_search_tree_0) == 1
    var_0 = binary_search_tree_0.get_root()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "bst.Node"
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(var_0.value).__module__}.{type(var_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(var_0.value) == 1
    list_0 = binary_search_tree_0.iterate_inorder()
    int_0 = 547
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    assert len(var_0.value) == 0
    list_1 = binary_search_tree_0.parent_path(int_0)
    int_2 = binary_search_tree_0.height()
    assert int_2 == 0
    var_1 = binary_search_tree_0.get_root()
    str_0 = "bst"
    bool_1 = False
    str_1 = binary_search_tree_0.repr_traverse(int_2, str_0, var_1, bool_1)
    assert str_1 == ""
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    assert len(var_0.value) == 1
    var_2 = binary_search_tree_0.__getitem__(none_type_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value is None
    bytes_0 = b"\x1cc"
    binary_search_tree_0.__getitem__(bytes_0)
