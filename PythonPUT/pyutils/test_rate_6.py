# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x87\x96u\x99\xdd\x12\x93\x05\xf9\xc7pY&\xca\x97<\xa4Dw"
    none_type_0 = None
    int_0 = -950
    int_1 = 688
    rate_0 = module_0.Rate(percentage=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(6.88, abs=0.01, rel=0.01)
    var_0 = rate_0.__gt__(int_0)
    assert var_0 is True
    var_1 = var_0.__add__(none_type_0)
    var_1.of(bytes_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = bool_0.__le__(bool_0)
    assert var_0 is True
    var_0.of(rate_0)


def test_case_3():
    str_0 = 'XZmss\\@"fuU`wl?F, '
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percent_change=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "CJ .O?Bk|e5"
    int_0 = 2368
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == 2368
    var_0 = rate_0.__repr__()
    assert var_0 == "+236800.000%"
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True
    var_2 = rate_0.__float__()
    assert var_2 == 2368
    set_0 = set()
    var_3 = var_1.__gt__(str_0)
    var_4 = var_2.__eq__(set_0)
    var_5 = rate_0.__ge__(int_0)
    assert var_5 is True
    var_6 = var_5.__eq__(var_0)
    bytes_0 = b"\xdb\xb5*\xf6\xc23\xdeV\xc0M\xfa\x89t{6"
    var_0.__truediv__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__eq__(bool_0)
    assert var_0 is False
    var_1 = rate_0.apply_to(bool_0)
    assert var_1 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_2 = var_0.__float__()
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = var_1.__repr__()
    assert var_3 == "1.01"
    var_4 = rate_0.__ne__(var_2)
    assert var_4 is True
    var_5 = var_1.__gt__(rate_0)
    rate_1 = module_0.Rate(bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is True
    var_6 = rate_0.__le__(bool_0)
    assert var_6 is False
    none_type_0 = None
    var_3.__mul__(none_type_0)


def test_case_6():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    int_0 = -2413
    none_type_0 = None
    rate_0 = module_0.Rate(int_0, percentage=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2413
    var_0 = rate_0.of(bool_1)
    assert var_0 == pytest.approx(-0.0, abs=0.01, rel=0.01)
    var_1 = var_0.__mul__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__gt__(bool_0)
    assert var_0 is False
    rate_0.__lt__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__gt__(bool_0)
    assert var_0 is False
    none_type_0 = None
    rate_0.__truediv__(none_type_0)


def test_case_9():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__add__(bool_0)
    assert var_0 == pytest.approx(2.01, abs=0.01, rel=0.01)
    var_1 = var_0.__truediv__(bool_0)
    assert var_1 == pytest.approx(2.01, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__hash__()
    assert var_0 is False
    var_1 = var_0.__ne__(bool_0)
    assert var_1 is False
    none_type_0 = None
    rate_0.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    rate_0 = module_0.Rate(bool_0, percent_change=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__le__(bool_1)
    assert var_0 is True
    var_1 = rate_0.__add__(bool_1)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_0.__add__(none_type_0)
    var_3 = var_2.__ne__(none_type_0)
    var_3.apply_to(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    float_0 = -2722.6
    bool_0 = False
    bool_1 = True
    tuple_0 = (float_0, bool_0, bool_1)
    rate_0 = module_0.Rate(float_0, percent_change=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-2722.6, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(bool_0)
    assert var_0 == pytest.approx(-2722.6, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(float_0)
    assert var_1 is True
    var_1.apply_to(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = ".16'+sC"
    complex_0 = 585.3833 - 1450.555j
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"f"
    int_0 = 2
    bool_1 = True
    rate_0 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is False
    var_1 = rate_0.__repr__(relative=str_0)
    assert var_1 == "-99.000%"
    var_2 = complex_0.__eq__(bytes_0)
    var_3 = var_0.__float__()
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2.__repr__(relative=bool_0, places=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "oEW"
    none_type_0 = None
    int_0 = 0
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = rate_0.__repr__(relative=str_0)
    assert var_1 == "-99.000%"
    var_1.__sub__(none_type_0)
