# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import typing as module_1


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    none_type_0 = binary_search_tree_0.insert(node_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 1


def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__contains__(binary_search_tree_0)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    var_1 = var_0.__repr__()
    var_0.depth()


def test_case_4():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__delitem__(none_type_0)
    assert bool_0 is False


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_1.depth()
    assert int_0 == 0
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = '|((P!2("sIJ&aSOW/L.s'
    none_type_0 = None
    str_1 = binary_search_tree_0.repr_traverse(str_0, str_0, none_type_0, none_type_0)
    assert str_1 == ""
    var_0 = binary_search_tree_0.iterate_leaves()
    var_0.iterate_postorder()


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.iterate_preorder()


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    none_type_0 = binary_search_tree_0.insert(node_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    var_0 = binary_search_tree_0.iterate_postorder()
    binary_search_tree_0.parent_path(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__getitem__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    assert var_1.value == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 2
    bool_0 = var_0.__le__(binary_search_tree_0)
    var_2 = binary_search_tree_0.iterate_preorder()
    bool_1 = binary_search_tree_0.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 1
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "0\n└──0"
    var_3.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.iterate_leaves()
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.__repr__()
    bool_0 = var_1.__le__(none_type_0)
    var_1.__delitem__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is False
    bool_1 = binary_search_tree_0.__repr__()
    assert bool_1 == ""
    var_1 = binary_search_tree_0.iterate_postorder()
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    generic_0 = module_1.Generic(*var_1)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    var_1.iterate_leaves()


def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    node_0 = module_0.Node(binary_search_tree_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_0 = binary_search_tree_0.get_root()
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = var_0.__le__(var_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.__delitem__(var_0)
    assert bool_1 is True
    assert len(binary_search_tree_0) == 0
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == ""
    var_2 = binary_search_tree_0.iterate_inorder()
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0


def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    generic_0 = module_1.Generic()
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    int_1 = -3019
    bool_0 = binary_search_tree_0.__delitem__(int_1)
    assert bool_0 is False
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0"
    var_2 = generic_0.__repr__()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    with pytest.raises(AssertionError):
        binary_search_tree_1.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    bool_0 = True
    str_0 = binary_search_tree_0.repr_traverse(
        var_0, binary_search_tree_0, var_0, bool_0
    )
    assert str_0 == ""
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    var_2 = var_0.__repr__()
    assert var_2 == "None"
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_1 = var_1.__le__(var_1)
    assert bool_1 is True
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_1, var_1)
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "0"
    bool_2 = binary_search_tree_0.__contains__(int_0)
    assert bool_2 is False
    var_4 = var_2.__repr__()
    assert var_4 == "'None'"
    var_3.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is False
    bool_1 = binary_search_tree_0.__repr__()
    assert bool_1 == ""
    var_1 = binary_search_tree_0.iterate_nodes_by_depth(bool_1)
    list_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    generic_0 = module_1.Generic(*var_1)
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    var_0.__getitem__(bool_0)


def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = var_0.__le__(var_0)
    assert bool_0 is True
    node_0 = module_0.Node(var_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value == 0
    bool_1 = True
    bool_2 = var_0.__eq__(bool_1)
    assert bool_2 is False
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "''"
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    bool_0 = True
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, binary_search_tree_0, node_0, bool_0
    )
    assert str_1 == "\n''"
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    generic_0 = module_1.Generic()
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_1 = binary_search_tree_0.__delitem__(bool_0)
    assert bool_1 is False
    binary_search_tree_0.get_next_node(node_0)


def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_0 = var_0.__le__(var_0)
    assert bool_0 is True
    bool_1 = binary_search_tree_0.iterate_postorder()
    generator_0 = binary_search_tree_0.get_nodes_in_range_inclusive(var_0, var_0)
    bool_2 = binary_search_tree_0.__contains__(int_0)
    assert bool_2 is False
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is True
    bool_3 = var_0.__eq__(node_0)
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert var_1.value == 0
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_0 = binary_search_tree_0.get_root()
    var_1 = binary_search_tree_0.get_root()
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    none_type_0 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    var_3 = var_0.__repr__()
    assert var_3 == "None"
    int_1 = binary_search_tree_0.height()
    assert int_1 == 1
    bool_0 = binary_search_tree_0.__delitem__(int_1)
    assert bool_0 is False
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_1.parent_path(var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "''"
    var_0 = binary_search_tree_0.get_root()
    bool_0 = False
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, binary_search_tree_0, var_0, bool_0
    )
    assert str_1 == ""
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 1
    var_2 = var_0.__repr__()
    assert var_2 == "None"
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_1 = var_1.__le__(binary_search_tree_0)
    bool_2 = var_1.__repr__()
    assert bool_2 == "0"
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "0"
    var_4 = binary_search_tree_0.get_root()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "bst.Node"
    assert var_4.left is None
    assert var_4.right is None
    assert var_4.value == 0
    var_5 = binary_search_tree_0.get_next_node(var_4)
    var_3.__getitem__(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "''"
    var_0 = binary_search_tree_0.get_root()
    bool_0 = False
    var_1 = binary_search_tree_0.iterate_leaves()
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, binary_search_tree_0, var_0, bool_0
    )
    assert str_1 == ""
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    none_type_0 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    var_3 = binary_search_tree_0.__getitem__(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.value == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    module_1.Protocol(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    none_type_2 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 3
    var_1 = binary_search_tree_0.__getitem__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    assert var_1.value == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 3
    bool_0 = var_0.__le__(binary_search_tree_0)
    bool_1 = var_0.__le__(binary_search_tree_0)
    bool_2 = binary_search_tree_0.__delitem__(var_0)
    assert bool_2 is True
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "0\n└──0\n   └──0"
    var_0.iterate_leaves()


@pytest.mark.xfail(strict=True)
def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    str_0 = "''"
    node_0 = module_0.Node(binary_search_tree_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    bool_0 = True
    str_1 = binary_search_tree_0.repr_traverse(
        str_0, binary_search_tree_0, node_0, bool_0
    )
    assert str_1 == "\n''"
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    assert len(node_0.value) == 1
    generic_0 = module_1.Generic()
    assert (
        f"{type(generic_0).__module__}.{type(generic_0).__qualname__}"
        == "typing.Generic"
    )
    assert module_1.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_1.T).__module__}.{type(module_1.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.KT).__module__}.{type(module_1.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT).__module__}.{type(module_1.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_co).__module__}.{type(module_1.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.V_co).__module__}.{type(module_1.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.VT_co).__module__}.{type(module_1.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.T_contra).__module__}.{type(module_1.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.CT_co).__module__}.{type(module_1.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_1.AnyStr).__module__}.{type(module_1.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_1.TYPE_CHECKING is False
    int_0 = binary_search_tree_0.height()
    assert int_0 == 1
    bool_1 = var_0.__le__(binary_search_tree_0)
    bool_2 = binary_search_tree_0.__delitem__(int_0)
    assert bool_2 is False
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0"
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "0"
    int_1 = -882
    var_3 = binary_search_tree_0.__getitem__(int_1)
    var_2.get_nodes_in_range_inclusive(int_0, var_0)
