# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    int_0 = 1640
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(16.4, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(16.4, abs=0.01, rel=0.01)
    var_2 = rate_0.apply_to(var_1)
    assert var_2 == pytest.approx(268.96, abs=0.01, rel=0.01)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -308.197
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.Rate(percent_change=list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -5332
    list_0 = []
    rate_0 = module_0.Rate(list_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == []
    rate_0.__repr__(relative=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+100.000%"
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    bool_1 = False
    rate_0.__truediv__(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 1011
    float_0 = 1348.4058
    bool_0 = False
    bool_1 = False
    rate_0 = module_0.Rate(bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__eq__(bool_0)
    assert var_0 is True
    var_1 = bool_0.__gt__(float_0)
    var_2 = float_0.__truediv__(int_0)
    assert var_2 == pytest.approx(1.3337347181008903, abs=0.01, rel=0.01)
    var_3 = var_2.__le__(int_0)
    assert var_3 is True
    var_4 = var_0.__float__()
    assert var_4 == pytest.approx(1.0, abs=0.01, rel=0.01)
    bool_2 = False
    var_5 = var_0.__sub__(float_0)
    var_6 = float_0.__le__(bool_2)
    assert var_6 is False
    rate_0.__ge__(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    int_0 = 1011
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(bool_0)
    assert var_1 is True
    var_2 = var_0.__eq__(bool_0)
    assert var_2 is True
    var_3 = var_2.__lt__(var_2)
    assert var_3 is False
    var_4 = var_3.__ne__(int_0)
    assert var_4 is True
    var_5 = var_3.__lt__(var_2)
    assert var_5 is True
    var_6 = var_3.__hash__()
    assert var_6 == 0
    int_1 = 842
    var_7 = rate_0.__sub__(int_0)
    assert var_7 == pytest.approx(-1011.0, abs=0.01, rel=0.01)
    var_7.__repr__(relative=int_1)


def test_case_7():
    bool_0 = False
    int_0 = 1011
    float_0 = 1348.4058
    bytes_0 = b'\xee\xf9\x0eF9e\x90\x8fc"'
    bool_1 = False
    bool_2 = False
    rate_0 = module_0.Rate(bool_2)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__eq__(bool_1)
    assert var_0 is True
    var_1 = var_0.__truediv__(bytes_0)
    var_2 = var_1.__gt__(float_0)
    var_3 = float_0.__truediv__(int_0)
    assert var_3 == pytest.approx(1.3337347181008903, abs=0.01, rel=0.01)
    var_4 = var_3.__le__(int_0)
    assert var_4 is True
    var_5 = var_4.__sub__(bool_0)
    assert var_5 == 1
    bool_3 = False
    float_1 = -1427.532171
    rate_1 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-13.27532171, abs=0.01, rel=0.01)
    var_6 = rate_1.__ne__(bool_3)
    assert var_6 is True
    var_7 = var_6.__sub__(var_5)
    assert var_7 == 0
    var_8 = var_7.__repr__()
    assert var_8 == "0"
    var_9 = var_8.__repr__()
    assert var_9 == "'0'"


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "(H*R8# MBjU\r\tAbzP0"
    bool_0 = False
    set_0 = {bool_0, str_0}
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+100.000%"
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    bool_1 = True
    var_2 = rate_0.__truediv__(bool_1)
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    float_0 = 965.811792
    rate_1 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(10.65811792, abs=0.01, rel=0.01)
    var_3 = rate_1.__float__()
    assert var_3 == pytest.approx(10.65811792, abs=0.01, rel=0.01)
    rate_1.__add__(set_0)


def test_case_9():
    str_0 = '\tJS92w/*#"+S'
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "(H*R8# MBjU\r\tAbzP0"
    bool_0 = False
    set_0 = {bool_0, str_0}
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    rate_0.of(set_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "(H*R8# MBjU\r\tAbzP0"
    bool_0 = False
    set_0 = {bool_0, str_0}
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+100.000%"
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    bool_1 = True
    var_2 = rate_0.__truediv__(bool_1)
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    float_0 = 965.811792
    rate_1 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(10.65811792, abs=0.01, rel=0.01)
    var_3 = rate_1.__le__(var_2)
    assert var_3 is False
    var_4 = rate_1.__float__()
    assert var_4 == pytest.approx(10.65811792, abs=0.01, rel=0.01)
    rate_1.__add__(set_0)


def test_case_12():
    bool_0 = False
    int_0 = 1011
    bool_1 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(11.11, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(bool_0)
    assert var_0 is True
    var_1 = rate_0.__ge__(bool_1)
    assert var_1 is True
    var_2 = var_1.__eq__(var_0)
    assert var_2 is True
    var_3 = var_2.__lt__(var_2)
    assert var_3 is False
    var_4 = rate_0.__ne__(var_1)
    assert var_4 is True
    float_0 = 1348.4058
    rate_1 = module_0.Rate(percent_change=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.1111, abs=0.01, rel=0.01)
    var_5 = var_1.__eq__(var_0)
    assert var_5 is True
    var_6 = var_5.__truediv__(none_type_0)
    var_7 = var_3.__gt__(var_3)
    assert var_7 is False
    var_8 = rate_1.__lt__(var_0)
    assert var_8 is False
    var_9 = var_5.__le__(var_7)
    assert var_9 is False
    with pytest.raises(ValueError):
        module_0.Rate(var_5, percentage=float_0, percent_change=var_1)
