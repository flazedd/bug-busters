# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import money as module_0
import decimal as module_1
import re as module_2


def test_case_0():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    money_0 = module_0.Money(bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = money_0.__hash__()
    var_0 = money_0.__rsub__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_0.__ge__(bool_0)
    assert var_2 is True
    var_3 = var_2.__repr__()
    assert var_3 == "True"
    var_0.__truediv__(bool_0)


def test_case_2():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__mul__(money_0)


def test_case_3():
    bytes_0 = b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    none_type_0 = None
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__rsub__(none_type_0)


def test_case_4():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__le__(money_0)
    assert var_1 is True
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"


def test_case_5():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.round_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__ge__(money_0)
    assert var_1 is True
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_2 = var_1.__add__(var_0)
    var_3 = var_1.__neg__()
    assert var_3 == -1
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_4 = var_1.__repr__()
    assert var_4 == "True"


def test_case_6():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"


def test_case_7():
    none_type_0 = None
    money_0 = module_0.Money(strict_mode=none_type_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is None
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = money_0.__hash__()
    var_0 = money_0.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_1 = None
    with pytest.raises(TypeError):
        money_0.__mul__(none_type_1)


def test_case_8():
    int_0 = -194
    str_0 = "c2i\nY?^=H \t!/ehhLKH"
    money_0 = module_0.Money(int_0, str_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "c2i\nY?^=H \t!/ehhLKH"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_9():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__lt__(money_0)
    assert var_1 is False
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_2 = money_0.__ne__(var_0)
    assert var_2 is False


def test_case_10():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"


def test_case_11():
    bool_0 = False
    money_0 = module_0.Money(bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = money_0.__hash__()
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__rsub__(bool_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__sub__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_1.__ge__(bool_0)
    assert var_3 is True
    var_4 = var_3.__repr__()
    assert var_4 == "True"
    with pytest.raises(TypeError):
        var_1.__truediv__(var_0)


def test_case_12():
    bytes_0 = b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    none_type_0 = None
    var_1 = var_0.__ne__(none_type_0)
    with pytest.raises(TypeError):
        money_0.__gt__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False
    var_1 = money_0.__mul__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__ge__(money_0)
    assert var_2 is True
    var_3 = money_0.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = money_0.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_1.__repr__(var_4)


@pytest.mark.xfail(strict=True)
def test_case_14():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__lt__(money_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    assert var_2 == "False"
    money_0.__sub__(var_2)


def test_case_15():
    bytes_0 = b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_1.__ne__(money_1)
    assert var_0 is False
    with pytest.raises(TypeError):
        money_0.__sub__(var_0)


def test_case_16():
    bytes_0 = b"\\\xdb\xff\xd8+\x0c\xd4>\xd5\x17}\x87\x86x\xcf\xd2\xc9\xf1"
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert (
        money_0.strict_mode
        == b"\\\xdb\xff\xd8+\x0c\xd4>\xd5\x17}\x87\x86x\xcf\xd2\xc9\xf1"
    )
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__rsub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = module_2.purge()
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG


def test_case_17():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    money_0 = module_0.Money(currency=none_type_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency is None
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(none_type_0)
    assert var_0 is True
    none_type_1 = None
    bytes_0 = b";Xvd\xf7\xac\xb1rg\x17\x80\x14\xec\xdb\xf5\x9f1k"
    module_2.sub(bytes_0, none_type_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_0.__ne__(bytes_0)


def test_case_20():
    bytes_0 = b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    money_0 = module_0.Money(strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b'hZ\x854h\x83\xf2\x18->\x97\xf7|"\xf7,\xc8'
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    with pytest.raises(TypeError):
        money_0.__lt__(bytes_0)


def test_case_21():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )


def test_case_22():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    regex_flag_0 = module_2.RegexFlag.DEBUG
    var_0 = money_0.__add__(regex_flag_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__le__(regex_flag_0)
    assert var_2 is True
    var_3 = var_0.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_3.__repr__()
    assert var_4 == "-128.00 USD"
    var_5 = money_0.__add__(money_0)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_5.__rsub__(regex_flag_0)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_0.__float__()
    assert var_7 == pytest.approx(128.0, abs=0.01, rel=0.01)
    var_8 = money_0.__add__(var_2)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = money_0.__sub__(var_1)
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    var_10 = var_1.__sub__(var_8)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    var_11 = var_1.__repr__()
    assert var_11 == "0.00 USD"
    var_12 = money_0.round_fractional_cents()
    assert f"{type(var_12).__module__}.{type(var_12).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_13 = money_0.__mul__(var_12)
    assert f"{type(var_13).__module__}.{type(var_13).__qualname__}" == "money.Money"
    assert var_13.strict_mode is False
    assert (
        f"{type(var_13.amount).__module__}.{type(var_13.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_13.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_14 = money_0.__ge__(money_0)
    assert var_14 is True
    var_15 = var_8.__pos__()
    assert f"{type(var_15).__module__}.{type(var_15).__qualname__}" == "money.Money"
    assert var_15.strict_mode is False
    assert (
        f"{type(var_15.amount).__module__}.{type(var_15.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_15.currency == "USD"


def test_case_23():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__rsub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__le__(var_0)
    assert var_1 is True
    var_2 = money_0.truncate_fractional_cents()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_3 = money_0.__add__(money_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_4 = var_3.__rsub__(var_2)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = money_0.__add__(var_1)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = money_0.__sub__(var_0)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = money_0.__lt__(money_0)
    assert var_7 is False
    var_8 = var_0.__sub__(var_2)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = var_0.__repr__()
    assert var_9 == "0.00 USD"
    var_10 = money_0.round_fractional_cents()
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "decimal.Decimal"
    var_11 = money_0.__mul__(var_10)
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "money.Money"
    assert var_11.strict_mode is False
    assert (
        f"{type(var_11.amount).__module__}.{type(var_11.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_11.currency == "USD"
    var_12 = money_0.__ge__(money_0)
    assert var_12 is True


def test_case_24():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    money_1 = module_0.Money(currency=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_2 = money_0.__le__(var_0)
    assert var_2 is True
    var_3 = money_0.truncate_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_4 = money_0.__add__(money_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_5 = var_4.__rsub__(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = money_0.__sub__(var_1)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = money_0.__lt__(money_0)
    assert var_7 is False
    var_8 = var_1.__sub__(var_3)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = var_1.__repr__()
    assert var_9 == "0.00 USD"
    var_10 = var_8.__sub__(var_1)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    var_11 = money_0.round_fractional_cents()
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "decimal.Decimal"
    var_12 = money_0.__mul__(var_11)
    assert f"{type(var_12).__module__}.{type(var_12).__qualname__}" == "money.Money"
    assert var_12.strict_mode is False
    assert (
        f"{type(var_12.amount).__module__}.{type(var_12.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_12.currency == "USD"
    var_13 = money_1.__repr__()
    assert var_13 == "$0.00"


def test_case_25():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    money_1 = module_0.Money(currency=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_2 = money_0.__le__(var_0)
    assert var_2 is True
    var_3 = money_0.truncate_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_4 = money_0.__add__(money_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_5 = var_4.__rsub__(var_3)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = money_0.__sub__(var_1)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_4.__sub__(var_5)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    var_8 = var_1.__sub__(var_3)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = var_1.__repr__()
    assert var_9 == "0.00 USD"
    var_10 = var_8.__sub__(var_1)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    var_11 = money_0.round_fractional_cents()
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "decimal.Decimal"
    with pytest.raises(TypeError):
        money_1.__sub__(var_8)


@pytest.mark.xfail(strict=True)
def test_case_26():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    regex_flag_0 = module_2.RegexFlag.DEBUG
    var_0 = money_0.__add__(regex_flag_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_1 = money_0.__ne__(var_0)
    assert var_1 is True
    var_2 = money_0.__rsub__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_0.__le__(regex_flag_0)
    assert var_3 is True
    var_4 = var_0.__neg__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_4.__repr__()
    assert var_5 == "-128.00 USD"
    var_6 = money_0.truncate_fractional_cents()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_7 = money_0.__add__(money_0)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_8 = var_7.__rsub__(var_6)
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = money_0.__add__(var_3)
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    var_10 = money_0.__sub__(var_2)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    var_11 = money_0.__lt__(money_0)
    assert var_11 is False
    var_12 = money_0.round_fractional_cents()
    assert f"{type(var_12).__module__}.{type(var_12).__qualname__}" == "decimal.Decimal"
    var_13 = money_0.__mul__(var_12)
    assert f"{type(var_13).__module__}.{type(var_13).__qualname__}" == "money.Money"
    assert var_13.strict_mode is False
    assert (
        f"{type(var_13.amount).__module__}.{type(var_13.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_13.currency == "USD"
    set_0 = {var_7, var_6}
    var_14 = money_0.__add__(var_7)
    assert f"{type(var_14).__module__}.{type(var_14).__qualname__}" == "money.Money"
    assert var_14.strict_mode is False
    assert (
        f"{type(var_14.amount).__module__}.{type(var_14.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_14.currency == "USD"
    int_0 = regex_flag_0.__hash__()
    assert int_0 == 128
    money_0.__ge__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    regex_flag_0 = module_2.RegexFlag.DEBUG
    var_0 = money_0.__add__(regex_flag_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__le__(regex_flag_0)
    assert var_2 is True
    var_3 = var_0.__neg__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_3.__repr__()
    assert var_4 == "-128.00 USD"
    var_5 = module_2.RegexFlag.MULTILINE
    var_6 = money_0.__add__(money_0)
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_6.__rsub__(var_5)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    var_8 = var_1.__float__()
    assert var_8 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_9 = money_0.__sub__(var_1)
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    var_10 = money_0.__lt__(money_0)
    assert var_10 is False
    var_11 = var_1.__sub__(var_5)
    assert f"{type(var_11).__module__}.{type(var_11).__qualname__}" == "money.Money"
    assert var_11.strict_mode is False
    assert (
        f"{type(var_11.amount).__module__}.{type(var_11.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_11.currency == "USD"
    var_12 = var_1.__repr__()
    assert var_12 == "0.00 USD"
    var_13 = money_0.round_fractional_cents()
    assert f"{type(var_13).__module__}.{type(var_13).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_1.Decimal.real).__module__}.{type(module_1.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_1.Decimal.imag).__module__}.{type(module_1.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_14 = money_0.__mul__(var_13)
    assert f"{type(var_14).__module__}.{type(var_14).__qualname__}" == "money.Money"
    assert var_14.strict_mode is False
    assert (
        f"{type(var_14.amount).__module__}.{type(var_14.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_14.currency == "USD"
    assert (
        f"{type(module_1.DefaultContext).__module__}.{type(module_1.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.HAVE_CONTEXTVAR is True
    assert module_1.HAVE_THREADS is True
    assert (
        f"{type(module_1.BasicContext).__module__}.{type(module_1.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_1.ExtendedContext).__module__}.{type(module_1.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_1.MAX_PREC == 999999999999999999
    assert module_1.MAX_EMAX == 999999999999999999
    assert module_1.MIN_EMIN == -999999999999999999
    assert module_1.MIN_ETINY == -1999999999999999997
    assert module_1.ROUND_UP == "ROUND_UP"
    assert module_1.ROUND_DOWN == "ROUND_DOWN"
    assert module_1.ROUND_CEILING == "ROUND_CEILING"
    assert module_1.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_1.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_1.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_1.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_1.ROUND_05UP == "ROUND_05UP"
    var_15 = var_0.__ge__(var_6)
    assert var_15 is True
    set_0 = {var_6, var_5}
    var_16 = money_0.__add__(var_6)
    assert f"{type(var_16).__module__}.{type(var_16).__qualname__}" == "money.Money"
    assert var_16.strict_mode is False
    assert (
        f"{type(var_16.amount).__module__}.{type(var_16.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_16.currency == "USD"
    int_0 = regex_flag_0.__hash__()
    assert int_0 == 128
    money_0.__ge__(set_0)
