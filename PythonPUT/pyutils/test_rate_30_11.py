# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    int_0 = 130
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.3, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is False


def test_case_1():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(percent_change=none_type_0)


def test_case_2():
    int_0 = 130
    with pytest.raises(ValueError):
        module_0.Rate(int_0, percent_change=int_0)


def test_case_3():
    int_0 = -249
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-2.49, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = var_0.__repr__()
    assert var_1 == "True"
    var_2 = rate_0.__le__(var_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    int_0 = -1114
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-10.14, abs=0.01, rel=0.01)
    rate_0.apply_to(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    rate_0 = module_0.Rate(dict_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == {}
    rate_0.of(dict_0)


def test_case_6():
    int_0 = -249
    int_1 = 3233
    rate_0 = module_0.Rate(percentage=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(32.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(int_1)
    assert var_0 is True
    var_1 = rate_0.__ge__(int_0)
    assert var_1 is True
    var_2 = rate_0.__sub__(var_1)
    assert var_2 == pytest.approx(31.33, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"0)\x1d\x1cs\xab\xb3\xfe\xdf\xec\xc4\x16\xdf\n\xaem\xd7\x91"
    float_0 = -2195.516907
    rate_0 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-20.95516907, abs=0.01, rel=0.01)
    rate_0.__ne__(bytes_0)


def test_case_8():
    int_0 = 3788
    int_1 = 645
    rate_0 = module_0.Rate(percent_change=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(7.45, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(7.45, abs=0.01, rel=0.01)
    var_1 = var_0.__hash__()
    assert var_1 == 1037629354146162695
    var_2 = var_1.__repr__()
    assert var_2 == "1037629354146162695"
    var_3 = var_2.__le__(int_0)


def test_case_9():
    str_0 = "J8j7:/I"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


def test_case_10():
    int_0 = 3233
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(32.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+3233.000%"
    var_1 = rate_0.__le__(int_0)
    assert var_1 is True


def test_case_11():
    int_0 = -236
    int_1 = 3233
    rate_0 = module_0.Rate(percentage=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(32.33, abs=0.01, rel=0.01)
    var_0 = rate_0.of(rate_0)
    assert var_0 == pytest.approx(1045.2288999999998, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(int_0)
    assert var_1 is True
    var_2 = var_1.__repr__()
    assert var_2 == "True"
    var_3 = rate_0.__le__(int_1)
    assert var_3 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_1 = var_0.__gt__(bool_0)
    assert var_1 is True
    var_2 = var_1.__ne__(bool_0)
    assert var_2 is False
    var_3 = var_2.__sub__(bool_0)
    assert var_3 == -1
    var_4 = var_3.__eq__(bool_0)
    assert var_4 is False
    var_5 = var_4.__ne__(none_type_0)
    list_0 = []
    int_0 = 130
    rate_1 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_6 = rate_1.__add__(int_0)
    assert var_6 == pytest.approx(130.01, abs=0.01, rel=0.01)
    var_7 = var_6.__eq__(bool_0)
    assert var_7 is False
    bool_1 = True
    rate_2 = module_0.Rate(bool_1)
    assert f"{type(rate_2).__module__}.{type(rate_2).__qualname__}" == "rate.Rate"
    assert rate_2.multiplier is True
    var_8 = rate_2.__sub__(int_0)
    assert var_8 == pytest.approx(-129.0, abs=0.01, rel=0.01)
    var_9 = rate_2.__truediv__(bool_1)
    assert var_9 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_10 = var_8.__mul__(list_0)
    var_11 = rate_2.__float__()
    assert var_11 is True
    var_10.__float__()


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "T~g{#uCZ"
    int_0 = 3233
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(33.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(relative=str_0)
    assert var_0 == "+3233.000%"
    none_type_0 = None
    module_0.Rate(none_type_0, percentage=var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = -2195.516907
    int_0 = 130
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.3, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(float_0)
    assert var_0 is False
    var_1 = rate_0.__mul__(int_0)
    assert var_1 == pytest.approx(169.0, abs=0.01, rel=0.01)
    var_2 = rate_0.__le__(rate_0)
    assert var_2 is True
    var_2.apply_to(float_0)
