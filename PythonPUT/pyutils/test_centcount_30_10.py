# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import centcount as module_0
import re as module_1
import enum as module_2


def test_case_0():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_1 = cent_count_0.__ge__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__int__()
    assert var_2 == 0
    var_3 = cent_count_0.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = cent_count_0.__float__()
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    int_0 = cent_count_0.__hash__()
    none_type_0 = None
    var_5 = var_3.__add__(var_3)
    assert var_5 == "0.00 USD0.00 USD"
    var_6 = none_type_0.__ge__(var_3)
    with pytest.raises(TypeError):
        cent_count_0.__sub__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__lt__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_0.__eq__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__eq__(var_0)
    assert var_2 is True
    var_3 = cent_count_0.__lt__(var_1)
    assert var_3 is True
    var_4 = var_1.__sub__(var_0)
    assert var_4 == 1
    var_5 = cent_count_0.__mul__(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = var_5.__repr__()
    assert var_6 == "0.00 USD"
    var_7 = var_5.__repr__()
    assert var_7 == "0.00 USD"
    module_2.unique(var_6)


def test_case_3():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__ge__(var_0)
    assert var_1 is True


def test_case_4():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__int__()
    assert var_1 == 0
    var_2 = cent_count_0.__repr__()
    assert var_2 == "0.00 USD"
    var_3 = cent_count_0.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_3.__add__(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_5():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    dict_0 = {}
    module_0.CentCount(dict_0, strict_mode=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    module_1.fullmatch(var_0, var_0)


def test_case_7():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        cent_count_0.__truediv__(cent_count_0)


def test_case_8():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    dict_0 = {}
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    with pytest.raises(TypeError):
        var_1.__lt__(dict_0)


def test_case_9():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    dict_0 = {}
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__lt__(var_0)
    assert var_2 is False
    with pytest.raises(TypeError):
        var_0.__truediv__(dict_0)


def test_case_10():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False


def test_case_11():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = var_1.__neg__()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    float_0 = -424.1883
    var_3 = var_2.__lt__(cent_count_0)
    assert var_3 is False
    var_4 = cent_count_0.__ge__(float_0)
    assert var_4 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__pos__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__ne__(var_0)
    assert var_1 is False
    var_2 = cent_count_0.__lt__(cent_count_0)
    assert var_2 is False
    var_3 = cent_count_0.__eq__(cent_count_0)
    assert var_3 is True
    var_4 = cent_count_0.__lt__(var_3)
    assert var_4 is True
    var_5 = var_3.__int__()
    assert var_5 == 1
    var_6 = cent_count_0.__repr__()
    assert var_6 == "0.00 USD"
    var_7 = var_3.__gt__(var_4)
    assert var_7 is False
    int_0 = var_0.__hash__()
    var_8 = cent_count_0.__neg__()
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "centcount.CentCount"
    )
    assert var_8.strict_mode is False
    assert var_8.centcount == 0
    assert var_8.currency == "USD"
    var_9 = var_1.__ne__(var_3)
    assert var_9 is True
    var_10 = var_8.__add__(var_6)
    assert (
        f"{type(var_10).__module__}.{type(var_10).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_10.strict_mode is False
    assert var_10.centcount == 0
    assert var_10.currency == "USD"
    var_11 = cent_count_0.__ge__(var_5)
    assert var_11 is False
    var_3.__len__(var_10)


def test_case_13():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    with pytest.raises(TypeError):
        var_0.__mul__(var_0)


def test_case_14():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        cent_count_0.__mul__(cent_count_0)


def test_case_15():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__eq__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__ge__(var_0)
    assert var_2 is False


@pytest.mark.xfail(strict=True)
def test_case_16():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_0.__repr__(cent_count_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__eq__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    float_0 = -424.1883
    var_2 = cent_count_0.__ge__(float_0)
    assert var_2 is True
    var_2.__setitem__(var_1, var_2)


def test_case_18():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_19():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__eq__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 1
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__ge__(var_2)
    assert var_3 is False
    var_3.__repr__(cent_count_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__lt__(var_0)
    assert var_2 is False
    var_3 = var_1.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    none_type_0 = None
    var_4 = var_0.__add__(var_1)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = var_3.__repr__()
    assert var_5 == "0.00 USD"
    var_6 = module_0.CentCount(currency=none_type_0, strict_mode=var_3)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert (
        f"{type(var_6.strict_mode).__module__}.{type(var_6.strict_mode).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_6.centcount == 0
    assert var_6.currency is None
    module_2.unique(var_5)


@pytest.mark.xfail(strict=True)
def test_case_21():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_0.__int__()
    assert var_1 == 0
    var_2 = cent_count_0.__le__(var_1)
    assert var_2 is True
    var_3 = cent_count_0.__int__()
    assert var_3 == 0
    var_4 = cent_count_0.__ne__(var_1)
    assert var_4 is False
    var_5 = cent_count_0.__sub__(var_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = var_2.__repr__()
    assert var_6 == "True"
    var_7 = var_5.__neg__()
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "centcount.CentCount"
    )
    assert var_7.strict_mode is False
    assert var_7.centcount == 0
    assert var_7.currency == "USD"
    var_5.__add__(var_6)


@pytest.mark.xfail(strict=True)
def test_case_22():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__int__()
    assert var_1 == 0
    var_2 = cent_count_0.__le__(var_1)
    assert var_2 is True
    var_3 = cent_count_0.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = cent_count_0.__neg__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = var_4.__add__(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_4.__repr__(var_3)


def test_case_23():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__int__()
    assert var_0 == 0
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = cent_count_0.__add__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"


def test_case_24():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__pos__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__ne__(var_0)
    assert var_1 is False
    var_2 = cent_count_0.__lt__(cent_count_0)
    assert var_2 is False
    var_3 = module_0.CentCount(cent_count_0, var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency is None
    with pytest.raises(TypeError):
        cent_count_0.__lt__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__eq__(none_type_0)
    assert var_0 is False
    var_1 = var_0.__pos__()
    assert var_1 == 0
    module_1.fullmatch(none_type_0, none_type_0)


def test_case_26():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == -126871
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__int__()
    assert var_1 == 126871
    var_2 = var_1.__le__(cent_count_0)
    var_3 = cent_count_0.__lt__(var_0)
    assert var_3 is False
    with pytest.raises(TypeError):
        cent_count_0.__rsub__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_27():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__int__()
    assert var_0 == 0
    bool_0 = True
    var_1 = cent_count_0.__le__(bool_0)
    assert var_1 is True
    var_2 = var_1.__lt__(var_1)
    assert var_2 is False
    var_3 = var_2.__rsub__(var_2)
    assert var_3 == 0
    var_4 = var_2.__ne__(cent_count_0)
    var_5 = var_2.__repr__()
    assert var_5 == "False"
    var_6 = var_3.__neg__()
    assert var_6 == 0
    var_5.__float__()


def test_case_28():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == -126871
    assert var_0.currency == "USD"
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_1.__gt__(cent_count_1)
    assert var_1 is False
    var_2 = cent_count_1.__int__()
    assert var_2 == 0
    var_3 = var_0.__gt__(var_1)
    assert var_3 is False
    var_4 = cent_count_1.__le__(var_2)
    assert var_4 is True
    var_5 = cent_count_1.__lt__(var_4)
    assert var_5 is True
    var_6 = cent_count_1.__rsub__(cent_count_1)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == 0
    assert var_6.currency == "USD"
    var_7 = cent_count_1.__ne__(var_2)
    assert var_7 is False
    var_8 = var_4.__neg__()
    assert var_8 == -1
    var_9 = var_5.__float__()
    assert var_9 == pytest.approx(1.0, abs=0.01, rel=0.01)
    with pytest.raises(TypeError):
        cent_count_0.__add__(var_7)


def test_case_29():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    with pytest.raises(TypeError):
        cent_count_0.__gt__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == -126871
    assert var_0.currency == "USD"
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_1.__gt__(cent_count_1)
    assert var_1 is False
    var_2 = var_0.__gt__(var_1)
    assert var_2 is False
    var_3 = cent_count_1.__le__(var_2)
    assert var_3 is True
    var_4 = cent_count_1.__lt__(var_3)
    assert var_4 is True
    var_5 = cent_count_1.__rsub__(cent_count_1)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == 0
    assert var_5.currency == "USD"
    var_6 = cent_count_1.__int__()
    assert var_6 == 0
    var_7 = cent_count_1.__ne__(cent_count_1)
    assert var_7 is False
    var_8 = var_4.__add__(cent_count_1)
    cent_count_0.__ne__(var_6)


def test_case_31():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == -126871
    assert var_0.currency == "USD"
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_1.__gt__(cent_count_1)
    assert var_1 is False
    var_2 = var_0.__gt__(var_1)
    assert var_2 is False
    with pytest.raises(TypeError):
        cent_count_0.__sub__(var_1)


def test_case_32():
    float_0 = 1268.712
    cent_count_0 = module_0.CentCount(float_0, strict_mode=float_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == pytest.approx(1268.712, abs=0.01, rel=0.01)
    assert cent_count_0.centcount == 126871
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == -126871
    assert var_0.currency == "USD"
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_0.__le__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    with pytest.raises(TypeError):
        cent_count_0.__lt__(float_0)


def test_case_33():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__gt__(var_0)
    assert var_1 is False
    var_2 = cent_count_0.__int__()
    assert var_2 == 0
    var_3 = cent_count_0.__le__(var_2)
    assert var_3 is True
    var_4 = var_0.__pos__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__lt__(var_3)
    assert var_5 is True
    var_6 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == 0
    assert var_6.currency == "USD"
    var_7 = cent_count_0.__int__()
    assert var_7 == 0
    var_8 = var_5.__float__()
    assert var_8 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_9 = var_3.__repr__()
    assert var_9 == "True"
    var_10 = var_8.__pos__()
    assert var_10 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_11 = module_0.CentCount(var_1, var_7, strict_mode=var_1)
    assert (
        f"{type(var_11).__module__}.{type(var_11).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_11.strict_mode is False
    assert var_11.centcount is False
    assert var_11.currency is None
    var_12 = var_11.__ge__(var_3)
    assert var_12 is False
    var_13 = var_12.__add__(var_1)
    assert var_13 == 0
    with pytest.raises(TypeError):
        var_6.__add__(var_11)


def test_case_34():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__gt__(cent_count_0)
    assert var_1 is False
    var_2 = cent_count_0.__int__()
    assert var_2 == 0
    var_3 = module_0.CentCount(var_2, var_2, strict_mode=var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode == 0
    assert var_3.centcount == 0
    assert var_3.currency is None
    with pytest.raises(TypeError):
        var_0.__rsub__(var_3)
