# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import enum as module_1
import dataclasses as module_2
import __exceptions as module_3


def test_case_0():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )


def test_case_1():
    str_0 = "h"
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(str_0)


def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)


def test_case_3():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "y+\nV'3'mmb.tl[jY"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1


@pytest.mark.xfail(strict=True)
def test_case_4():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    set_0 = corpus_0.get_docids_with_property(none_type_0)
    assert len(corpus_0.docids_with_property) == 1
    set_1 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 2
    str_0 = "WXY(i\x0c3'D"
    var_0 = corpus_0.get_doc(str_0)
    corpus_0.add_doc(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_property(corpus_0, corpus_0)
    assert len(corpus_0.docids_by_property) == 1
    str_0 = ";n\x0c]pG?M\rL'#\tP^nR"
    str_1 = "logical_search"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    var_1 = corpus_0.get_doc(str_0)
    module_1.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    none_type_0 = None
    var_0 = corpus_0.get_doc(none_type_0)
    str_0 = "W\t5"
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_7():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_exact_tag(corpus_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_0 = "noA\rHu7\\<="
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 2
    corpus_0.get_docids_by_searching_tags(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "logical_seach"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    corpus_0.query(corpus_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_0 = "!s\x0c,"
    var_0 = corpus_1.query(str_0)
    assert len(corpus_1.docids_by_tag) == 1
    document_0 = module_0.Document(properties=var_0, reference=str_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == {*()}
    assert document_0.reference == "!s\x0c,"
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    corpus_1.get_docids_by_exact_tag(var_0)


def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "; n\x0c(pG?M\rL'#\tH^nR"
    var_0 = corpus_0.query(str_0)
    str_1 = "i8bQ"
    str_2 = "`T"
    var_1 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_tag) == 1
    str_3 = "Kq&s\x0b8bL[sFfF"
    set_1 = corpus_0.get_docids_by_property(str_1, str_3)
    assert len(corpus_0.docids_by_property) == 1
    str_4 = "loical_sear\nrc\rh"
    var_2 = corpus_0.query(str_4)
    assert len(corpus_0.docids_by_tag) == 2
    var_3 = corpus_0.get_doc(str_0)
    set_2 = corpus_0.get_docids_by_searching_tags(str_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    str_0 = "Z71qo!pg&6+G/^}:,Bp!"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "i8bQ"
    str_2 = "Kq&s\x0b8bL[sFfF"
    set_0 = corpus_0.get_docids_by_property(str_1, str_2)
    assert len(corpus_0.docids_by_property) == 2
    str_3 = "loical_sear\nrc\rh"
    var_1 = corpus_0.query(str_3)
    assert len(corpus_0.docids_by_tag) == 1
    document_0 = module_0.Document(str_3, var_1, reference=var_1)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == "loical_sear\nrc\rh"
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference == {*()}
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    str_0 = "Z71qo!pg&6+G/^}:,Bp!"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    str_1 = "i8bQ"
    str_2 = "Kq&s\x0b8bL[sFfF"
    set_1 = corpus_0.get_docids_by_property(str_1, str_2)
    assert len(corpus_0.docids_by_property) == 2
    str_3 = "loical_sear\nrc\rh"
    var_1 = corpus_0.query(str_3)
    assert len(corpus_0.docids_by_tag) == 1
    document_0 = module_0.Document(str_3, var_1, reference=set_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == "loical_sear\nrc\rh"
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference == {*()}
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    var_2 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 2
    set_2 = corpus_0.get_docids_by_searching_tags(str_1)
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    set_1 = corpus_0.get_docids_by_searching_tags(corpus_0)
    none_type_0 = None
    str_0 = "; n\x0c(pG?M\rL'#\tH^nR"
    var_0 = corpus_0.query(str_0)
    dict_0 = {str_0: str_0}
    node_0 = module_0.Node(corpus_0, str_0, dict_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == "; n\x0c(pG?M\rL'#\tH^nR"
    assert node_0.operands == {"; n\x0c(pG?M\rL'#\tH^nR": "; n\x0c(pG?M\rL'#\tH^nR"}
    str_1 = "\nX\\'O/\"gyO{)\t?"
    var_1 = corpus_0.query(str_0)
    set_2 = corpus_0.get_docids_by_property(str_1, str_1)
    assert len(corpus_0.docids_by_property) == 1
    set_3 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    var_2 = corpus_0.query(str_1)
    set_4 = corpus_0.get_docids_by_searching_tags(str_1)
    str_2 = "D<S{a|{>,"
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    set_5 = node_0.eval()
    set_6 = corpus_1.get_docids_by_property(str_1, str_2)
    assert len(corpus_1.docids_by_property) == 1
    module_2.dataclass(str_0, frozen=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    set_1 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "; n\x0c(pG?M\rL'#\tH^nR"
    var_0 = corpus_0.query(str_0)
    str_1 = "\nX\\'O/\"gyO{)\t?"
    str_2 = "`\n"
    var_1 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_tag) == 1
    set_2 = corpus_0.get_docids_by_property(str_1, str_1)
    assert len(corpus_0.docids_by_property) == 1
    set_3 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    var_2 = corpus_0.get_doc(str_0)
    var_3 = corpus_0.query(str_1)
    set_4 = corpus_0.get_docids_by_searching_tags(str_1)
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    str_3 = "#7yd\nL6"
    set_5 = corpus_0.get_docids_by_property(str_3, str_1)
    assert len(corpus_0.docids_by_property) == 2
    corpus_0.get_docids_by_exact_tag(set_1)


def test_case_15():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    set_1 = corpus_0.get_docids_by_searching_tags(corpus_0)
    none_type_0 = None
    str_0 = "; n\x0c(pG?M\rL'#\tH^nR"
    var_0 = corpus_0.query(str_0)
    dict_0 = {var_0: none_type_0, str_0: str_0}
    node_0 = module_0.Node(corpus_0, str_0, dict_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == "; n\x0c(pG?M\rL'#\tH^nR"
    assert node_0.operands == {
        None: None,
        "; n\x0c(pG?M\rL'#\tH^nR": "; n\x0c(pG?M\rL'#\tH^nR",
    }
    str_1 = "i8bQ"
    str_2 = "`\n"
    var_1 = corpus_0.query(str_2)
    assert len(corpus_0.docids_by_tag) == 1
    set_2 = corpus_0.get_docids_by_property(str_1, str_1)
    assert len(corpus_0.docids_by_property) == 1
    set_3 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    var_2 = corpus_0.get_doc(str_0)
    var_3 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 2
    set_4 = corpus_0.get_docids_by_searching_tags(str_1)
    with pytest.raises(module_3.PyUtilsParseError):
        node_0.eval()


@pytest.mark.xfail(strict=True)
def test_case_16():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)
    set_1 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "; n\x0c(pG?M\rL'#\tH^nR"
    none_type_0 = None
    var_0 = corpus_0.query(str_0)
    dict_0 = {str_0: str_0}
    node_0 = module_0.Node(corpus_0, str_0, dict_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == "; n\x0c(pG?M\rL'#\tH^nR"
    assert node_0.operands == {"; n\x0c(pG?M\rL'#\tH^nR": "; n\x0c(pG?M\rL'#\tH^nR"}
    str_1 = "*"
    var_1 = corpus_0.query(str_1)
    set_2 = corpus_0.get_docids_by_property(str_1, str_1)
    assert len(corpus_0.docids_by_property) == 1
    module_2.dataclass(
        corpus_0,
        init=str_0,
        eq=set_1,
        unsafe_hash=none_type_0,
        frozen=set_1,
        match_args=none_type_0,
        kw_only=str_0,
    )
