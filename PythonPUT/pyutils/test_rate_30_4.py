# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = -183.631165 + 1908.9j
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=complex_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == (-1.83631165 + 19.089000000000002j)
    rate_0.__mul__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.Rate(percent_change=dict_0)


def test_case_2():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"`Y\xf7]zw\xe8\xd7\x8b\xc1\xde\xb8\xc3"
    complex_0 = -258.97773 + 1843.132j
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__add__(bool_0)
    assert var_0 == pytest.approx(2.0, abs=0.01, rel=0.01)
    complex_0.of(bytes_0)


def test_case_4():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    float_0 = -3976.431
    rate_1 = module_0.Rate(float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-3976.431, abs=0.01, rel=0.01)
    var_0 = rate_1.of(rate_1)
    assert var_0 == pytest.approx(15812003.497761, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is False
    var_2 = rate_1.__ne__(float_0)
    assert var_2 is False
    var_3 = var_2.__eq__(float_0)
    var_4 = rate_0.__repr__(relative=var_0)
    assert var_4 == "+0.000%"
    var_5 = rate_1.__add__(rate_1)
    assert var_5 == pytest.approx(-7952.862, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_5():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    float_0 = -3976.431
    rate_1 = module_0.Rate(float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-3976.431, abs=0.01, rel=0.01)
    var_0 = rate_1.of(rate_1)
    assert var_0 == pytest.approx(15812003.497761, abs=0.01, rel=0.01)
    var_1 = rate_1.__ne__(rate_1)
    assert var_1 is False
    var_2 = var_0.__add__(float_0)
    assert var_2 == pytest.approx(15808027.066761, abs=0.01, rel=0.01)
    var_3 = rate_1.__ne__(float_0)
    assert var_3 is False
    var_4 = var_3.__eq__(float_0)
    var_5 = rate_0.__repr__(relative=var_0)
    assert var_5 == "-100.000%"
    var_6 = rate_1.__add__(rate_1)
    assert var_6 == pytest.approx(-7952.862, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = -3976.431
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-3976.431, abs=0.01, rel=0.01)
    var_0 = rate_0.of(rate_0)
    assert var_0 == pytest.approx(15812003.497761, abs=0.01, rel=0.01)
    var_1 = rate_0.__ne__(rate_0)
    assert var_1 is False
    var_2 = rate_0.__le__(var_0)
    assert var_2 is True
    var_3 = var_0.__float__()
    assert var_3 == pytest.approx(15812003.497761, abs=0.01, rel=0.01)
    var_4 = rate_0.apply_to(var_0)
    assert var_4 == pytest.approx(-62875340880.60527, abs=0.01, rel=0.01)
    var_5 = var_3.__hash__()
    assert var_5 == 1147758722004632995
    var_3.of(float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(rate_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    none_type_0 = None
    rate_0.__sub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b",\xb7\x88\xeb\x0brn\xf7\xd4\xef-"
    float_0 = -3108.12
    tuple_0 = (bytes_0, float_0, bytes_0)
    rate_0 = module_0.Rate(tuple_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_0.multiplier).__module__}.{type(rate_0.multiplier).__qualname__}"
        == "builtins.tuple"
    )
    assert len(rate_0.multiplier) == 3
    bool_0 = True
    var_0 = rate_0.__ne__(bool_0)
    assert var_0 is True
    var_0.apply_to(float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    float_0 = -3976.431
    rate_1 = module_0.Rate(float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-3976.431, abs=0.01, rel=0.01)
    var_0 = rate_1.of(rate_1)
    assert var_0 == pytest.approx(15812003.497761, abs=0.01, rel=0.01)
    var_1 = rate_1.__ne__(rate_1)
    assert var_1 is False
    var_2 = var_0.__add__(float_0)
    assert var_2 == pytest.approx(15808027.066761, abs=0.01, rel=0.01)
    var_3 = rate_1.__truediv__(float_0)
    assert var_3 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = var_1.__mul__(var_3)
    var_5 = var_2.__eq__(var_4)
    var_6 = var_3.__ge__(var_2)
    assert var_6 is False
    rate_1.__truediv__(var_1)


def test_case_10():
    int_0 = 782
    str_0 = "u!@;=7VngQ"
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percentage=int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    float_0 = -3976.431
    rate_1 = rate_0.__hash__()
    assert rate_1 is False
    var_0 = rate_0.__ge__(float_0)
    assert var_0 is True
    var_1 = rate_1.__ne__(rate_1)
    assert var_1 is False
    var_2 = rate_1.__truediv__(var_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = rate_1.__ne__(var_0)
    assert var_3 is True
    var_4 = rate_0.__le__(var_1)
    assert var_4 is True
    var_5 = rate_1.__eq__(var_1)
    assert var_5 is True
    var_6 = var_3.__repr__()
    assert var_6 == "True"
    var_7 = var_3.__le__(var_4)
    assert var_7 is True
    var_2.apply_to(var_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    var_0 = rate_0.__hash__()
    assert var_0 is True
    var_0.of(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    rate_0.__repr__(places=rate_0)
