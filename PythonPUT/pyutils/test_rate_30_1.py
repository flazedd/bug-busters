# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.Rate(bool_0, percentage=bool_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(percentage=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(bool_0)
    assert var_0 is True
    var_0.apply_to(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = 1004.0
    rate_0 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(11.04, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(rate_0)
    assert var_0 == pytest.approx(121.88159999999998, abs=0.01, rel=0.01)
    var_1 = rate_0.__hash__()
    assert var_1 == pytest.approx(11.04, abs=0.01, rel=0.01)
    rate_0.__repr__(relative=float_0, places=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 1953.3
    int_0 = -385
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-2.85, abs=0.01, rel=0.01)
    rate_0.__repr__(places=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    float_0 = 3496.35992
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.35992, abs=0.01, rel=0.01)
    rate_0.apply_to(dict_0)


def test_case_6():
    float_0 = 3496.35992
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.35992, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(3496.35992, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True


def test_case_7():
    float_0 = 3496.35992
    int_0 = 1727
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.35992, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(int_0)
    assert var_0 == pytest.approx(6038213.58184, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True


def test_case_8():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(bool_0)
    assert var_0 is True
    var_1 = rate_0.of(bool_0)
    assert var_1 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_2 = var_1.__truediv__(none_type_0)
    var_3 = var_0.__add__(none_type_0)
    var_4 = var_1.__eq__(var_1)
    assert var_4 is True
    var_5 = var_3.__eq__(var_3)
    assert var_5 is True
    var_6 = var_4.__truediv__(var_1)
    rate_1 = module_0.Rate(var_3)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_1.multiplier).__module__}.{type(rate_1.multiplier).__qualname__}"
        == "builtins.NotImplementedType"
    )
    var_7 = var_4.__gt__(var_2)
    bool_1 = False
    var_8 = rate_0.__add__(rate_0)
    assert var_8 == pytest.approx(2.02, abs=0.01, rel=0.01)
    var_9 = var_8.__lt__(bool_1)
    assert var_9 is False


def test_case_9():
    str_0 = "+s{*Q5.w7 "
    none_type_0 = None
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percent_change=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(bool_0)
    assert var_0 is True
    var_1 = rate_0.of(bool_0)
    assert var_1 == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_2 = var_1.__truediv__(none_type_0)
    var_3 = var_0.__add__(none_type_0)
    var_4 = var_3.__eq__(var_3)
    assert var_4 is True
    rate_1 = module_0.Rate(var_3)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_1.multiplier).__module__}.{type(rate_1.multiplier).__qualname__}"
        == "builtins.NotImplementedType"
    )
    var_5 = bool_0.__gt__(var_2)
    rate_1.__le__(var_2)


def test_case_11():
    float_0 = 3496.227157484937
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.227157484937, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(float_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(rate_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    float_0 = 3496.35992
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.35992, abs=0.01, rel=0.01)
    rate_0.__sub__(none_type_0)


def test_case_13():
    float_0 = 3496.4
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(3496.4, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(3496.4, abs=0.01, rel=0.01)
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True
    dict_0 = {var_1: var_1}
    var_2 = var_0.__ge__(var_0)
    assert var_2 is True
    var_3 = var_1.__ge__(var_0)
    var_4 = var_1.__repr__()
    assert var_4 == "True"
    var_5 = var_4.__lt__(dict_0)
    var_6 = var_1.__mul__(var_4)
    var_7 = var_6.__ne__(dict_0)
    var_8 = rate_0.__ge__(var_0)
    assert var_8 is True
