# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import centcount as module_0
import enum as module_1
import re as module_2


def test_case_0():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    bool_0 = False
    var_0 = cent_count_0.__add__(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    cent_count_0 = module_0.CentCount(strict_mode=none_type_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is None
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_1.__truediv__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__sub__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == -1
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__le__(var_0)
    assert var_3 is True
    module_1.EnumMeta()


def test_case_3():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 234.776966
    str_0 = "centcount"
    cent_count_0 = module_0.CentCount(float_0, str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 23477
    assert cent_count_0.currency == "centcount"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_0.__le__(var_0)
    assert var_1 is False
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    none_type_0 = None
    cent_count_0 = module_0.CentCount(strict_mode=none_type_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is None
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount(bool_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount is True
    assert cent_count_1.currency == "USD"
    cent_count_2 = module_0.CentCount()
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode is False
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "USD"
    var_1 = cent_count_0.__le__(var_0)
    assert var_1 is True
    module_1.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "EAC"
    var_2 = cent_count_0.__repr__()
    assert var_2 == "0.00 EAC"
    var_3 = cent_count_0.__add__(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "EAC"
    var_2.__delattr__(var_1, var_2)


def test_case_7():
    str_0 = ")!q(Iz4kMya8g"
    cent_count_0 = module_0.CentCount(strict_mode=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == ")!q(Iz4kMya8g"
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    tuple_0 = ()
    with pytest.raises(TypeError):
        cent_count_0.__add__(tuple_0)


def test_case_8():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EAC"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 EAC"
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


def test_case_9():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        cent_count_0.__truediv__(cent_count_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = module_2.purge()
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_1 = cent_count_0.__eq__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__gt__(cent_count_0)
    assert var_2 is False
    var_0.__truediv__(var_0)


def test_case_11():
    none_type_0 = None
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__ne__(none_type_0)
    assert var_1 is True


def test_case_12():
    float_0 = 235.41831352235667
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    bool_0 = False
    var_0 = cent_count_0.__sub__(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EAC"
    var_1 = float_0.__le__(str_0)
    var_2 = cent_count_0.__eq__(cent_count_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_0.__sub__(str_0)


def test_case_14():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    cent_count_0 = module_0.CentCount(strict_mode=none_type_1)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is None
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 1
    assert var_0.currency == "USD"
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "Cgb~o!E`\\G&M+,hk\\"
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False
    cent_count_1 = cent_count_0.__ne__(var_0)
    assert cent_count_1 is False
    var_1 = cent_count_0.__sub__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    module_2.split(cent_count_1, str_0, flags=cent_count_0)


def test_case_16():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    none_type_0 = None
    with pytest.raises(TypeError):
        cent_count_0.__sub__(none_type_0)


def test_case_17():
    str_0 = ")!qI.zkMya8g"
    cent_count_0 = module_0.CentCount(strict_mode=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == ")!qI.zkMya8g"
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    tuple_0 = ()
    with pytest.raises(TypeError):
        cent_count_0.__sub__(tuple_0)


def test_case_18():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EAC"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 EAC"
    var_2 = cent_count_0.__add__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "EAC"
    var_3 = var_2.__int__()
    assert var_3 == 0
    with pytest.raises(AttributeError):
        var_3.__getattr__(var_2, var_2)


def test_case_19():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False
    cent_count_1 = module_0.CentCount(currency=var_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency is None
    none_type_0 = None
    with pytest.raises(TypeError):
        cent_count_0.__sub__(none_type_0)


def test_case_20():
    str_0 = "EAZ"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAZ"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        cent_count_0.__mul__(cent_count_0)


def test_case_21():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = 864
    var_0 = cent_count_0.__gt__(int_0)
    assert var_0 is False
    var_1 = cent_count_0.__ne__(cent_count_0)
    assert var_1 is False
    var_2 = module_2.purge()
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    cent_count_0 = module_0.CentCount(strict_mode=bool_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is True
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_0.__ne__(bool_0)


def test_case_23():
    str_0 = "EAC"
    with pytest.raises(ValueError):
        module_0.CentCount(str_0, str_0, strict_mode=str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount(currency=var_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency is True
    cent_count_2 = module_0.CentCount(var_0)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode is False
    assert cent_count_2.centcount is True
    assert cent_count_2.currency == "USD"
    var_1 = var_0.__repr__()
    assert var_1 == "True"
    var_2 = cent_count_2.__neg__()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == -1
    assert var_2.currency == "USD"
    var_3 = var_2.__ne__(var_0)
    assert var_3 is True
    cent_count_3 = module_0.CentCount(var_0, cent_count_2, strict_mode=var_2)
    assert (
        f"{type(cent_count_3).__module__}.{type(cent_count_3).__qualname__}"
        == "centcount.CentCount"
    )
    assert (
        f"{type(cent_count_3.strict_mode).__module__}.{type(cent_count_3.strict_mode).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_3.centcount is True
    assert (
        f"{type(cent_count_3.currency).__module__}.{type(cent_count_3.currency).__qualname__}"
        == "centcount.CentCount"
    )
    module_2.compile(var_2)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "EAhC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAhC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__lt__(cent_count_0)
    assert var_0 is False
    none_type_0 = None
    var_1 = cent_count_0.__sub__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "EAhC"
    module_2.split(none_type_0, var_1)


def test_case_26():
    bool_0 = True
    str_0 = "centcount"
    cent_count_0 = module_0.CentCount(strict_mode=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == "centcount"
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        cent_count_0.__gt__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "$"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "$"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_0.__sub__(str_0)


def test_case_28():
    float_0 = 237.3883482593665
    str_0 = "centcount"
    cent_count_0 = module_0.CentCount(float_0, str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 23738
    assert cent_count_0.currency == "centcount"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(cent_count_0)
    assert var_0 is False
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    with pytest.raises(TypeError):
        cent_count_0.__sub__(cent_count_1)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EAC"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 EAC"
    var_0.__mul__(var_1)


def test_case_30():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EAC"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 EAC"
    var_2 = cent_count_0.__add__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "EAC"
    var_3 = var_0.__pos__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "EAC"
    var_4 = var_1.__ne__(var_1)
    assert var_4 is False
    cent_count_1 = module_0.CentCount(strict_mode=var_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert (
        f"{type(cent_count_1.strict_mode).__module__}.{type(cent_count_1.strict_mode).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_31():
    float_0 = 235.41831352235667
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(float_0)
    assert var_0 is True
    bool_0 = True
    none_type_0 = None
    var_1 = cent_count_0.__sub__(bool_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == -1
    assert var_1.currency == "EAC"
    var_2 = cent_count_0.__mul__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "EAC"
    var_3 = cent_count_0.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "EAC"
    var_4 = var_1.__ne__(var_2)
    assert var_4 is True
    var_1.__le__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    float_0 = -2422.33
    var_1 = cent_count_0.__ge__(float_0)
    assert var_1 is True
    var_2 = cent_count_0.__le__(var_0)
    assert var_2 is True
    var_3 = var_1.__add__(var_1)
    assert var_3 == 2
    var_4 = var_0.__repr__()
    assert var_4 == "True"
    cent_count_0.__truediv__(var_4)


def test_case_33():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 1
    assert var_2.currency == "EAC"
    var_3 = module_0.CentCount(currency=var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency is True
    with pytest.raises(TypeError):
        cent_count_0.__lt__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    cent_count_0 = module_0.CentCount(currency=none_type_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency is None
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 1
    assert var_2.currency is None
    var_3 = cent_count_0.__lt__(var_1)
    assert var_3 is True
    var_4 = cent_count_0.__rsub__(var_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 1
    assert var_4.currency is None
    var_5 = var_4.__lt__(var_1)
    assert var_5 is False
    var_6 = cent_count_0.__repr__()
    assert var_6 == "$0.00"
    module_2.search(var_5, cent_count_0, var_5)


def test_case_35():
    str_0 = ")!qI.zkMya8g"
    cent_count_0 = module_0.CentCount(strict_mode=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == ")!qI.zkMya8g"
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_0 = True
    cent_count_1 = module_0.CentCount(bool_0, none_type_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount is True
    assert cent_count_1.currency is None
    with pytest.raises(TypeError):
        cent_count_0.__lt__(bool_0)


def test_case_36():
    str_0 = "EA"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EA"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "EA"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 EA"
    with pytest.raises(TypeError):
        cent_count_0.__add__(var_1)


def test_case_37():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 1
    assert var_1.currency == "EAC"
    var_2 = var_1.__rsub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "EAC"
    cent_count_1 = module_0.CentCount(var_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount is True
    assert cent_count_1.currency == "USD"
    with pytest.raises(TypeError):
        var_1.__gt__(cent_count_1)


def test_case_38():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(strict_mode=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode == "EAC"
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    int_0 = 1029
    var_1 = var_0.__add__(int_0)
    assert var_1 == 1030
    var_2 = cent_count_0.__truediv__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    with pytest.raises(TypeError):
        cent_count_0.__rsub__(var_0)


def test_case_39():
    str_0 = "EAC"
    cent_count_0 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "EAC"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ge__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__truediv__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "EAC"
    var_2 = cent_count_0.__rsub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "EAC"
    var_3 = var_2.__le__(cent_count_0)
    assert var_3 is True
    var_4 = var_1.__pos__()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "EAC"
    var_5 = var_2.__ne__(cent_count_0)
    assert var_5 is False
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    with pytest.raises(TypeError):
        var_2.__rsub__(cent_count_1)
