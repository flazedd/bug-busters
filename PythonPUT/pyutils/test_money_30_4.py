# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import money as module_0
import re as module_1
import decimal as module_2


def test_case_0():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"


def test_case_2():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"


def test_case_3():
    int_0 = 3658
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3658
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"


def test_case_4():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    error_0 = module_1.error(var_1, var_1)
    assert f"{type(error_0).__module__}.{type(error_0).__qualname__}" == "re.error"
    assert (
        f"{type(error_0.msg).__module__}.{type(error_0.msg).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(error_0.pattern).__module__}.{type(error_0.pattern).__qualname__}"
        == "money.Money"
    )
    assert error_0.pos is None
    assert error_0.lineno is None
    assert error_0.colno is None
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_2 = money_0.__le__(money_0)
    assert var_2 is True
    var_3 = var_2.__ge__(error_0)
    var_4 = var_0.truncate_fractional_cents()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_5 = money_0.__gt__(var_4)
    assert var_5 is False
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_6 = money_0.__le__(money_0)
    assert var_6 is True
    var_7 = var_0.__mul__(var_5)
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    with pytest.raises(TypeError):
        money_0.__mul__(money_0)


def test_case_5():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"


def test_case_6():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    var_2 = money_0.__le__(var_0)
    assert var_2 is True
    money_1 = module_0.Money(strict_mode=var_2)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is True
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_7():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_0.__gt__(var_0)


def test_case_8():
    money_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_0 = money_0.__repr__()
    assert var_0 == "None"
    with pytest.raises(ValueError):
        module_0.Money(var_0, var_0)


def test_case_9():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.truncate_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_2 = money_0.__le__(var_1)
    assert var_2 is True
    money_1 = module_0.Money(strict_mode=var_2)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is True
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_10():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    module_1.finditer(var_0, var_0, money_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    money_0.__ne__(var_1)


def test_case_12():
    int_0 = 3128
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3128
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    complex_0 = -1618 + 2874.924j
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    with pytest.raises(TypeError):
        money_0.__mul__(complex_0)


def test_case_13():
    int_0 = 3128
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3128
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__lt__(int_0)


def test_case_14():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    money_1 = module_0.Money(var_1, var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = money_1.__eq__(money_1)
    assert var_2 is True
    var_3 = var_2.__le__(var_2)
    assert var_3 is True
    var_4 = money_0.__le__(var_3)
    assert var_4 is True
    money_2 = module_0.Money(currency=var_3)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency is True


def test_case_15():
    int_0 = 3128
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3128
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__add__(int_0)


def test_case_16():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__eq__(money_1)
    assert var_1 is True
    var_2 = var_1.__le__(var_1)
    assert var_2 is True
    var_3 = money_1.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = money_0.__le__(var_2)
    assert var_4 is True
    var_5 = money_0.__ge__(var_4)
    assert var_5 is False
    list_0 = [var_2, var_1, var_3]
    var_6 = var_2.__lt__(list_0)
    money_2 = module_0.Money(currency=var_5)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency is None
    with pytest.raises(TypeError):
        money_1.__truediv__(money_2)


def test_case_17():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__gt__(money_0)
    assert var_0 is False
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_1 = money_1.__repr__()
    assert var_1 == "$0.00"


@pytest.mark.xfail(strict=True)
def test_case_18():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_1 = module_0.Money(money_0, money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_1.currency).__module__}.{type(money_1.currency).__qualname__}"
        == "money.Money"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_0.__len__(var_0)


def test_case_19():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_1.__eq__(money_1)
    assert var_1 is True
    var_2 = var_1.__le__(var_1)
    assert var_2 is True
    var_3 = money_1.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = money_0.__le__(var_2)
    assert var_4 is True
    var_5 = money_0.__ge__(var_4)
    assert var_5 is False
    list_0 = [var_2, var_1, var_3]
    var_6 = var_2.__lt__(list_0)
    with pytest.raises(TypeError):
        money_0.__add__(var_6)


def test_case_20():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_0.Money()
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    none_type_0 = None
    with pytest.raises(TypeError):
        money_0.__sub__(none_type_0)


def test_case_21():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0 = money_0.__ne__(none_type_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 3128
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3128
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_0.__ne__(int_0)


def test_case_23():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    money_1 = module_0.Money(var_1, var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = money_1.__eq__(money_1)
    assert var_2 is True
    var_3 = var_2.__le__(var_2)
    assert var_3 is True
    var_4 = money_0.__le__(var_3)
    assert var_4 is True
    var_5 = money_0.__ge__(var_4)
    assert var_5 is False
    var_6 = var_1.__lt__(var_5)
    var_7 = money_0.__pos__()
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"


def test_case_24():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.round_fractional_cents()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    set_0 = {var_2, var_2}
    var_3 = var_2.__ne__(set_0)
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__le__(money_0)
    assert var_5 is True
    var_6 = var_5.__ge__(var_2)
    money_1 = module_0.Money(var_5, strict_mode=set_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "builtins.set"
    )
    assert len(money_1.strict_mode) == 1
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_7 = money_1.__repr__()
    assert var_7 == "1.00 USD"


def test_case_25():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__repr__()
    assert var_1 == "0.00 USD"
    str_0 = "eW"
    money_1 = module_0.Money(currency=str_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "eW"
    money_2 = module_0.Money(var_1)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_2 = var_0.__float__()
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    with pytest.raises(TypeError):
        money_1.__lt__(money_2)


@pytest.mark.xfail(strict=True)
def test_case_26():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = var_0.__ne__(money_1)
    var_2 = money_1.__gt__(money_1)
    assert var_2 is False
    var_3 = var_0.__add__(var_0)
    assert var_3 == "0.00 USD0.00 USD"
    money_2 = module_0.Money(var_0, strict_mode=var_0)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode == "0.00 USD"
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    money_1.__truediv__(var_2)


def test_case_27():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__rsub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = money_0.truncate_fractional_cents()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_3 = module_1.purge()
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_4 = var_3.__repr__()
    assert var_4 == "None"


def test_case_28():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    str_0 = "money"
    money_1 = module_0.Money(currency=str_0, strict_mode=var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode == "0.00 USD"
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "money"
    none_type_0 = None
    with pytest.raises(TypeError):
        money_1.__sub__(none_type_0)


def test_case_29():
    int_0 = 3128
    money_0 = module_0.Money(strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == 3128
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    complex_0 = -1618 + 2874.924j
    with pytest.raises(TypeError):
        money_0.__rsub__(complex_0)


def test_case_30():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    none_type_0 = None
    with pytest.raises(TypeError):
        money_0.__rsub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__gt__(money_0)
    assert var_1 is False
    var_2 = money_0.__rsub__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    none_type_0 = None
    var_3 = money_0.__float__()
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = money_0.__ne__(none_type_0)
    assert var_4 is True
    var_5 = var_2.__sub__(var_4)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_4.__dir__()
    var_7 = var_5.__eq__(var_2)
    assert var_7 is False
    var_2.__reversed__(var_4)


def test_case_32():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.round_fractional_cents()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_2 = money_0.__gt__(money_0)
    assert var_2 is False
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    money_1 = module_0.Money(var_0, var_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    str_0 = "M?W\t?*"
    money_2 = module_0.Money(money_0, str_0, strict_mode=var_2)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "M?W\t?*"
    with pytest.raises(TypeError):
        money_0.__rsub__(money_2)


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = -640
    money_0 = module_0.Money(int_0, strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == -640
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__repr__()
    assert var_1 == "-640.00 USD"
    var_1.__float__()


def test_case_34():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    money_1 = module_0.Money(currency=var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "0.00 USD"
    with pytest.raises(TypeError):
        money_1.__gt__(var_0)


def test_case_35():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    str_0 = "L;#K,dGG|n'V-wd\t]>ud"
    money_1 = module_0.Money(currency=str_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "L;#K,dGG|n'V-wd\t]>ud"
    var_0 = money_0.__gt__(money_0)
    assert var_0 is False
    with pytest.raises(TypeError):
        money_1.__add__(money_0)
