# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import logical_search as module_0
import dataclasses as module_1
import __exceptions as module_2


def test_case_0():
    pass


def test_case_1():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.invert_docid_set(corpus_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.DISJUNCTION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "QNv}9#*4+Lp"
    str_1 = "bu8fgO?29kJ\x0cg?&6jL"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    str_2 = '3rivN<\n"G!\n(PFb/@8 k'
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.DISJUNCTION
    assert node_0.operands == "QNv}9#*4+Lp"
    var_1 = corpus_0.query(str_2)
    corpus_0.query(var_0)


def test_case_3():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "caDNhU"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    var_1 = module_1.dataclass(init=var_0, frozen=str_0)
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )


def test_case_4():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.DISJUNCTION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz^18"
    set_2 = corpus_0.get_docids_with_property(str_1)
    assert len(corpus_0.docids_with_property) == 1
    node_0 = module_0.Node(set_1, operation_0, str_1)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert node_0.corpus == {*()}
    assert node_0.op == module_0.Operation.DISJUNCTION
    assert node_0.operands == "HYz^18"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()


def test_case_5():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.DISJUNCTION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "QNv}9#*4+Lp"
    str_1 = "bu8fgO?29kJ\x0cg?&6jL"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    none_type_0 = None
    set_2 = corpus_0.get_docids_by_property(str_0, none_type_0)
    assert len(corpus_0.docids_by_property) == 1
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.DISJUNCTION
    assert node_0.operands == "QNv}9#*4+Lp"
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()


def test_case_6():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "HYz\n18"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_1 = "Z;"
    var_1 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 2
    str_2 = "mcaDN+U"
    var_2 = corpus_0.get_doc(str_2)


def test_case_7():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "HYz\n18"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_1 = '3rivN<\n"G!\n(PFb/@8 k'
    var_1 = corpus_0.query(str_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    operation_0 = module_0.Operation.DISJUNCTION
    set_0 = corpus_0.invert_docid_set(operation_0)
    str_0 = ' "8b.+\nBi&('
    var_0 = corpus_0.query(str_0)
    none_type_0 = None
    var_1 = module_1.field(default=none_type_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dataclasses.Field"
    assert (
        f"{type(module_1.MISSING).__module__}.{type(module_1.MISSING).__qualname__}"
        == "dataclasses._MISSING_TYPE"
    )
    assert (
        f"{type(module_1.KW_ONLY).__module__}.{type(module_1.KW_ONLY).__qualname__}"
        == "dataclasses._KW_ONLY_TYPE"
    )
    assert (
        f"{type(module_1.Field.compare).__module__}.{type(module_1.Field.compare).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default).__module__}.{type(module_1.Field.default).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.default_factory).__module__}.{type(module_1.Field.default_factory).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.hash).__module__}.{type(module_1.Field.hash).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.init).__module__}.{type(module_1.Field.init).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.kw_only).__module__}.{type(module_1.Field.kw_only).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.metadata).__module__}.{type(module_1.Field.metadata).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.name).__module__}.{type(module_1.Field.name).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.repr).__module__}.{type(module_1.Field.repr).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Field.type).__module__}.{type(module_1.Field.type).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_1.__delattr__(corpus_0, corpus_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_with_property(corpus_0)
    assert len(corpus_0.docids_with_property) == 1
    str_0 = "caDNhm:"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_property) == 1
    none_type_0 = None
    node_0 = module_0.Node(corpus_0, var_0, none_type_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == {*()}
    assert node_0.operands is None
    corpus_0.add_doc(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    operation_0 = module_0.Operation.CONJUNCTION
    set_0 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.CONJUNCTION
    assert node_0.operands == "caDNhU"
    var_1 = corpus_0.query(str_0)
    set_1 = corpus_0.get_docids_by_searching_tags(str_0)
    corpus_0.get_docids_by_exact_tag(var_0)


def test_case_11():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    operation_0 = module_0.Operation.CONJUNCTION
    set_0 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz\n18"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    str_2 = '3rivN<\n"G!\n(PFb/@8 k'
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.CONJUNCTION
    assert node_0.operands == "caDNhU"
    var_1 = corpus_0.query(str_2)
    set_1 = corpus_0.get_docids_by_searching_tags(str_1)


def test_case_12():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    str_0 = "HYz\n18"
    var_0 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 1
    str_1 = '3rivN<\n"G!\n(PFb/@8 k'
    node_0 = module_0.Node(corpus_0, str_1, str_1)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == '3rivN<\n"G!\n(PFb/@8 k'
    assert node_0.operands == '3rivN<\n"G!\n(PFb/@8 k'
    var_1 = corpus_0.query(str_1)
    set_1 = node_0.eval()


def test_case_13():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.DISJUNCTION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz\n18"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.DISJUNCTION
    assert node_0.operands == "caDNhU"
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 2
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()


def test_case_14():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    operation_0 = module_0.Operation.CONJUNCTION
    set_0 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz\n18"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.CONJUNCTION
    assert node_0.operands == "caDNhU"
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()


def test_case_15():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.DISJUNCTION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "*"
    var_0 = corpus_0.query(str_0)
    node_0 = module_0.Node(set_1, corpus_0, var_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert node_0.corpus == {*()}
    assert (
        f"{type(node_0.op).__module__}.{type(node_0.op).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.operands == {*()}
    str_1 = "qk"
    var_1 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    set_2 = node_0.eval()


@pytest.mark.xfail(strict=True)
def test_case_16():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    list_0 = []
    document_0 = module_0.Document(properties=list_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "logical_search.Document"
    )
    assert document_0.docid == ""
    assert document_0.tags == {*()}
    assert document_0.properties == []
    assert document_0.reference is None
    assert module_0.Document.docid == ""
    assert module_0.Document.reference is None
    none_type_0 = corpus_0.add_doc(document_0)
    assert (
        f"{type(corpus_0.documents_by_docid).__module__}.{type(corpus_0.documents_by_docid).__qualname__}"
        == "builtins.dict"
    )
    assert len(corpus_0.documents_by_docid) == 1
    corpus_0.query(corpus_0)


def test_case_17():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.INVERSION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz\n^18"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    str_2 = '3rivN<\n"G!\n(PFb/@8 k'
    node_0 = module_0.Node(corpus_0, operation_0, str_0)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert (
        f"{type(node_0.corpus).__module__}.{type(node_0.corpus).__qualname__}"
        == "logical_search.Corpus"
    )
    assert node_0.op == module_0.Operation.INVERSION
    assert node_0.operands == "caDNhU"
    var_1 = corpus_0.get_docids_by_searching_tags(str_2)
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()


def test_case_18():
    corpus_0 = module_0.Corpus()
    assert (
        f"{type(corpus_0).__module__}.{type(corpus_0).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_0.docids_by_tag).__module__}.{type(corpus_0.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_tag) == 0
    assert (
        f"{type(corpus_0.docids_by_property).__module__}.{type(corpus_0.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_by_property) == 0
    assert (
        f"{type(corpus_0.docids_with_property).__module__}.{type(corpus_0.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_0.docids_with_property) == 0
    assert corpus_0.documents_by_docid == {}
    assert (
        f"{type(module_0.annotations).__module__}.{type(module_0.annotations).__qualname__}"
        == "__future__._Feature"
    )
    assert module_0.annotations.optional == (3, 7, 0, "beta", 1)
    assert module_0.annotations.mandatory == (3, 11, 0, "alpha", 0)
    assert module_0.annotations.compiler_flag == 16777216
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "logical_search"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    set_0 = corpus_0.get_docids_by_searching_tags(corpus_0)
    operation_0 = module_0.Operation.INVERSION
    set_1 = corpus_0.invert_docid_set(operation_0)
    str_0 = "caDNhU"
    str_1 = "HYz\n18"
    var_0 = corpus_0.query(str_1)
    assert len(corpus_0.docids_by_tag) == 1
    str_2 = '3rivN<\n"G!\n(PFb/@8 k'
    var_1 = corpus_0.query(str_0)
    assert len(corpus_0.docids_by_tag) == 2
    complex_0 = -1735.50952 - 3238.04j
    set_2 = {complex_0}
    node_0 = module_0.Node(set_1, var_0, set_2)
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}"
        == "logical_search.Node"
    )
    assert node_0.corpus == {*()}
    assert node_0.op == {*()}
    assert node_0.operands == {(-1735.50952 - 3238.04j)}
    set_3 = corpus_0.get_docids_with_property(str_2)
    assert len(corpus_0.docids_with_property) == 1
    str_3 = "{_mAU"
    corpus_1 = module_0.Corpus()
    assert (
        f"{type(corpus_1).__module__}.{type(corpus_1).__qualname__}"
        == "logical_search.Corpus"
    )
    assert (
        f"{type(corpus_1.docids_by_tag).__module__}.{type(corpus_1.docids_by_tag).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_tag) == 0
    assert (
        f"{type(corpus_1.docids_by_property).__module__}.{type(corpus_1.docids_by_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_by_property) == 0
    assert (
        f"{type(corpus_1.docids_with_property).__module__}.{type(corpus_1.docids_with_property).__qualname__}"
        == "collections.defaultdict"
    )
    assert len(corpus_1.docids_with_property) == 0
    assert corpus_1.documents_by_docid == {}
    var_2 = corpus_1.query(str_3)
    assert len(corpus_1.docids_by_tag) == 1
    with pytest.raises(module_2.PyUtilsParseError):
        node_0.eval()
