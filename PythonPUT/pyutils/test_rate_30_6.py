# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    int_0 = -3040
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-30.4, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    with pytest.raises(ValueError):
        module_0.Rate()


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "\x0bU;:\t"
    float_0 = 1681.256
    rate_0 = module_0.Rate(percent_change=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(17.81256, abs=0.01, rel=0.01)
    rate_0.apply_to(str_0)


def test_case_3():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False


def test_case_4():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__mul__(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    int_0 = -919
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -919
    rate_0.__truediv__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    int_0 = -919
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -919
    set_0 = {bool_0, int_0, rate_0, bool_0}
    rate_0.__add__(set_0)


def test_case_7():
    float_0 = 1913.44103
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1913.44103, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(float_0)
    assert var_0 is True
    var_1 = rate_0.__le__(float_0)
    assert var_1 is True
    var_2 = var_1.__le__(var_1)
    assert var_2 is True
    var_3 = rate_0.__ne__(var_0)
    assert var_3 is True
    var_4 = rate_0.__lt__(var_1)
    assert var_4 is False
    int_0 = 2850
    with pytest.raises(ValueError):
        module_0.Rate(int_0, percent_change=float_0)


def test_case_8():
    float_0 = 1913.44103
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1913.44103, abs=0.01, rel=0.01)
    var_0 = rate_0.of(float_0)
    assert var_0 == pytest.approx(3661256.575287461, abs=0.01, rel=0.01)
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(3661256.575287461, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -919
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -919
    var_0 = rate_0.__hash__()
    assert var_0 == -919
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    int_1 = 6108
    var_1.apply_to(int_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -3040
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-30.4, abs=0.01, rel=0.01)
    rate_0.__repr__(places=int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    int_0 = -919
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -919
    bool_1 = False
    var_0 = rate_0.__sub__(bool_1)
    assert var_0 == pytest.approx(-919.0, abs=0.01, rel=0.01)
    rate_0.__truediv__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    none_type_1 = None
    rate_0 = module_0.Rate(percentage=none_type_1, percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(bool_1)
    assert var_0 is True
    var_1 = var_0.__truediv__(bool_0)
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(none_type_0)
    var_3 = var_2.__lt__(none_type_0)
    var_3.__add__(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    int_0 = -3040
    rate_0 = module_0.Rate(int_0, percent_change=none_type_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -3040
    var_0 = rate_0.__repr__(relative=rate_0)
    assert var_0 == "-304100.000%"
    rate_0.__add__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = 1913.44103
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1913.44103, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(float_0)
    assert var_0 is True
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_2 = var_1.__le__(float_0)
    assert var_2 is True
    var_3 = var_2.__mul__(float_0)
    var_4 = rate_0.__ne__(var_0)
    assert var_4 is True
    var_5 = var_0.__ne__(var_3)
    var_6 = rate_0.__lt__(var_1)
    assert var_6 is False
    int_0 = -290
    none_type_0 = None
    none_type_1 = None
    rate_1 = module_0.Rate(int_0, percent_change=none_type_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == -290
    bool_0 = True
    var_7 = rate_0.__ge__(rate_0)
    assert var_7 is True
    var_8 = var_7.__truediv__(bool_0)
    assert var_8 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_9 = var_6.__gt__(var_0)
    assert var_9 is False
    var_10 = var_1.__lt__(var_9)
    assert var_10 is False
    var_11 = var_1.__hash__()
    assert var_11 == 1
    var_12 = rate_1.__gt__(var_0)
    assert var_12 is False
    var_13 = rate_1.__le__(var_0)
    assert var_13 is True
    var_6.of(none_type_0)


def test_case_15():
    none_type_0 = None
    str_0 = '$^">{'
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percentage=none_type_0)
