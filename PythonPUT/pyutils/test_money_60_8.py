# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import money as module_0
import re as module_1
import decimal as module_2
import enum as module_3


def test_case_0():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    str_0 = "BE<"
    with pytest.raises(ValueError):
        module_0.Money(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is True
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "1.00 USD"
    var_0.__neg__()


def test_case_3():
    bool_0 = False
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"


def test_case_4():
    str_0 = "G={xvnZV.`{\\@X\x0b"
    money_0 = module_0.Money(currency=str_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "G={xvnZV.`{\\@X\x0b"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "G={xvnZV.`{\\@X\x0b"
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"


def test_case_5():
    none_type_0 = None
    money_0 = module_0.Money(currency=none_type_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency is None
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__add__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency is None
    with pytest.raises(TypeError):
        money_0.__lt__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    money_1 = module_0.Money(currency=var_0, strict_mode=money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_1.currency).__module__}.{type(money_1.currency).__qualname__}"
        == "money.Money"
    )
    var_1 = money_1.__repr__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__neg__()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_1.__len__(var_2)


def test_case_7():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__pos__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG


def test_case_8():
    float_0 = 1668.3
    money_0 = module_0.Money(float_0, float_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == pytest.approx(1668.3, abs=0.01, rel=0.01)
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__rsub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == pytest.approx(1668.3, abs=0.01, rel=0.01)
    var_1 = money_0.__float__()
    assert var_1 == pytest.approx(1668.3, abs=0.01, rel=0.01)
    with pytest.raises(TypeError):
        money_0.__mul__(money_0)


def test_case_9():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__float__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = money_0.__ne__(money_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = money_0.__neg__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    money_1 = module_0.Money(money_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = module_1.escape(var_0)
    assert var_2 == "0\\.00\\ USD"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_3 = money_1.truncate_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_3.__iter__(var_0)


def test_case_11():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_1.round_fractional_cents()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = money_0.__ge__(var_0)
    assert var_1 is True
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_2 = money_0.__repr__()
    assert var_2 == "0.00 USD"


@pytest.mark.xfail(strict=True)
def test_case_12():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    module_1.sub(money_0, money_1, money_0)


def test_case_13():
    none_type_0 = None
    money_0 = module_0.Money(currency=none_type_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency is None
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__lt__(none_type_0)


def test_case_14():
    int_0 = 224
    money_0 = module_0.Money(int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__neg__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__rsub__(int_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(int_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_0.__truediv__(int_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    with pytest.raises(TypeError):
        var_2.__truediv__(var_1)


def test_case_15():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False


def test_case_16():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"


def test_case_17():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ne__(money_0)
    assert var_0 is False
    var_1 = money_0.__ne__(var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_18():
    tuple_0 = ()
    bool_0 = False
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(bool_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = var_0.__pos__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    tuple_0.__delattr__(var_1, var_0)


def test_case_19():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__lt__(money_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_20():
    tuple_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    bool_0 = False
    money_1 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_0 = money_0.__le__(bool_0)
    assert var_0 is True
    module_3.EnumMeta()


def test_case_21():
    tuple_0 = ()
    bool_0 = True
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is True
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__rsub__(tuple_0)


def test_case_22():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__repr__()
    assert var_2 == "0.00 USD"
    money_1 = module_0.Money(strict_mode=var_2)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode == "0.00 USD"
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_0.Money()
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_3 = money_2.__add__(money_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    with pytest.raises(TypeError):
        var_1.__truediv__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__eq__(none_type_0)
    assert var_0 is False
    str_0 = 'a"!STcR|oK^:8-h$FbA'
    none_type_1 = None
    var_1 = money_0.__ge__(var_0)
    assert var_1 is True
    module_1.split(str_0, none_type_1, none_type_1)


def test_case_24():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__neg__()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_1.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_3.__ne__(var_1)
    assert var_4 is False
    money_1 = module_0.Money(var_0, var_4, strict_mode=var_3)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_5 = var_2.__le__(var_2)
    assert var_5 is True
    money_2 = module_0.Money(currency=var_4, strict_mode=var_5)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is True
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency is None
    with pytest.raises(TypeError):
        var_2.__add__(money_2)


@pytest.mark.xfail(strict=True)
def test_case_25():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__neg__()
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_1.__pos__()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_3.__ne__(var_1)
    assert var_4 is False
    money_1 = module_0.Money(var_0, var_4, strict_mode=var_3)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_5 = var_1.__repr__()
    assert var_5 == "0.00 USD"
    var_3.__mul__(var_5)


@pytest.mark.xfail(strict=True)
def test_case_26():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_0.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = var_2.__pos__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_4.__ne__(var_2)
    assert var_5 is False
    money_1 = module_0.Money()
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_0.Money()
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    var_6 = var_4.__repr__()
    assert var_6 == "0.00 USD"
    money_3 = module_0.Money(currency=var_6)
    assert f"{type(money_3).__module__}.{type(money_3).__qualname__}" == "money.Money"
    assert money_3.strict_mode is False
    assert (
        f"{type(money_3.amount).__module__}.{type(money_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_3.currency == "0.00 USD"
    var_7 = var_0.__add__(var_1)
    var_4.__truediv__(var_5)


def test_case_27():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__repr__()
    assert var_1 == "0.00 USD"
    money_1 = module_0.Money(var_1)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_2 = var_1.__le__(var_1)
    assert var_2 is True
    var_3 = var_0.round_fractional_cents()
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )


def test_case_28():
    bool_0 = True
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is True
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = 604
    with pytest.raises(TypeError):
        money_0.__sub__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_1.__le__(money_0)
    assert var_2 is True
    var_3 = money_0.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__pos__()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_0.__ne__(var_0)
    assert var_6 is False
    money_1 = module_0.Money(var_3)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    money_2 = module_0.Money(var_2, var_2, strict_mode=var_6)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency is True
    var_7 = money_1.__le__(var_2)
    assert var_7 is True
    module_1.fullmatch(var_5, var_4, var_6)


@pytest.mark.xfail(strict=True)
def test_case_30():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__sub__(money_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "money.Money"
    assert var_0.strict_mode is False
    assert (
        f"{type(var_0.amount).__module__}.{type(var_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_0.currency == "USD"
    var_1 = money_0.__add__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = var_0.__lt__(var_0)
    assert var_2 is False
    var_3 = money_0.__repr__()
    assert var_3 == "0.00 USD"
    var_4 = var_1.__pos__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = var_4.__ne__(var_1)
    assert var_5 is False
    money_1 = module_0.Money(var_5, var_5)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency is None
    var_6 = money_1.__repr__()
    assert var_6 == "$0.00"
    var_7 = money_0.__neg__()
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    money_2 = module_0.Money(var_7)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "USD"
    money_3 = module_0.Money(money_0)
    assert f"{type(money_3).__module__}.{type(money_3).__qualname__}" == "money.Money"
    assert money_3.strict_mode is False
    assert (
        f"{type(money_3.amount).__module__}.{type(money_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_3.currency == "USD"
    module_1.finditer(var_5, var_5, var_5)


def test_case_31():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = money_0.__hash__()
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__le__(money_0)
    assert var_3 is True
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__repr__()
    assert var_5 == "0.00 USD"
    var_6 = money_0.__pos__()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_1.__ne__(var_0)
    assert var_7 is True
    money_1 = module_0.Money(var_4)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_8 = var_6.round_fractional_cents()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    str_0 = "]=2d;~eb"
    var_9 = var_6.__add__(var_7)
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    money_2 = module_0.Money(var_6, str_0, strict_mode=var_7)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is True
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "]=2d;~eb"
    str_1 = "di5-D"
    var_10 = var_7.__mul__(var_2)
    var_11 = money_0.__gt__(var_8)
    assert var_11 is False
    money_3 = module_0.Money(currency=str_1, strict_mode=var_5)
    assert f"{type(money_3).__module__}.{type(money_3).__qualname__}" == "money.Money"
    assert money_3.strict_mode == "0.00 USD"
    assert (
        f"{type(money_3.amount).__module__}.{type(money_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_3.currency == "di5-D"
    with pytest.raises(TypeError):
        var_6.__rsub__(money_2)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = -873
    money_0 = module_0.Money(int_0, strict_mode=int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == -873
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__repr__()
    assert var_0 == "-873.00 USD"
    str_0 = "*/IG#'/ei$D?~\"%?l}]&"
    var_1 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_2 = var_1.__eq__(str_0)
    var_2.scan(str_0)


def test_case_33():
    tuple_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    bool_0 = True
    money_0 = module_0.Money(bool_0, strict_mode=bool_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is True
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__gt__(bool_0)


def test_case_34():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = var_0.__eq__(var_0)
    assert var_1 is True
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__le__(money_0)
    assert var_3 is True
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__repr__()
    assert var_5 == "0.00 USD"
    var_6 = var_2.__pos__()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_1.__ne__(var_0)
    assert var_7 is False
    money_1 = module_0.Money(var_4)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_8 = money_0.__neg__()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = module_0.Money(currency=var_1, strict_mode=var_0)
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is True
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency is True
    var_10 = var_6.__add__(var_7)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    money_2 = module_0.Money(var_6, var_6, strict_mode=var_7)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is False
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert (
        f"{type(money_2.currency).__module__}.{type(money_2.currency).__qualname__}"
        == "money.Money"
    )
    with pytest.raises(TypeError):
        money_0.__gt__(var_9)


def test_case_35():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__le__(money_0)
    assert var_3 is True
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__repr__()
    assert var_5 == "0.00 USD"
    var_6 = money_0.__pos__()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_1.__ne__(var_0)
    assert var_7 is True
    money_1 = module_0.Money(var_4)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_8 = money_0.__neg__()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = var_6.round_fractional_cents()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    str_0 = "3!"
    var_10 = var_6.__add__(var_7)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    money_2 = module_0.Money(var_6, str_0, strict_mode=var_7)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is True
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "3!"
    var_11 = var_7.__mul__(var_2)
    with pytest.raises(TypeError):
        money_2.__add__(var_9)


def test_case_36():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__le__(money_0)
    assert var_3 is True
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__pos__()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_1.__ne__(var_0)
    assert var_6 is True
    money_1 = module_0.Money(var_4)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_7 = money_0.__neg__()
    assert f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "money.Money"
    assert var_7.strict_mode is False
    assert (
        f"{type(var_7.amount).__module__}.{type(var_7.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_7.currency == "USD"
    var_8 = var_5.round_fractional_cents()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    str_0 = "]=2d;~eb"
    var_9 = money_1.truncate_fractional_cents()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    var_10 = var_5.__add__(var_6)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    money_2 = module_0.Money(var_5, str_0, strict_mode=var_6)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is True
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "]=2d;~eb"
    var_11 = var_6.__mul__(var_2)
    with pytest.raises(TypeError):
        money_2.__sub__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_37():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__pos__()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__sub__(var_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = money_0.__add__(money_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = var_1.__le__(var_2)
    assert var_4 is False
    var_5 = var_2.__repr__()
    assert var_5 == "-1.00 USD"
    var_6 = var_3.__repr__()
    assert var_6 == "0.00 USD"
    var_7 = var_4.__pos__()
    assert var_7 == 0
    var_8 = var_6.__ne__(var_4)
    money_1 = module_0.Money(strict_mode=var_2)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert (
        f"{type(money_1.strict_mode).__module__}.{type(money_1.strict_mode).__qualname__}"
        == "money.Money"
    )
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_9 = var_3.__neg__()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    var_4.round_fractional_cents()


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = 224
    money_0 = module_0.Money(int_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__float__()
    assert var_0 == pytest.approx(224.0, abs=0.01, rel=0.01)
    var_1 = money_0.__add__(int_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__truediv__(int_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_1.__truediv__(var_0)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "money.Money"
    assert var_3.strict_mode is False
    assert (
        f"{type(var_3.amount).__module__}.{type(var_3.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_3.currency == "USD"
    var_4 = money_0.__pos__()
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "money.Money"
    assert var_4.strict_mode is False
    assert (
        f"{type(var_4.amount).__module__}.{type(var_4.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_4.currency == "USD"
    var_5 = money_0.__neg__()
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "money.Money"
    assert var_5.strict_mode is False
    assert (
        f"{type(var_5.amount).__module__}.{type(var_5.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_5.currency == "USD"
    var_6 = var_4.__ge__(money_0)
    assert var_6 is True
    var_7 = var_6.__ne__(var_1)
    var_8 = var_5.__repr__()
    assert var_8 == "-224.00 USD"
    int_1 = var_5.__hash__()
    var_9 = var_1.__neg__()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "money.Money"
    assert var_9.strict_mode is False
    assert (
        f"{type(var_9.amount).__module__}.{type(var_9.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_9.currency == "USD"
    var_4.__reversed__(var_4)


def test_case_39():
    float_0 = -405.0778
    bytes_0 = b"\t{\xc1;1y\x87F\xfeH\xcb\xe4"
    money_0 = module_0.Money(currency=float_0, strict_mode=bytes_0)
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode == b"\t{\xc1;1y\x87F\xfeH\xcb\xe4"
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == pytest.approx(-405.0778, abs=0.01, rel=0.01)
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(TypeError):
        money_0.__eq__(bytes_0)


def test_case_40():
    money_0 = module_0.Money()
    assert f"{type(money_0).__module__}.{type(money_0).__qualname__}" == "money.Money"
    assert money_0.strict_mode is False
    assert (
        f"{type(money_0.amount).__module__}.{type(money_0.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_0.currency == "USD"
    assert module_0.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_0.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "money"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.Money.AMOUNT_RE).__module__}.{type(module_0.Money.AMOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.CURRENCY_RE).__module__}.{type(module_0.Money.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.Money.parse).__module__}.{type(module_0.Money.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = money_0.__ge__(money_0)
    assert var_0 is True
    var_1 = money_0.__sub__(money_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "money.Money"
    assert var_1.strict_mode is False
    assert (
        f"{type(var_1.amount).__module__}.{type(var_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_1.currency == "USD"
    var_2 = money_0.__add__(money_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "money.Money"
    assert var_2.strict_mode is False
    assert (
        f"{type(var_2.amount).__module__}.{type(var_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_2.currency == "USD"
    var_3 = var_2.__le__(money_0)
    assert var_3 is True
    var_4 = money_0.__repr__()
    assert var_4 == "0.00 USD"
    var_5 = money_0.__repr__()
    assert var_5 == "0.00 USD"
    var_6 = money_0.__pos__()
    assert f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "money.Money"
    assert var_6.strict_mode is False
    assert (
        f"{type(var_6.amount).__module__}.{type(var_6.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_6.currency == "USD"
    var_7 = var_1.__ne__(var_0)
    assert var_7 is True
    money_1 = module_0.Money(var_4)
    assert f"{type(money_1).__module__}.{type(money_1).__qualname__}" == "money.Money"
    assert money_1.strict_mode is False
    assert (
        f"{type(money_1.amount).__module__}.{type(money_1.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_1.currency == "USD"
    var_8 = money_0.__neg__()
    assert f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "money.Money"
    assert var_8.strict_mode is False
    assert (
        f"{type(var_8.amount).__module__}.{type(var_8.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_8.currency == "USD"
    var_9 = var_6.round_fractional_cents()
    assert f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "decimal.Decimal"
    assert (
        f"{type(module_2.Decimal.real).__module__}.{type(module_2.Decimal.real).__qualname__}"
        == "builtins.getset_descriptor"
    )
    assert (
        f"{type(module_2.Decimal.imag).__module__}.{type(module_2.Decimal.imag).__qualname__}"
        == "builtins.getset_descriptor"
    )
    str_0 = "]=2d;~eb"
    var_10 = var_6.__add__(var_7)
    assert f"{type(var_10).__module__}.{type(var_10).__qualname__}" == "money.Money"
    assert var_10.strict_mode is False
    assert (
        f"{type(var_10.amount).__module__}.{type(var_10.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert var_10.currency == "USD"
    assert (
        f"{type(module_2.DefaultContext).__module__}.{type(module_2.DefaultContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.HAVE_CONTEXTVAR is True
    assert module_2.HAVE_THREADS is True
    assert (
        f"{type(module_2.BasicContext).__module__}.{type(module_2.BasicContext).__qualname__}"
        == "decimal.Context"
    )
    assert (
        f"{type(module_2.ExtendedContext).__module__}.{type(module_2.ExtendedContext).__qualname__}"
        == "decimal.Context"
    )
    assert module_2.MAX_PREC == 999999999999999999
    assert module_2.MAX_EMAX == 999999999999999999
    assert module_2.MIN_EMIN == -999999999999999999
    assert module_2.MIN_ETINY == -1999999999999999997
    assert module_2.ROUND_UP == "ROUND_UP"
    assert module_2.ROUND_DOWN == "ROUND_DOWN"
    assert module_2.ROUND_CEILING == "ROUND_CEILING"
    assert module_2.ROUND_FLOOR == "ROUND_FLOOR"
    assert module_2.ROUND_HALF_UP == "ROUND_HALF_UP"
    assert module_2.ROUND_HALF_DOWN == "ROUND_HALF_DOWN"
    assert module_2.ROUND_HALF_EVEN == "ROUND_HALF_EVEN"
    assert module_2.ROUND_05UP == "ROUND_05UP"
    money_2 = module_0.Money(var_6, str_0, strict_mode=var_7)
    assert f"{type(money_2).__module__}.{type(money_2).__qualname__}" == "money.Money"
    assert money_2.strict_mode is True
    assert (
        f"{type(money_2.amount).__module__}.{type(money_2.amount).__qualname__}"
        == "decimal.Decimal"
    )
    assert money_2.currency == "]=2d;~eb"
    var_11 = var_7.__mul__(var_2)
    var_12 = var_10.__repr__()
    assert var_12 == "1.00 USD"
    var_13 = money_0.__gt__(var_9)
    assert var_13 is False
    with pytest.raises(TypeError):
        money_2.__lt__(var_5)
