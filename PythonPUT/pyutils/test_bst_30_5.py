# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst as module_0
import builtins as module_1
import typing as module_2


def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_1 = binary_search_tree_0.__getitem__(var_0)
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 0
    none_type_0 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_2)
    assert len(binary_search_tree_0) == 2
    var_3 = binary_search_tree_0.__getitem__(var_2)
    assert f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "bst.Node"
    assert var_3.left is None
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}" == "bst.Node"
    )
    assert var_3.value == 0
    binary_search_tree_0.__delitem__(var_0)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.parent_path(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.get_root()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    var_1 = binary_search_tree_0.iterate_preorder()
    var_2 = binary_search_tree_0.iterate_inorder()
    bool_0 = binary_search_tree_0.__delitem__(var_2)
    assert bool_0 is False
    var_2.iterate_postorder()


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is False
    with pytest.raises(AssertionError):
        binary_search_tree_0.get_next_node(node_0)


def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0


def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__repr__()
    assert var_0 == ""
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.iterate_postorder()
    node_0 = module_0.Node(binary_search_tree_1)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert (
        f"{type(node_0.value).__module__}.{type(node_0.value).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(node_0.value) == 0
    var_1 = binary_search_tree_0.iterate_leaves()
    bool_0 = binary_search_tree_0.__contains__(var_0)
    assert bool_0 is False
    var_2 = binary_search_tree_1.iterate_postorder()
    int_0 = binary_search_tree_0.depth()
    assert int_0 == 0
    bool_1 = binary_search_tree_0.__contains__(var_0)
    assert bool_1 is False
    var_0.depth()


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__getitem__(var_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}" == "bst.Node"
    )
    assert var_1.value == 0
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "0\n└──0"
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 1


def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = var_0.__repr__()
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    list_0 = binary_search_tree_1.parent_path(var_1)
    int_0 = binary_search_tree_2.height()
    assert int_0 == 0
    var_2 = binary_search_tree_0.__getitem__(binary_search_tree_2)
    var_3 = binary_search_tree_2.__len__()
    assert var_3 == 0
    none_type_0 = binary_search_tree_2.insert(int_0)
    assert len(binary_search_tree_2) == 1
    node_0 = module_0.Node(var_2)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "bst.Node"
    assert node_0.left is None
    assert node_0.right is None
    assert node_0.value is None
    none_type_1 = binary_search_tree_2.insert(var_3)
    assert len(binary_search_tree_2) == 2
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 0
    bool_0 = True
    var_4 = binary_search_tree_2.__getitem__(bool_0)
    var_5 = binary_search_tree_2.__repr__()
    assert var_5 == "0\n└──0"
    int_2 = binary_search_tree_0.depth()
    assert int_2 == 0
    bool_1 = binary_search_tree_1.__delitem__(list_0)
    assert bool_1 is False
    var_6 = var_1.__len__()
    assert var_6 == 72
    bool_2 = var_3.__lt__(var_6)
    assert bool_2 is True
    int_3 = binary_search_tree_0.depth()
    assert int_3 == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 1
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0"
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 0
    bool_1 = False
    var_0.repr_traverse(var_1, var_0, var_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    bool_0 = binary_search_tree_0.__delitem__(binary_search_tree_0)
    assert bool_0 is False
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_preorder()
    none_type_0 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.get_root()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst.Node"
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "builtins.generator"
    )
    list_0 = binary_search_tree_0.parent_path(var_1)
    binary_search_tree_0.insert(int_0)


def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.__len__()
    assert var_0 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_0)
    assert len(binary_search_tree_0) == 2
    var_1 = binary_search_tree_0.__repr__()
    assert var_1 == "0\n└──0"
    var_2 = binary_search_tree_0.__len__()
    assert var_2 == 2
    int_1 = binary_search_tree_0.depth()
    assert int_1 == 2


@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    var_2 = binary_search_tree_0.__getitem__(var_1)
    generator_0 = binary_search_tree_0.iterate_nodes_by_depth(int_0)
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is False
    object_0 = module_1.object(*generator_0)
    bool_1 = binary_search_tree_0.__contains__(object_0)
    assert bool_1 is False
    var_3 = object_0.__repr__()
    var_3.iterate_inorder()


@pytest.mark.xfail(strict=True)
def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    var_2 = binary_search_tree_0.__getitem__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert var_2.right is None
    assert var_2.value == 0
    var_3 = binary_search_tree_0.__repr__()
    assert var_3 == "0"
    module_2.Protocol(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    var_0 = binary_search_tree_0.iterate_leaves()
    var_1 = module_1.object(*var_0)
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    generator_0 = binary_search_tree_1.iterate_nodes_by_depth(var_1)
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_2 = binary_search_tree_1.iterate_inorder()
    set_0 = set()
    none_type_0 = binary_search_tree_2.insert(set_0)
    assert len(binary_search_tree_2) == 1
    var_2.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.__repr__()
    assert var_2 == "0\n└──0"
    none_type_2 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 3
    bool_0 = binary_search_tree_0.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_0) == 2
    bool_1 = False
    var_1.repr_traverse(var_2, var_1, var_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    object_0 = module_1.object(*var_0)
    var_0.iterate_preorder()


@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_postorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.__getitem__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert (
        f"{type(var_2.right).__module__}.{type(var_2.right).__qualname__}" == "bst.Node"
    )
    assert var_2.value == 0
    module_2.Generic(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.iterate_inorder()
    var_1 = binary_search_tree_0.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    none_type_1 = binary_search_tree_0.insert(var_1)
    assert len(binary_search_tree_0) == 2
    var_2 = binary_search_tree_0.__getitem__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert (
        f"{type(var_2.right).__module__}.{type(var_2.right).__qualname__}" == "bst.Node"
    )
    assert var_2.value == 0
    module_2.Generic(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    int_0 = binary_search_tree_0.height()
    assert int_0 == 0
    var_0 = binary_search_tree_0.parent_path(binary_search_tree_0)
    none_type_0 = binary_search_tree_0.insert(int_0)
    assert len(binary_search_tree_0) == 1
    var_1 = binary_search_tree_0.iterate_leaves()
    module_1.object(*var_1)


def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    int_0 = binary_search_tree_1.height()
    assert int_0 == 0
    var_0 = binary_search_tree_1.iterate_postorder()
    var_1 = binary_search_tree_1.__len__()
    assert var_1 == 0
    none_type_0 = binary_search_tree_1.insert(int_0)
    assert len(binary_search_tree_1) == 1
    none_type_1 = binary_search_tree_1.insert(var_1)
    assert len(binary_search_tree_1) == 2
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_2 = binary_search_tree_1.__getitem__(var_1)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "bst.Node"
    assert var_2.left is None
    assert (
        f"{type(var_2.right).__module__}.{type(var_2.right).__qualname__}" == "bst.Node"
    )
    assert var_2.value == 0
    var_3 = binary_search_tree_1.__repr__()
    assert var_3 == "0\n└──0"
    int_1 = binary_search_tree_1.depth()
    assert int_1 == 2
    bool_0 = binary_search_tree_1.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_1) == 1
    bool_1 = binary_search_tree_1.__delitem__(bool_0)
    assert bool_1 is False


def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.__repr__()
    assert var_0 == ""
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_1 = binary_search_tree_0.iterate_preorder()
    binary_search_tree_3 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_3).__module__}.{type(binary_search_tree_3).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_3) == 0
    list_0 = binary_search_tree_2.parent_path(var_0)
    int_0 = binary_search_tree_3.height()
    assert int_0 == 0
    var_2 = binary_search_tree_0.__getitem__(var_1)
    var_3 = binary_search_tree_3.__len__()
    assert var_3 == 0
    none_type_0 = binary_search_tree_3.insert(int_0)
    assert len(binary_search_tree_3) == 1
    none_type_1 = binary_search_tree_3.insert(var_3)
    assert len(binary_search_tree_3) == 2
    binary_search_tree_4 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_4).__module__}.{type(binary_search_tree_4).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_4) == 0
    var_4 = binary_search_tree_3.__getitem__(var_3)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "bst.Node"
    assert var_4.left is None
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}" == "bst.Node"
    )
    assert var_4.value == 0
    var_5 = binary_search_tree_3.__repr__()
    assert var_5 == "0\n└──0"
    int_1 = binary_search_tree_3.depth()
    assert int_1 == 2
    bool_0 = binary_search_tree_3.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_3) == 1
    var_6 = var_2.__repr__()
    assert var_6 == "None"
    str_0 = binary_search_tree_4.repr_traverse(var_0, var_3, var_4, var_5)
    assert str_0 == "\n00\n│  └──0"


@pytest.mark.xfail(strict=True)
def test_case_26():
    binary_search_tree_0 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_0).__module__}.{type(binary_search_tree_0).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_0) == 0
    binary_search_tree_1 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_1).__module__}.{type(binary_search_tree_1).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_1) == 0
    var_0 = binary_search_tree_1.__repr__()
    assert var_0 == ""
    binary_search_tree_2 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_2).__module__}.{type(binary_search_tree_2).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_2) == 0
    var_1 = binary_search_tree_0.iterate_preorder()
    binary_search_tree_3 = module_0.BinarySearchTree()
    assert (
        f"{type(binary_search_tree_3).__module__}.{type(binary_search_tree_3).__qualname__}"
        == "bst.BinarySearchTree"
    )
    assert len(binary_search_tree_3) == 0
    list_0 = binary_search_tree_2.parent_path(var_0)
    int_0 = binary_search_tree_3.height()
    assert int_0 == 0
    var_2 = binary_search_tree_0.__getitem__(var_1)
    var_3 = binary_search_tree_3.__len__()
    assert var_3 == 0
    none_type_0 = binary_search_tree_3.insert(int_0)
    assert len(binary_search_tree_3) == 1
    none_type_1 = binary_search_tree_3.insert(var_3)
    assert len(binary_search_tree_3) == 2
    binary_search_tree_4 = binary_search_tree_1.__len__()
    assert binary_search_tree_4 == 0
    var_4 = binary_search_tree_3.__getitem__(var_3)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "bst.Node"
    assert var_4.left is None
    assert (
        f"{type(var_4.right).__module__}.{type(var_4.right).__qualname__}" == "bst.Node"
    )
    assert var_4.value == 0
    var_5 = module_2.Generic(*var_1)
    assert f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "typing.Generic"
    assert module_2.EXCLUDED_ATTRIBUTES == [
        "__parameters__",
        "__orig_bases__",
        "__orig_class__",
        "_is_protocol",
        "_is_runtime_protocol",
        "__abstractmethods__",
        "__annotations__",
        "__dict__",
        "__doc__",
        "__init__",
        "__module__",
        "__new__",
        "__slots__",
        "__subclasshook__",
        "__weakref__",
        "__class_getitem__",
        "_MutableMapping__marker",
    ]
    assert (
        f"{type(module_2.T).__module__}.{type(module_2.T).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.KT).__module__}.{type(module_2.KT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT).__module__}.{type(module_2.VT).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_co).__module__}.{type(module_2.T_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.V_co).__module__}.{type(module_2.V_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.VT_co).__module__}.{type(module_2.VT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.T_contra).__module__}.{type(module_2.T_contra).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.CT_co).__module__}.{type(module_2.CT_co).__qualname__}"
        == "typing.TypeVar"
    )
    assert (
        f"{type(module_2.AnyStr).__module__}.{type(module_2.AnyStr).__qualname__}"
        == "typing.TypeVar"
    )
    assert module_2.TYPE_CHECKING is False
    var_6 = var_5.__repr__()
    int_1 = binary_search_tree_3.depth()
    assert int_1 == 2
    bool_0 = binary_search_tree_3.__delitem__(int_0)
    assert bool_0 is True
    assert len(binary_search_tree_3) == 1
    var_7 = var_2.__repr__()
    assert var_7 == "None"
    binary_search_tree_3.__delitem__(var_7)
