# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -664
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-6.64, abs=0.01, rel=0.01)
    bool_0 = True
    bytes_0 = b"[$\xb9\xe5\x96p\x0f3"
    rate_1 = module_0.Rate(bytes_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == b"[$\xb9\xe5\x96p\x0f3"
    rate_1.apply_to(bool_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ",~0~,oTv"
    module_0.Rate(percent_change=str_0)


def test_case_3():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = var_0.__gt__(bool_0)
    assert var_1 is False
    var_2 = var_1.__mul__(bool_0)
    assert var_2 == 0
    var_3 = var_2.__hash__()
    assert var_3 == 0
    bool_1 = False
    rate_1 = module_0.Rate(percent_change=bool_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = rate_1.apply_to(bool_0)
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    bytes_0 = b"[$\xb9\xe5\x96p\x0f3"
    rate_0 = module_0.Rate(bytes_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == b"[$\xb9\xe5\x96p\x0f3"
    rate_0.apply_to(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(rate_0)
    assert var_0 is True
    var_1 = rate_0.__le__(var_0)
    assert var_1 is True
    var_2 = rate_0.__eq__(bool_0)
    assert var_2 is False
    bytes_0 = b"[$\xb9\xe5\x96p\x0f3"
    module_0.Rate(percentage=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -664
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-6.64, abs=0.01, rel=0.01)
    bytes_0 = b"[$\xb9\xe5\x96p\x0f3"
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    rate_1 = module_0.Rate(bytes_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == b"[$\xb9\xe5\x96p\x0f3"
    var_1 = rate_1.__float__()
    assert var_1 == b"[$\xb9\xe5\x96p\x0f3"
    var_2 = var_1.__ge__(bytes_0)
    assert var_2 is True
    rate_1.__repr__(places=int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -413.599
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-413.599, abs=0.01, rel=0.01)
    rate_0.__repr__(relative=float_0, places=float_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"3\xc1\xeaJ"
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(rate_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = var_0.__mul__(rate_0)
    var_2 = rate_0.__float__()
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bytes_0)
    var_4 = var_3.__lt__(bytes_0)
    rate_0.__repr__(places=var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 1075
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(11.75, abs=0.01, rel=0.01)
    none_type_0 = None
    rate_0.__ge__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    none_type_1 = None
    str_0 = "3?+"
    float_0 = -873.1
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    float_1 = 1633.5493
    rate_0 = module_0.Rate(percent_change=float_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(17.335493, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(17.335493, abs=0.01, rel=0.01)
    var_1 = var_0.__truediv__(tuple_0)
    var_2 = var_1.__eq__(float_0)
    var_3 = var_2.__ge__(str_0)
    var_4 = var_3.__eq__(none_type_1)
    var_4.__truediv__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__eq__(bool_0)
    assert var_1 is False
    var_2 = rate_0.__le__(var_1)
    assert var_2 is False
    var_3 = rate_0.__eq__(bool_0)
    assert var_3 is False
    var_4 = rate_0.__float__()
    assert var_4 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_5 = rate_0.__le__(rate_0)
    assert var_5 is True
    rate_1 = module_0.Rate(var_5)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is True
    var_6 = rate_0.__float__()
    assert var_6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_7 = rate_0.__ge__(var_6)
    assert var_7 is True
    var_8 = var_2.__le__(var_4)
    var_7.__repr__(places=var_4)


@pytest.mark.xfail(strict=True)
def test_case_12():
    float_0 = -413.599
    str_0 = "fK.[8"
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-413.599, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(float_0)
    assert var_0 is False
    var_1 = var_0.__sub__(float_0)
    module_0.Rate(percentage=str_0, percent_change=str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"3\xc1\xeaJ"
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(rate_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = var_0.__mul__(rate_0)
    var_2 = rate_0.__float__()
    assert var_2 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_3 = var_2.__eq__(bytes_0)
    var_4 = var_3.__lt__(bytes_0)
    var_5 = rate_0.of(var_0)
    assert var_5 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_6 = rate_0.__lt__(var_0)
    assert var_6 is False
    var_1.__add__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(rate_0)
    assert var_1 is True
    var_2 = rate_0.__le__(var_1)
    assert var_2 is True
    var_3 = rate_0.__eq__(bool_0)
    assert var_3 is False
    var_4 = rate_0.__gt__(var_2)
    assert var_4 is False
    var_5 = var_4.__ge__(bool_0)
    assert var_5 is True
    var_6 = var_2.__float__()
    assert var_6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_7 = var_2.__float__()
    assert var_7 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_8 = rate_0.__add__(var_0)
    assert var_8 == pytest.approx(2.0, abs=0.01, rel=0.01)
    var_9 = var_3.__mul__(bool_0)
    assert var_9 == 0
    var_10 = var_5.__add__(bool_0)
    assert var_10 == 1
    var_11 = rate_0.__sub__(var_5)
    assert var_11 == pytest.approx(0.0, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percentage=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_12 = var_4.__sub__(var_6)
    var_8.of(var_10)


def test_case_15():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__ge__(rate_0)
    assert var_1 is True
    var_2 = rate_0.__le__(var_1)
    assert var_2 is True
    var_3 = rate_0.__eq__(bool_0)
    assert var_3 is False
    var_4 = rate_0.__ge__(var_3)
    assert var_4 is True
    rate_1 = module_0.Rate(rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert (
        f"{type(rate_1.multiplier).__module__}.{type(rate_1.multiplier).__qualname__}"
        == "rate.Rate"
    )
    var_5 = rate_0.__float__()
    assert var_5 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_6 = rate_1.__add__(bool_0)
    assert var_6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_7 = var_6.__mul__(bool_0)
    assert var_7 == pytest.approx(0.0, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.Rate(var_3, percentage=var_1, percent_change=var_0)


def test_case_16():
    str_0 = "(Z<ub"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(bool_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_1 = rate_0.__add__(var_0)
    assert var_1 == pytest.approx(2.0, abs=0.01, rel=0.01)
    var_2 = rate_0.__le__(var_1)
    assert var_2 is True
    var_3 = rate_0.__eq__(bool_0)
    assert var_3 is False
    var_0.__repr__(relative=var_1)
