# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.Rate(percentage=list_1)


def test_case_1():
    int_0 = 28
    with pytest.raises(ValueError):
        module_0.Rate(int_0, percent_change=int_0)


def test_case_2():
    none_type_0 = None
    bool_0 = False
    float_0 = 504.9
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(504.9, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(bool_0)
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = var_0.__gt__(none_type_0)


def test_case_3():
    int_0 = -2005
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2005
    var_0 = rate_0.__repr__()
    assert var_0 == "-200500.000%"
    bool_0 = False
    rate_1 = module_0.Rate(bool_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier is False
    var_1 = rate_1.__truediv__(int_0)
    assert var_1 == pytest.approx(-0.0, abs=0.01, rel=0.01)
    var_2 = var_1.__float__()
    assert var_2 == pytest.approx(-0.0, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -177
    int_1 = 1131
    rate_0 = module_0.Rate(percentage=int_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(11.31, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(rate_0)
    assert var_0 == pytest.approx(127.91610000000001, abs=0.01, rel=0.01)
    none_type_0 = None
    var_1 = var_0.__sub__(int_0)
    assert var_1 == pytest.approx(304.91610000000003, abs=0.01, rel=0.01)
    rate_0.__sub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -2005
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2005
    var_0 = rate_0.of(int_0)
    assert var_0 == pytest.approx(4020025.0, abs=0.01, rel=0.01)
    var_0.of(int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 1115.37
    rate_0 = module_0.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(11.153699999999999, abs=0.01, rel=0.01)
    var_0 = rate_0.apply_to(rate_0)
    assert var_0 == pytest.approx(124.40502368999998, abs=0.01, rel=0.01)
    var_1 = var_0.__hash__()
    assert var_1 == 933921044152385660
    var_2 = var_0.__ge__(var_0)
    assert var_2 is True
    rate_1 = module_0.Rate(float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1115.37, abs=0.01, rel=0.01)
    none_type_0 = None
    rate_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    float_0 = 3180.311356
    str_0 = "cDek(|"
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+0.000%"
    var_1 = rate_0.__sub__(float_0)
    assert var_1 == pytest.approx(-3180.311356, abs=0.01, rel=0.01)
    rate_0.__mul__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -2005
    rate_0 = module_0.Rate(int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == -2005
    var_0 = rate_0.__repr__()
    assert var_0 == "-200500.000%"
    dict_0 = {rate_0: rate_0, int_0: int_0}
    module_0.Rate(percent_change=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    var_0.__repr__(places=none_type_0)


def test_case_10():
    str_0 = "lK4OROh#X9EZZ@"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    list_0 = []
    bool_0 = True
    float_0 = 3175.972894591964
    str_0 = "MM6X?]kbHvm"
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+1.000%"
    var_1 = var_0.__mul__(bool_0)
    assert var_1 == "+1.000%"
    var_2 = var_1.__gt__(float_0)
    var_3 = var_2.__ge__(none_type_0)
    var_4 = module_0.Rate(percent_change=rate_0)
    assert f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "rate.Rate"
    assert var_4.multiplier == pytest.approx(1.0001, abs=0.01, rel=0.01)
    var_5 = var_4.__truediv__(float_0)
    assert var_5 == pytest.approx(0.00031489563456381093, abs=0.01, rel=0.01)
    var_6 = var_5.__mul__(bool_0)
    assert var_6 == pytest.approx(0.00031489563456381093, abs=0.01, rel=0.01)
    var_7 = var_6.__gt__(list_0)
    var_8 = var_7.__gt__(str_0)
    rate_1 = module_0.Rate(float_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(3175.972894591964, abs=0.01, rel=0.01)
    var_9 = rate_1.__truediv__(bool_0)
    assert var_9 == pytest.approx(3175.972894591964, abs=0.01, rel=0.01)
    rate_1.__le__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    float_0 = 3180.311356
    none_type_0 = None
    none_type_1 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = bool_0.__mul__(bool_0)
    assert var_0 == 0
    var_1 = rate_0.__ne__(bool_0)
    assert var_1 is False
    var_2 = var_0.__gt__(float_0)
    var_3 = var_2.__ge__(none_type_1)
    var_3.of(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    str_0 = "MM6X?]kbHvm"
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+1.000%"
    rate_0.__repr__(relative=str_0, places=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    float_0 = 3175.972894591964
    str_0 = "MM6X?]kbHvm"
    none_type_0 = None
    none_type_1 = None
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = str_0.__mul__(bool_0)
    assert var_1 == ""
    var_2 = var_1.__gt__(float_0)
    var_3 = var_2.__ge__(none_type_1)
    rate_1 = module_0.Rate(percent_change=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_4 = rate_1.__truediv__(float_0)
    assert var_4 == pytest.approx(0.00031486414814899604, abs=0.01, rel=0.01)
    var_5 = rate_0.__le__(bool_0)
    assert var_5 is True
    tuple_0 = (none_type_0, var_3)
    module_0.Rate(bool_0, percent_change=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    float_0 = 3175.972894591964
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+1.000%"
    var_1 = rate_0.__gt__(float_0)
    assert var_1 is False
    var_2 = rate_0.__lt__(float_0)
    assert var_2 is True
    rate_1 = module_0.Rate(percent_change=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(1.0001, abs=0.01, rel=0.01)
    var_3 = rate_1.__truediv__(float_0)
    assert var_3 == pytest.approx(0.00031489563456381093, abs=0.01, rel=0.01)
    var_4 = var_1.__gt__(bool_0)
    assert var_4 is False
    var_5 = rate_0.__ge__(var_4)
    assert var_5 is True
    var_6 = var_5.__gt__(rate_1)
    rate_2 = module_0.Rate(percent_change=var_1)
    assert f"{type(rate_2).__module__}.{type(rate_2).__qualname__}" == "rate.Rate"
    assert rate_2.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_6.__truediv__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    float_0 = 3175.972894591964
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__()
    assert var_0 == "+1.000%"
    var_1 = var_0.__mul__(bool_0)
    assert var_1 == "+1.000%"
    var_2 = var_1.__gt__(var_0)
    assert var_2 is False
    var_3 = rate_0.__ge__(float_0)
    assert var_3 is False
    module_0.Rate(percentage=var_0)
