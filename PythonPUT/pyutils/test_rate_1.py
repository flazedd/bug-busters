# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = rate_0.apply_to(var_1)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = var_2.__sub__(var_1)
    assert var_3 == pytest.approx(-1.0, abs=0.01, rel=0.01)
    var_4 = rate_0.__hash__()
    assert var_4 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_5 = rate_0.of(var_2)
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_6 = var_5.__mul__(rate_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 735.142538
    list_0 = [float_0]
    int_0 = -875
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-7.75, abs=0.01, rel=0.01)
    rate_0.apply_to(list_0)


def test_case_3():
    float_0 = 429.0
    with pytest.raises(ValueError):
        module_0.Rate(float_0, percent_change=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = var_1.__ne__(var_1)
    assert var_2 is False
    var_3 = var_1.__ge__(var_2)
    assert var_3 is True
    var_4 = rate_0.__le__(var_2)
    assert var_4 is False
    var_5 = rate_0.__repr__(relative=bool_0)
    assert var_5 == "-99.000%"
    var_5.of(var_3)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = var_1.__ne__(var_1)
    assert var_2 is False
    var_3 = var_0.__add__(var_0)
    assert var_3 == 0
    var_4 = rate_0.__le__(var_2)
    assert var_4 is True
    var_5 = rate_0.__repr__(relative=bool_0)
    assert var_5 == "+0.000%"
    var_5.of(var_3)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    object_0 = var_0.__float__()
    assert object_0 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = rate_0.__add__(bool_0)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = var_2.__gt__(var_1)
    assert var_3 is False
    var_3.apply_to(object_0)


def test_case_7():
    float_0 = 3693.6
    str_0 = "Jm\x0cQ"
    with pytest.raises(ValueError):
        module_0.Rate(str_0, percent_change=float_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(rate_0)
    assert var_0 is True
    var_1 = rate_0.apply_to(var_0)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(var_1)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = rate_0.__ne__(var_0)
    assert var_3 is True
    var_4 = var_1.__le__(rate_0)
    var_4.of(var_4)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = var_1.__lt__(var_0)
    assert var_2 is False
    var_2.of(var_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__truediv__(rate_0)
    assert var_0 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0.apply_to(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is False
    var_1 = var_0.__truediv__(rate_0)
    var_2 = rate_0.__lt__(rate_0)
    assert var_2 is False
    var_3 = var_2.__ge__(bool_0)
    assert var_3 is True
    var_3.apply_to(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = rate_0.apply_to(var_1)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_3 = rate_0.__sub__(var_2)
    assert var_3 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_4 = var_0.__hash__()
    assert var_4 == 0
    var_5 = var_2.__add__(var_2)
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = ">0<Y)uxYla"
    module_0.Rate(bool_0, percentage=str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_0 = rate_0.__lt__(rate_0)
    assert var_0 is False
    var_1 = rate_0.__ge__(var_0)
    assert var_1 is True
    var_2 = rate_0.__le__(var_1)
    assert var_2 is True
    var_3 = var_1.__ne__(var_1)
    assert var_3 is False
    var_4 = var_0.__add__(var_0)
    assert var_4 == 0
    var_5 = rate_0.__le__(var_3)
    assert var_5 is True
    var_6 = rate_0.__repr__(relative=bool_0)
    assert var_6 == "+0.000%"
    var_6.of(var_4)
