# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "(ZdY\r=kDL"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.Rate(set_0, percentage=set_0, percent_change=str_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    int_0 = 884
    var_1 = rate_0.__eq__(int_0)
    assert var_1 is False
    var_2 = var_0.__eq__(bool_0)
    assert var_2 is True
    var_3 = rate_0.__repr__()
    assert var_3 == "+101.000%"
    var_4 = rate_0.__lt__(rate_0)
    assert var_4 is False
    rate_0.__truediv__(set_0)


def test_case_3():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = -2973
    bool_1 = True
    rate_0 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(int_0)
    assert var_0 is True
    var_1 = var_0.__hash__()
    assert var_1 == 1
    var_2 = var_1.__truediv__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 733.0
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(7.33, abs=0.01, rel=0.01)
    var_0 = rate_0.__ne__(float_0)
    assert var_0 is True
    var_1 = rate_0.__mul__(rate_0)
    assert var_1 == pytest.approx(53.7289, abs=0.01, rel=0.01)
    var_2 = rate_0.__le__(float_0)
    assert var_2 is True
    var_3 = rate_0.__eq__(rate_0)
    assert var_3 is True
    rate_0.__add__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = -5645.024
    float_1 = -51.2
    rate_0 = module_0.Rate(float_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-51.2, abs=0.01, rel=0.01)
    var_0 = rate_0.__repr__(relative=float_0)
    assert var_0 == "-5220.000%"
    var_1 = rate_0.__eq__(float_0)
    assert var_1 is False
    var_1.apply_to(float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\xf7\xd3\x99!0\x14"
    tuple_0 = (bytes_0, bytes_0)
    bool_0 = True
    int_0 = 1898
    bool_1 = True
    rate_0 = module_0.Rate(bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    rate_1 = module_0.Rate(percentage=rate_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_1.of(int_0)
    assert var_0 == pytest.approx(18.98, abs=0.01, rel=0.01)
    var_1 = var_0.__ge__(bool_0)
    assert var_1 is True
    var_1.apply_to(tuple_0)


def test_case_7():
    bool_0 = True
    rate_0 = module_0.Rate(percent_change=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__le__(rate_0)
    assert var_0 is True
    int_0 = 884
    var_1 = rate_0.__eq__(int_0)
    assert var_1 is False
    var_2 = var_0.__eq__(bool_0)
    assert var_2 is True
    var_3 = rate_0.__repr__()
    assert var_3 == "+101.000%"
    var_4 = var_1.__eq__(bool_0)
    assert var_4 is False
    var_5 = rate_0.apply_to(var_4)
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_6 = var_5.__mul__(var_1)
    assert var_6 == pytest.approx(0.0, abs=0.01, rel=0.01)
    int_1 = -2332
    with pytest.raises(ValueError):
        module_0.Rate(int_1, percent_change=var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    tuple_0 = ()
    bool_0 = True
    rate_0 = module_0.Rate(percentage=bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    rate_0.__add__(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    dict_0 = {}
    int_0 = 2169
    bool_1 = True
    rate_0 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__sub__(int_0)
    assert var_0 == pytest.approx(-2168.99, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percent_change=var_0)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(-20.689899999999998, abs=0.01, rel=0.01)
    var_1 = rate_1.__float__()
    assert var_1 == pytest.approx(-20.689899999999998, abs=0.01, rel=0.01)
    var_2 = var_1.__ne__(dict_0)
    var_2.__add__(bool_0)


def test_case_10():
    str_0 = "e"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


def test_case_11():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = -2973
    bool_1 = True
    rate_0 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__ge__(bool_1)
    assert var_0 is False
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_1.__sub__(bool_1)
    assert var_2 == pytest.approx(-1.0, abs=0.01, rel=0.01)
    rate_1 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_1).__module__}.{type(rate_1).__qualname__}" == "rate.Rate"
    assert rate_1.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_3 = rate_1.__ge__(int_0)
    assert var_3 is True
    var_4 = var_3.__hash__()
    assert var_4 == 1
    var_5 = var_4.__hash__()
    assert var_5 == 1
    var_6 = var_4.__truediv__(set_0)


def test_case_12():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = True
    rate_0 = module_0.Rate(percentage=bool_1)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_0 = rate_0.__hash__()
    assert var_0 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_1 = var_0.__hash__()
    assert var_1 == 23058430092136940
    var_2 = var_1.__truediv__(set_0)
