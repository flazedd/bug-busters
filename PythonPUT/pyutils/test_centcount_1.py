# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import centcount as module_0
import re as module_1
import enum as module_2
import builtins as module_3


def test_case_0():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )


def test_case_1():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 USD"


def test_case_2():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__repr__()
    assert var_2 == "0.00 USD"


def test_case_3():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_1.__gt__(cent_count_1)
    assert var_0 is False
    var_1 = cent_count_0.__sub__(cent_count_1)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_1.__gt__(var_0)
    assert var_2 is False
    var_3 = cent_count_1.__sub__(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_1.__rsub__(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"


def test_case_4():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__repr__()
    assert var_1 == "0.00 USD"
    with pytest.raises(TypeError):
        cent_count_0.__truediv__(cent_count_0)


def test_case_5():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    with pytest.raises(TypeError):
        cent_count_0.__truediv__(var_1)


def test_case_6():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__repr__()
    assert var_0 == "0.00 USD"
    var_1 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__gt__(cent_count_0)
    assert var_2 is False
    var_3 = module_0.CentCount(currency=var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert (
        f"{type(var_3.currency).__module__}.{type(var_3.currency).__qualname__}"
        == "centcount.CentCount"
    )


def test_case_7():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False


def test_case_8():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__le__(cent_count_0)
    assert var_1 is True


def test_case_9():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(cent_count_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_10():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0 = cent_count_0.__pos__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_0.__len__(none_type_0)


def test_case_11():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__le__(cent_count_0)
    assert var_1 is True
    var_2 = var_1.__gt__(var_1)
    assert var_2 is False
    var_3 = var_0.__int__()
    assert var_3 == 0


def test_case_12():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    int_0 = cent_count_0.__hash__()
    var_1 = cent_count_0.__gt__(cent_count_0)
    assert var_1 is False


def test_case_13():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = module_1.error(int_0, pos=cent_count_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "re.error"
    assert var_0.pattern is None
    assert (
        f"{type(var_0.pos).__module__}.{type(var_0.pos).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_0.lineno is None
    assert var_0.colno is None
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    with pytest.raises(TypeError):
        cent_count_0.__sub__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    none_type_1 = None
    cent_count_0 = module_0.CentCount(currency=none_type_0, strict_mode=none_type_1)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is None
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency is None
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    float_0 = -721.39402
    module_1.compile(float_0, float_0)


def test_case_15():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_1.__ne__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_1.__gt__(var_0)
    assert var_1 is False


def test_case_16():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__le__(cent_count_0)
    assert var_0 is True
    var_1 = cent_count_0.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = var_1.__le__(var_0)
    assert var_2 is True
    var_3 = var_2.__int__()
    assert var_3 == 1


def test_case_17():
    str_0 = "N,BZ)"
    with pytest.raises(ValueError):
        module_0.CentCount(str_0)


def test_case_18():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.currency == "USD"
    var_1 = cent_count_1.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__le__(cent_count_1)
    assert var_3 is True
    var_4 = cent_count_1.__gt__(cent_count_1)
    assert var_4 is False
    var_5 = cent_count_0.__sub__(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == -1
    assert var_5.currency == "USD"
    var_6 = var_2.__gt__(var_4)
    assert var_6 is False
    var_7 = cent_count_1.__sub__(var_4)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "centcount.CentCount"
    )
    assert var_7.strict_mode is False
    assert var_7.centcount == 0
    assert var_7.currency == "USD"
    var_8 = var_5.__repr__()
    assert var_8 == "-1.99 USD"
    var_9 = cent_count_0.__eq__(int_0)
    assert var_9 is False
    var_10 = cent_count_1.__add__(var_8)
    assert (
        f"{type(var_10).__module__}.{type(var_10).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_10.strict_mode is False
    assert var_10.centcount == -199
    assert var_10.currency == "USD"
    var_11 = var_10.__neg__()
    assert (
        f"{type(var_11).__module__}.{type(var_11).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_11.strict_mode is False
    assert var_11.centcount == 199
    assert var_11.currency == "USD"


def test_case_19():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_1.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__ge__(cent_count_0)
    assert var_1 is True
    var_2 = cent_count_0.__le__(cent_count_1)
    assert var_2 is True
    var_3 = var_0.__le__(var_2)
    assert var_3 is True
    var_4 = var_0.__gt__(var_2)
    assert var_4 is False
    var_5 = var_3.__gt__(cent_count_1)
    var_6 = var_0.__int__()
    assert var_6 == 0


def test_case_20():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__add__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"


def test_case_21():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__gt__(cent_count_0)
    assert var_0 is False
    var_1 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"


def test_case_22():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    int_1 = cent_count_1.__hash__()
    var_1 = cent_count_1.__sub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__sub__(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__le__(cent_count_0)
    assert var_5 is True
    var_6 = var_2.__int__()
    var_7 = cent_count_1.__gt__(cent_count_1)
    assert var_7 is False
    var_8 = cent_count_1.__neg__()
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "centcount.CentCount"
    )
    assert var_8.strict_mode is False
    assert var_8.centcount == 0
    assert var_8.currency == "USD"
    var_9 = cent_count_0.__sub__(var_5)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "centcount.CentCount"
    )
    assert var_9.strict_mode is False
    assert var_9.centcount == -1
    assert var_9.currency == "USD"
    var_10 = cent_count_0.__pos__()
    assert (
        f"{type(var_10).__module__}.{type(var_10).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_10.strict_mode is False
    assert var_10.centcount == 0
    assert var_10.currency == "USD"
    with pytest.raises(TypeError):
        var_8.__mul__(var_4)


def test_case_23():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__le__(cent_count_0)
    assert var_0 is True
    var_1 = var_0.__int__()
    assert var_1 == 1
    var_2 = cent_count_0.__gt__(cent_count_0)
    assert var_2 is False
    var_3 = cent_count_0.__ne__(var_2)
    assert var_3 is False


def test_case_24():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__sub__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__le__(cent_count_0)
    assert var_2 is True
    var_3 = var_0.__int__()
    var_4 = var_2.__int__()
    assert var_4 == 1
    var_5 = cent_count_1.__gt__(cent_count_1)
    assert var_5 is False
    var_6 = cent_count_0.__sub__(var_2)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.centcount == -1
    assert var_6.currency == "USD"
    var_7 = var_3.__gt__(var_5)
    assert var_7 is True
    var_8 = var_7.__rsub__(cent_count_1)
    var_9 = var_0.__add__(cent_count_0)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "centcount.CentCount"
    )
    assert var_9.strict_mode is False
    assert var_9.currency == "USD"
    var_10 = var_9.__mul__(var_5)
    assert (
        f"{type(var_10).__module__}.{type(var_10).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_10.strict_mode is False
    assert var_10.centcount == 0
    assert var_10.currency == "USD"


@pytest.mark.xfail(strict=True)
def test_case_25():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    int_1 = var_0.__hash__()
    assert int_1 == 1
    var_1 = cent_count_1.__float__()
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 0
    assert var_2.currency == "USD"
    var_3 = var_0.__rsub__(var_2)
    var_4 = var_1.__sub__(var_2)
    var_5 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.currency == "USD"
    var_6 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_7 = var_0.__le__(var_6)
    var_3.__int__()


@pytest.mark.xfail(strict=True)
def test_case_26():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    int_1 = cent_count_1.__hash__()
    var_0 = cent_count_1.__sub__(cent_count_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = var_1.__le__(var_0)
    assert var_4 is False
    var_5 = cent_count_0.__int__()
    assert var_5 == 0
    var_6 = var_0.__int__()
    assert var_6 == 0
    var_7 = var_4.__gt__(var_6)
    assert var_7 is False
    var_8 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "centcount.CentCount"
    )
    assert var_8.strict_mode is False
    assert var_8.currency == "USD"
    module_2.unique(var_4)


def test_case_27():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    var_0 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.currency == "USD"
    var_1 = cent_count_0.__le__(int_0)
    assert var_1 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__sub__(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__le__(cent_count_0)
    assert var_5 is True
    var_6 = var_2.__int__()
    var_7 = var_5.__int__()
    assert var_7 == 1
    var_8 = cent_count_1.__gt__(cent_count_1)
    assert var_8 is False
    var_9 = cent_count_0.__sub__(var_5)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "centcount.CentCount"
    )
    assert var_9.strict_mode is False
    assert var_9.centcount == -1
    assert var_9.currency == "USD"
    var_10 = var_6.__neg__()
    var_11 = var_7.__repr__()
    assert var_11 == "1"
    var_12 = var_7.__float__()
    assert var_12 == pytest.approx(1.0, abs=0.01, rel=0.01)
    str_0 = "):9"
    cent_count_2 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode is False
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "):9"
    with pytest.raises(TypeError):
        cent_count_2.__rsub__(var_9)


def test_case_28():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    none_type_0 = None
    var_0 = cent_count_0.__ne__(none_type_0)
    assert var_0 is True
    bool_0 = False
    var_1 = var_0.__add__(bool_0)
    assert var_1 == 1
    var_2 = cent_count_0.__le__(int_0)
    assert var_2 is True
    var_3 = cent_count_1.__neg__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.centcount == 0
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__add__(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 1
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.currency == "USD"
    var_6 = cent_count_0.__sub__(var_5)
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}" == "centcount.CentCount"
    )
    assert var_6.strict_mode is False
    assert var_6.currency == "USD"
    var_7 = cent_count_0.__le__(cent_count_1)
    assert var_7 is True
    var_8 = cent_count_1.__gt__(cent_count_1)
    assert var_8 is False
    var_9 = cent_count_0.__sub__(var_7)
    assert (
        f"{type(var_9).__module__}.{type(var_9).__qualname__}" == "centcount.CentCount"
    )
    assert var_9.strict_mode is False
    assert var_9.centcount == -1
    assert var_9.currency == "USD"
    var_10 = var_2.__gt__(var_8)
    assert var_10 is True
    var_11 = cent_count_1.__sub__(var_8)
    assert (
        f"{type(var_11).__module__}.{type(var_11).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_11.strict_mode is False
    assert var_11.centcount == 0
    assert var_11.currency == "USD"
    var_12 = var_9.__repr__()
    assert var_12 == "-1.99 USD"
    var_13 = var_4.__rsub__(var_10)
    assert (
        f"{type(var_13).__module__}.{type(var_13).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_13.strict_mode is False
    assert var_13.centcount == 0
    assert var_13.currency == "USD"
    with pytest.raises(TypeError):
        var_12.__add__(var_10)


def test_case_29():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    var_0 = cent_count_0.__ne__(cent_count_0)
    assert var_0 is False
    cent_count_1 = module_0.CentCount(currency=int_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    int_1 = cent_count_1.__hash__()
    var_1 = int_0.__sub__(cent_count_1)
    var_2 = var_0.__rsub__(int_1)
    with pytest.raises(TypeError):
        cent_count_0.__sub__(cent_count_1)


def test_case_30():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    var_0 = cent_count_0.__neg__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "centcount.CentCount"
    )
    assert var_0.strict_mode is False
    assert var_0.centcount == 0
    assert var_0.currency == "USD"
    var_1 = var_0.__le__(cent_count_0)
    assert var_1 is True
    int_0 = cent_count_0.__hash__()
    var_2 = cent_count_0.__sub__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == -1
    assert var_2.currency == "USD"
    var_3 = var_2.__repr__()
    assert var_3 == "-1.99 USD"
    var_4 = cent_count_0.__gt__(cent_count_0)
    assert var_4 is False
    var_5 = cent_count_0.__add__(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.centcount == -199
    assert var_5.currency == "USD"


def test_case_31():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    int_1 = cent_count_1.__hash__()
    var_1 = cent_count_1.__sub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__sub__(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__rsub__(cent_count_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "centcount.CentCount"
    )
    assert var_4.strict_mode is False
    assert var_4.centcount == 0
    assert var_4.currency == "USD"
    var_5 = cent_count_0.__le__(cent_count_0)
    assert var_5 is True
    var_6 = var_2.__int__()
    cent_count_2 = module_0.CentCount(strict_mode=int_1)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "USD"
    var_7 = cent_count_1.__ne__(var_4)
    assert var_7 is False
    none_type_0 = None
    with pytest.raises(TypeError):
        cent_count_2.__gt__(none_type_0)


def test_case_32():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    int_1 = cent_count_1.__hash__()
    var_1 = cent_count_1.__sub__(cent_count_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__sub__(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.currency == "USD"
    var_4 = cent_count_0.__le__(cent_count_0)
    assert var_4 is True
    var_5 = var_2.__int__()
    var_6 = cent_count_1.__gt__(cent_count_1)
    assert var_6 is False
    var_7 = cent_count_1.__neg__()
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "centcount.CentCount"
    )
    assert var_7.strict_mode is False
    assert var_7.centcount == 0
    assert var_7.currency == "USD"
    var_8 = cent_count_0.__sub__(var_4)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}" == "centcount.CentCount"
    )
    assert var_8.strict_mode is False
    assert var_8.centcount == -1
    assert var_8.currency == "USD"
    var_9 = var_3.__gt__(cent_count_0)
    assert var_9 is False
    var_10 = var_2.__ge__(var_1)
    assert var_10 is True
    var_11 = var_10.__rsub__(int_1)
    var_12 = bool_0.__add__(int_0)
    var_13 = var_11.__int__()


def test_case_33():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount(currency=var_0, strict_mode=bool_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is True
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency is True
    int_1 = cent_count_1.__hash__()
    with pytest.raises(TypeError):
        cent_count_1.__sub__(int_1)


def test_case_34():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_0.__le__(int_0)
    assert var_0 is True
    var_1 = cent_count_1.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 1
    assert var_2.currency == "USD"
    cent_count_2 = module_0.CentCount(cent_count_0, strict_mode=int_0)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "USD"
    with pytest.raises(TypeError):
        cent_count_2.__add__(var_0)


def test_case_35():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    str_0 = "mpg70j\t0{q5sz$Jsj"
    cent_count_2 = module_0.CentCount(currency=str_0, strict_mode=str_0)
    assert (
        f"{type(cent_count_2).__module__}.{type(cent_count_2).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_2.strict_mode == "mpg70j\t0{q5sz$Jsj"
    assert cent_count_2.centcount == 0
    assert cent_count_2.currency == "mpg70j\t0{q5sz$Jsj"
    var_0 = cent_count_0.__le__(cent_count_1)
    assert var_0 is True
    with pytest.raises(TypeError):
        cent_count_1.__lt__(cent_count_2)


def test_case_36():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = True
    var_0 = cent_count_0.__ne__(bool_0)
    assert var_0 is True
    cent_count_1 = module_0.CentCount(currency=var_0, strict_mode=bool_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is True
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency is True
    with pytest.raises(TypeError):
        cent_count_1.__rsub__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount(strict_mode=cent_count_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert (
        f"{type(cent_count_1.strict_mode).__module__}.{type(cent_count_1.strict_mode).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_1.__le__(cent_count_0)
    assert var_0 is True
    cent_count_1.__ne__(var_0)


def test_case_38():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount(currency=int_0, strict_mode=int_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.centcount == 0
    var_0 = cent_count_1.__le__(cent_count_1)
    assert var_0 is True
    var_1 = cent_count_1.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    with pytest.raises(TypeError):
        cent_count_0.__add__(var_1)


def test_case_39():
    base_exception_0 = module_3.BaseException()
    cent_count_0 = module_0.CentCount(strict_mode=base_exception_0)
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert (
        f"{type(cent_count_0.strict_mode).__module__}.{type(cent_count_0.strict_mode).__qualname__}"
        == "builtins.BaseException"
    )
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    bool_0 = False
    with pytest.raises(TypeError):
        cent_count_0.__lt__(bool_0)


def test_case_40():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    str_0 = "1m{}iBmGFn\r"
    cent_count_1 = module_0.CentCount(currency=str_0)
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "1m{}iBmGFn\r"
    var_0 = cent_count_1.__le__(int_0)
    assert var_0 is True
    var_1 = cent_count_0.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_1.__rsub__(int_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.currency == "1m{}iBmGFn\r"
    var_3 = cent_count_1.__ge__(var_0)
    assert var_3 is False
    var_4 = var_0.__sub__(var_0)
    assert var_4 == 0
    var_5 = cent_count_0.__le__(var_4)
    assert var_5 is True
    int_1 = var_4.__hash__()
    assert int_1 == 0
    var_6 = var_2.__gt__(int_0)
    assert var_6 is False
    var_7 = var_2.__sub__(var_5)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}" == "centcount.CentCount"
    )
    assert var_7.strict_mode is False
    assert var_7.currency == "1m{}iBmGFn\r"
    var_8 = cent_count_1.__gt__(var_3)
    assert var_8 is False
    var_9 = var_3.__repr__()
    assert var_9 == "False"
    with pytest.raises(TypeError):
        var_7.__gt__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_41():
    cent_count_0 = module_0.CentCount()
    assert (
        f"{type(cent_count_0).__module__}.{type(cent_count_0).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_0.strict_mode is False
    assert cent_count_0.centcount == 0
    assert cent_count_0.currency == "USD"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.filters == []
    assert module_0.logger.name == "centcount"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.propagate is True
    assert module_0.logger.handlers == []
    assert module_0.logger.disabled is False
    assert (
        f"{type(module_0.logger.manager).__module__}.{type(module_0.logger.manager).__qualname__}"
        == "logging.Manager"
    )
    assert (
        f"{type(module_0.CentCount.CENTCOUNT_RE).__module__}.{type(module_0.CentCount.CENTCOUNT_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.CURRENCY_RE).__module__}.{type(module_0.CentCount.CURRENCY_RE).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.CentCount.parse).__module__}.{type(module_0.CentCount.parse).__qualname__}"
        == "builtins.method"
    )
    int_0 = cent_count_0.__hash__()
    cent_count_1 = module_0.CentCount()
    assert (
        f"{type(cent_count_1).__module__}.{type(cent_count_1).__qualname__}"
        == "centcount.CentCount"
    )
    assert cent_count_1.strict_mode is False
    assert cent_count_1.centcount == 0
    assert cent_count_1.currency == "USD"
    var_0 = cent_count_0.__le__(int_0)
    assert var_0 is True
    var_1 = cent_count_1.__neg__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "centcount.CentCount"
    )
    assert var_1.strict_mode is False
    assert var_1.centcount == 0
    assert var_1.currency == "USD"
    var_2 = cent_count_0.__add__(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "centcount.CentCount"
    )
    assert var_2.strict_mode is False
    assert var_2.centcount == 1
    assert var_2.currency == "USD"
    var_3 = cent_count_0.__rsub__(int_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "centcount.CentCount"
    )
    assert var_3.strict_mode is False
    assert var_3.currency == "USD"
    var_4 = var_2.__ge__(var_2)
    assert var_4 is True
    var_5 = cent_count_0.__sub__(var_3)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}" == "centcount.CentCount"
    )
    assert var_5.strict_mode is False
    assert var_5.currency == "USD"
    var_6 = cent_count_0.__le__(cent_count_1)
    assert var_6 is True
    int_1 = cent_count_1.__hash__()
    var_7 = cent_count_1.__gt__(cent_count_1)
    assert var_7 is False
    var_8 = cent_count_1.__float__()
    assert var_8 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_9 = var_7.__gt__(var_7)
    assert var_9 is False
    var_10 = var_8.__repr__()
    assert var_10 == "0.0"
    var_11 = var_5.__gt__(cent_count_1)
    assert var_11 is False
    var_12 = cent_count_1.__add__(var_10)
    assert (
        f"{type(var_12).__module__}.{type(var_12).__qualname__}"
        == "centcount.CentCount"
    )
    assert var_12.strict_mode is False
    assert var_12.centcount == 0
    assert var_12.currency == "USD"
    var_13 = var_2.__gt__(var_3)
    assert var_13 is False
    var_14 = cent_count_1.__ne__(int_0)
    assert var_14 is True
    var_14.__getitem__(var_6, var_0)
