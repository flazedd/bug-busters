# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import rate as module_0


def test_case_0():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.Rate(bool_0, percentage=bool_0, percent_change=bool_0)


def test_case_1():
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -4673.478587
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-46.734785869999996, abs=0.01, rel=0.01)
    var_0 = rate_0.__float__()
    assert var_0 == pytest.approx(-46.734785869999996, abs=0.01, rel=0.01)
    var_1 = var_0.__float__()
    assert var_1 == pytest.approx(-46.734785869999996, abs=0.01, rel=0.01)
    var_2 = var_1.__eq__(float_0)
    assert var_2 is False
    var_3 = var_2.__ge__(float_0)
    var_3.__sub__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    int_0 = 1269
    var_0 = rate_0.__le__(int_0)
    assert var_0 is True
    int_1 = 669
    var_1 = rate_0.of(int_1)
    assert var_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_2 = set_0.__ne__(var_1)
    var_3 = var_1.__ge__(int_0)
    assert var_3 is False
    var_4 = rate_0.__hash__()
    assert var_4 is False
    var_5 = var_4.__ge__(var_1)
    rate_0.__truediv__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 787
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=none_type_0, percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(78.67690000000002, abs=0.01, rel=0.01)
    var_1 = rate_0.__sub__(var_0)
    assert var_1 == pytest.approx(-69.80690000000001, abs=0.01, rel=0.01)
    var_2 = rate_0.__ge__(rate_0)
    assert var_2 is True
    var_3 = rate_0.__repr__()
    assert var_3 == "+887.000%"
    var_4 = var_1.__gt__(var_3)
    var_5 = var_0.__sub__(var_0)
    assert var_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_6 = none_type_0.__le__(var_3)
    var_3.of(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 1469.34829
    rate_0 = module_0.Rate(float_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(1469.34829, abs=0.01, rel=0.01)
    var_0 = rate_0.of(rate_0)
    assert var_0 == pytest.approx(2158984.3973259237, abs=0.01, rel=0.01)
    str_0 = "qV%"
    module_0.Rate(percentage=str_0)


def test_case_6():
    int_0 = 787
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=none_type_0, percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(78.67690000000002, abs=0.01, rel=0.01)
    var_1 = rate_0.__sub__(var_0)
    assert var_1 == pytest.approx(-69.80690000000001, abs=0.01, rel=0.01)
    var_2 = rate_0.__ge__(rate_0)
    assert var_2 is True
    var_3 = var_1.__gt__(int_0)
    assert var_3 is False
    var_4 = rate_0.__float__()
    assert var_4 == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_5 = none_type_0.__le__(var_2)
    list_0 = []
    list_1 = [list_0, var_1]
    tuple_0 = (list_1,)
    var_6 = var_4.__ne__(tuple_0)
    var_7 = int_0.__eq__(list_1)
    with pytest.raises(ValueError):
        module_0.Rate()


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "s&z$d^\tYm|O\tF"
    int_0 = -3141
    rate_0 = module_0.Rate(percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(-30.41, abs=0.01, rel=0.01)
    rate_0.__truediv__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 787
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(7.87, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(61.9369, abs=0.01, rel=0.01)
    bool_0 = True
    var_1 = rate_0.__truediv__(int_0)
    assert var_1 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_2 = rate_0.__sub__(var_0)
    assert var_2 == pytest.approx(-54.066900000000004, abs=0.01, rel=0.01)
    var_3 = rate_0.of(bool_0)
    assert var_3 == pytest.approx(7.87, abs=0.01, rel=0.01)
    var_4 = rate_0.__repr__()
    assert var_4 == "+787.000%"
    var_5 = var_2.__gt__(var_4)
    rate_0.__add__(var_4)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    none_type_0 = None
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is True
    rate_0.__ne__(none_type_0)


def test_case_10():
    str_0 = "\\0vBW]"
    with pytest.raises(ValueError):
        module_0.Rate(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 787
    none_type_0 = None
    rate_0 = module_0.Rate(percentage=none_type_0, percent_change=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(78.67690000000002, abs=0.01, rel=0.01)
    var_1 = rate_0.__sub__(var_0)
    assert var_1 == pytest.approx(-69.80690000000001, abs=0.01, rel=0.01)
    var_2 = rate_0.__ge__(rate_0)
    assert var_2 is True
    var_3 = rate_0.of(var_1)
    assert var_3 == pytest.approx(-619.1872030000002, abs=0.01, rel=0.01)
    var_4 = rate_0.apply_to(var_2)
    assert var_4 == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_5 = var_0.__mul__(var_3)
    assert var_5 == pytest.approx(-48715.729651710724, abs=0.01, rel=0.01)
    var_6 = rate_0.__repr__()
    assert var_6 == "+887.000%"
    var_7 = var_1.__gt__(var_6)
    var_8 = int_0.__sub__(int_0)
    assert var_8 == 0
    var_9 = rate_0.__float__()
    assert var_9 == pytest.approx(8.870000000000001, abs=0.01, rel=0.01)
    var_10 = var_5.__le__(var_3)
    assert var_10 is True
    var_6.of(rate_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 787
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(7.87, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(61.9369, abs=0.01, rel=0.01)
    var_1 = rate_0.__truediv__(int_0)
    assert var_1 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_2 = rate_0.__sub__(var_0)
    assert var_2 == pytest.approx(-54.066900000000004, abs=0.01, rel=0.01)
    var_3 = var_1.__ge__(var_2)
    assert var_3 is True
    var_4 = rate_0.__ge__(var_3)
    assert var_4 is True
    var_5 = rate_0.__repr__()
    assert var_5 == "+787.000%"
    rate_0.__add__(var_5)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 787
    rate_0 = module_0.Rate(percentage=int_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier == pytest.approx(7.87, abs=0.01, rel=0.01)
    var_0 = rate_0.__mul__(rate_0)
    assert var_0 == pytest.approx(61.9369, abs=0.01, rel=0.01)
    bool_0 = True
    var_1 = rate_0.__truediv__(int_0)
    assert var_1 == pytest.approx(0.01, abs=0.01, rel=0.01)
    var_2 = rate_0.__repr__(relative=bool_0)
    assert var_2 == "+687.000%"
    var_3 = var_1.__ge__(var_2)
    rate_0.__ge__(var_3)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    rate_0 = module_0.Rate(bool_0)
    assert f"{type(rate_0).__module__}.{type(rate_0).__qualname__}" == "rate.Rate"
    assert rate_0.multiplier is False
    var_0 = rate_0.__le__(bool_0)
    assert var_0 is True
    rate_0.__truediv__(rate_0)
