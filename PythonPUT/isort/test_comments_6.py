# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import comments as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "WXC]KiG,=n]\r`?h{pV`x"
    str_1 = "dnxg'|^"
    tuple_0 = (str_0, str_1)
    str_2 = module_0.add_to_line(tuple_0)
    assert str_2 == " WXC]KiG,=n]\r`?h{pV`x; dnxg'|^"
    str_3 = "}2W3:=3)\x0c#],=4p7oL,5"
    none_type_0 = None
    str_4 = module_0.add_to_line(none_type_0, str_3)
    assert str_4 == "}2W3:=3)\x0c#],=4p7oL,5"
    str_5 = "Q6th7:@#|3/A.L"
    tuple_1 = module_0.parse(str_5)
    tuple_2 = (str_3, str_3)
    module_0.parse(tuple_2)


def test_case_1():
    str_0 = "D,F\tywn(RL ~z"
    tuple_0 = module_0.parse(str_0)


def test_case_2():
    str_0 = "Y!\\8\x0czZXmXM"
    tuple_0 = module_0.parse(str_0)
    str_1 = "Dl/BT@w.#PX"
    str_2 = module_0.add_to_line(str_0, str_0, comment_prefix=str_0)
    assert str_2 == "Y!\\8\x0czZXmXMY!\\8\x0czZXmXM Y; !; \\; 8; \x0c; z; Z; X; m; M"
    bool_0 = True
    tuple_1 = module_0.parse(str_0)
    str_3 = module_0.add_to_line(str_1, removed=bool_0)
    assert str_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    str_0 = module_0.add_to_line(tuple_0)
    assert str_0 == ""
    str_1 = "(M!\x0b*#Jn\\8~Y\\r"
    dict_0 = {str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2361
    bool_0 = False
    none_type_0 = None
    module_0.add_to_line(int_0, removed=bool_0, comment_prefix=none_type_0)
