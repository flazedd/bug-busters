# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import comments as module_0


def test_case_0():
    str_0 = "j"
    tuple_0 = module_0.parse(str_0)
    none_type_0 = None
    str_1 = module_0.add_to_line(none_type_0, removed=none_type_0)
    assert str_1 == ""
    tuple_1 = module_0.parse(str_0)
    str_2 = "x*o}*A}C'drr#"
    tuple_2 = module_0.parse(str_2)
    str_3 = module_0.add_to_line(
        tuple_0, removed=none_type_0, comment_prefix=none_type_0
    )
    assert str_3 == "None j; "
    bool_0 = False
    str_4 = module_0.add_to_line(none_type_0, removed=bool_0)
    assert str_4 == ""
    str_5 = module_0.add_to_line(none_type_0, comment_prefix=none_type_0)
    assert str_5 == ""
    tuple_3 = module_0.parse(str_5)
    str_6 = module_0.add_to_line(none_type_0, removed=bool_0)
    assert str_6 == ""
    tuple_4 = module_0.parse(str_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "+s}m{nZg=_Cm!"
    module_0.add_to_line(set_0, comment_prefix=str_0)


def test_case_2():
    str_0 = "w=(\t*\\O`#;"
    str_1 = ">F$+(om`#B)Y! _C:`y>"
    list_0 = [str_1, str_1, str_0, str_0]
    bool_0 = True
    str_2 = module_0.add_to_line(list_0, removed=bool_0)
    assert str_2 == ""
    str_3 = "\tY9y$E"
    tuple_0 = (str_0, str_3)
    str_4 = module_0.add_to_line(tuple_0, removed=str_0, comment_prefix=str_0)
    assert str_4 == ""


def test_case_3():
    none_type_0 = None
    bool_0 = False
    str_0 = module_0.add_to_line(none_type_0, removed=bool_0)
    assert str_0 == ""


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.parse(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = -716
    module_0.add_to_line(int_0)


def test_case_6():
    str_0 = "QXtWq@9zgOzHE"
    str_1 = module_0.add_to_line(str_0)
    assert str_1 == " Q; X; t; W; q; @; 9; z; g; O; H; E"
    none_type_0 = None
    tuple_0 = module_0.parse(str_0)
    str_2 = "X)FcAd]>;HYA0"
    tuple_1 = module_0.parse(str_2)
    str_3 = module_0.add_to_line(none_type_0)
    assert str_3 == ""
