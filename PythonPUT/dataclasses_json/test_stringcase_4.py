# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import re as module_1
import enum as module_2
import builtins as module_3


def test_case_0():
    float_0 = 5002.65
    var_0 = module_0.capitalcase(float_0)
    assert var_0 == "5002.65"


def test_case_1():
    none_type_0 = None
    var_0 = module_0.spinalcase(none_type_0)
    assert var_0 == "none"


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"\xb2\x1c\x1cE\x97\x98\x18\xe1#\xaa\x9ft\xb1\xdf\xbd\x93Ys\x08'"
    var_0 = module_0.camelcase(bytes_0)
    assert (
        var_0
        == 'b"\\xb2\\x1c\\x1cE\\x97\\x98\\x18\\xe1#\\xaa\\x9ft\\xb1\\xdf\\xbd\\x93Ys\\x08\'"'
    )
    module_1.split(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1143
    var_0 = module_0.spinalcase(int_0)
    assert var_0 == "--1-1-4-3"
    var_1 = module_0.pascalcase(var_0)
    assert var_1 == "-1143"
    str_0 = "W4."
    var_2 = module_0.snakecase(int_0)
    assert var_2 == "__1_1_4_3"
    none_type_0 = None
    str_1 = ""
    var_3 = module_0.snakecase(var_2)
    assert var_3 == "___1__1__4__3"
    var_4 = module_0.camelcase(var_2)
    assert var_4 == "_1143"
    var_5 = module_0.snakecase(str_1)
    assert var_5 == ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_2.EnumMeta(**dict_0)


def test_case_4():
    bool_0 = True
    var_0 = module_0.pascalcase(bool_0)
    assert var_0 == "True"
    int_0 = -2341
    var_1 = module_0.capitalcase(bool_0)
    assert var_1 == "True"
    var_2 = module_0.spinalcase(int_0)
    assert var_2 == "--2-3-4-1"


def test_case_5():
    bool_0 = True
    var_0 = module_0.pascalcase(bool_0)
    assert var_0 == "True"
    int_0 = -2341
    var_1 = module_0.capitalcase(int_0)
    assert var_1 == "-2341"


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "RF}"
    var_0 = module_0.camelcase(str_0)
    assert var_0 == "rF}"
    bool_0 = False
    var_1 = module_0.uplowcase(var_0, var_0)
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    base_exception_0 = module_3.BaseException()
    var_0 = module_0.camelcase(base_exception_0)
    assert var_0 == ""
    var_1 = module_0.uplowcase(var_0, base_exception_0)
    var_2 = module_0.camelcase(var_0)
    assert var_2 == ""
    var_3 = module_0.spinalcase(var_1)
    assert var_3 == "none"
    var_4 = module_0.capitalcase(base_exception_0)
    assert var_4 == ""
    var_5 = module_0.spinalcase(base_exception_0)
    assert var_5 == ""
    var_5.scan(base_exception_0)
