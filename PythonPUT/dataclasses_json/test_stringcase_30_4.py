# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import builtins as module_1
import enum as module_2
import re as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.capitalcase(none_type_0)
    assert var_0 == "None"
    var_1 = module_0.spinalcase(var_0)
    assert var_1 == "none"


def test_case_1():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.pascalcase(none_type_0)
    assert var_0 == "None"
    var_1 = module_0.capitalcase(none_type_0)
    assert var_1 == "None"
    list_0 = [bool_0, bool_0]
    var_2 = module_0.snakecase(list_0)
    assert var_2 == "[_false,__false]"


def test_case_2():
    list_0 = []
    var_0 = module_0.pascalcase(list_0)
    assert var_0 == "[]"
    exception_0 = module_1.Exception(*list_0)
    var_1 = module_0.snakecase(exception_0)
    assert var_1 == ""
    var_2 = module_0.camelcase(var_0)
    assert var_2 == "[]"
    var_3 = module_0.spinalcase(list_0)
    assert var_3 == "[]"
    var_4 = module_0.camelcase(var_0)
    assert var_4 == "[]"
    var_5 = module_0.camelcase(exception_0)
    assert var_5 == ""
    var_6 = module_0.camelcase(var_0)
    assert var_6 == "[]"
    var_7 = module_0.snakecase(var_1)
    assert var_7 == ""


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xb9\x95\xfe\xef\xe5\x12\x12T;\xa7%J\xf9q"
    module_2.unique(bytes_0)


def test_case_4():
    tuple_0 = ()
    var_0 = module_0.spinalcase(tuple_0)
    assert var_0 == "()"
    var_1 = module_0.pascalcase(tuple_0)
    assert var_1 == "()"
    var_2 = module_0.spinalcase(var_1)
    assert var_2 == "()"
    var_3 = module_0.uplowcase(tuple_0, var_1)
    var_4 = module_0.spinalcase(var_2)
    assert var_4 == "()"
    str_0 = "<M^MY"
    var_5 = module_0.pascalcase(str_0)
    assert var_5 == "<M^MY"
    var_6 = module_0.camelcase(str_0)
    assert var_6 == "<M^MY"
    var_7 = module_0.snakecase(var_5)
    assert var_7 == "<_m^_m_y"
    var_8 = module_0.pascalcase(var_7)
    assert var_8 == "<M^MY"
    with pytest.raises(TypeError):
        var_5.__contains__(str_0, var_5)


def test_case_5():
    str_0 = '@\x0cb>"XBe}H~J'
    var_0 = module_0.spinalcase(str_0)
    assert var_0 == '@-b>"-x-be}-h~-j'
    error_0 = module_3.error(var_0)
    assert f"{type(error_0).__module__}.{type(error_0).__qualname__}" == "re.error"
    assert error_0.msg == '@-b>"-x-be}-h~-j'
    assert error_0.pattern is None
    assert error_0.pos is None
    assert error_0.lineno is None
    assert error_0.colno is None
    assert module_3.ASCII == module_3.RegexFlag.ASCII
    assert module_3.A == module_3.RegexFlag.ASCII
    assert module_3.IGNORECASE == module_3.RegexFlag.IGNORECASE
    assert module_3.I == module_3.RegexFlag.IGNORECASE
    assert module_3.LOCALE == module_3.RegexFlag.LOCALE
    assert module_3.L == module_3.RegexFlag.LOCALE
    assert module_3.UNICODE == module_3.RegexFlag.UNICODE
    assert module_3.U == module_3.RegexFlag.UNICODE
    assert module_3.MULTILINE == module_3.RegexFlag.MULTILINE
    assert module_3.M == module_3.RegexFlag.MULTILINE
    assert module_3.DOTALL == module_3.RegexFlag.DOTALL
    assert module_3.S == module_3.RegexFlag.DOTALL
    assert module_3.VERBOSE == module_3.RegexFlag.VERBOSE
    assert module_3.X == module_3.RegexFlag.VERBOSE
    assert module_3.TEMPLATE == module_3.RegexFlag.TEMPLATE
    assert module_3.T == module_3.RegexFlag.TEMPLATE
    assert module_3.DEBUG == module_3.RegexFlag.DEBUG
    tuple_0 = (error_0, var_0)
    var_1 = module_0.capitalcase(tuple_0)
    assert var_1 == "(error('@-b>\"-x-be}-h~-j'), '@-b>\"-x-be}-h~-j')"


def test_case_6():
    none_type_0 = None
    var_0 = module_0.uplowcase(none_type_0, none_type_0)
    none_type_1 = None
    var_1 = module_0.pascalcase(none_type_1)
    assert var_1 == "None"
    var_2 = module_0.pascalcase(none_type_1)
    assert var_2 == "None"
    with pytest.raises(AttributeError):
        var_2.__getattr__(var_2, none_type_1)


def test_case_7():
    tuple_0 = ()
    var_0 = module_0.spinalcase(tuple_0)
    assert var_0 == "()"
    var_1 = module_0.pascalcase(tuple_0)
    assert var_1 == "()"
    var_2 = module_0.spinalcase(var_1)
    assert var_2 == "()"
    var_3 = module_0.uplowcase(tuple_0, var_1)
    var_4 = module_0.spinalcase(var_2)
    assert var_4 == "()"
    str_0 = ""
    var_5 = module_0.pascalcase(str_0)
    assert var_5 == ""
    var_6 = module_0.camelcase(str_0)
    assert var_6 == ""
    var_7 = module_0.snakecase(var_5)
    assert var_7 == ""
    var_8 = module_0.camelcase(var_1)
    assert var_8 == "()"
    var_9 = module_0.pascalcase(var_7)
    assert var_9 == ""
    with pytest.raises(TypeError):
        var_5.__contains__(str_0, var_5)
