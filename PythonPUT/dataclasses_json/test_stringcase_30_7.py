# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import builtins as module_1
import re as module_2


def test_case_0():
    str_0 = '!\n"+8PU%#S~G3\x0b1'
    var_0 = module_0.capitalcase(str_0)
    assert var_0 == '!\n"+8PU%#S~G3\x0b1'


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "|g/'6\x0b3)90V"
    none_type_0 = None
    var_0 = module_0.capitalcase(str_0)
    assert var_0 == "|g/'6\x0b3)90V"
    var_1 = module_0.uplowcase(str_0, none_type_0)
    var_1.__delattr__(var_1, var_1)


def test_case_2():
    none_type_0 = None
    var_0 = module_0.pascalcase(none_type_0)
    assert var_0 == "None"
    none_type_1 = None
    var_1 = module_0.capitalcase(none_type_1)
    assert var_1 == "None"
    var_2 = module_0.uplowcase(none_type_1, none_type_1)
    var_3 = module_0.uplowcase(var_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    var_0 = module_0.snakecase(bool_0)
    assert var_0 == "false"
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 2332
    var_0 = module_0.snakecase(int_0)
    assert var_0 == "2_3_3_2"
    list_0 = []
    var_1 = module_0.pascalcase(var_0)
    assert var_1 == "2332"
    var_2 = module_0.capitalcase(list_0)
    assert var_2 == "[]"
    var_3 = module_0.camelcase(int_0)
    assert var_3 == "2332"
    var_4 = module_0.spinalcase(list_0)
    assert var_4 == "[]"
    var_5 = module_0.pascalcase(var_3)
    assert var_5 == "2332"
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "rLrz^*IS\r:rTJq[=]F"
    var_0 = module_0.spinalcase(str_0)
    assert var_0 == "r-lrz^*-i-s-:r-t-jq[=]-f"
    var_1 = module_0.pascalcase(str_0)
    assert var_1 == "RLrz^*IS\r:rTJq[=]F"
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 2332
    var_0 = module_0.snakecase(int_0)
    assert var_0 == "2_3_3_2"
    list_0 = []
    var_1 = module_0.pascalcase(var_0)
    assert var_1 == "2332"
    var_2 = module_0.capitalcase(list_0)
    assert var_2 == "[]"
    var_3 = module_0.spinalcase(var_1)
    assert var_3 == "2-3-3-2"
    base_exception_0 = module_1.BaseException()
    var_4 = module_0.camelcase(base_exception_0)
    assert var_4 == ""
    var_5 = module_0.pascalcase(var_1)
    assert var_5 == "2332"
    var_6 = module_0.pascalcase(var_2)
    assert var_6 == "[]"
    var_7 = module_0.spinalcase(int_0)
    assert var_7 == "2-3-3-2"
    var_8 = module_0.uplowcase(var_5, var_5)
    var_9 = module_2.search(var_0, var_5)
    assert module_2.ASCII == module_2.RegexFlag.ASCII
    assert module_2.A == module_2.RegexFlag.ASCII
    assert module_2.IGNORECASE == module_2.RegexFlag.IGNORECASE
    assert module_2.I == module_2.RegexFlag.IGNORECASE
    assert module_2.LOCALE == module_2.RegexFlag.LOCALE
    assert module_2.L == module_2.RegexFlag.LOCALE
    assert module_2.UNICODE == module_2.RegexFlag.UNICODE
    assert module_2.U == module_2.RegexFlag.UNICODE
    assert module_2.MULTILINE == module_2.RegexFlag.MULTILINE
    assert module_2.M == module_2.RegexFlag.MULTILINE
    assert module_2.DOTALL == module_2.RegexFlag.DOTALL
    assert module_2.S == module_2.RegexFlag.DOTALL
    assert module_2.VERBOSE == module_2.RegexFlag.VERBOSE
    assert module_2.X == module_2.RegexFlag.VERBOSE
    assert module_2.TEMPLATE == module_2.RegexFlag.TEMPLATE
    assert module_2.T == module_2.RegexFlag.TEMPLATE
    assert module_2.DEBUG == module_2.RegexFlag.DEBUG
    var_5.__repr__(var_9)


@pytest.mark.xfail(strict=True)
def test_case_7():
    base_exception_0 = module_1.BaseException()
    var_0 = module_0.capitalcase(base_exception_0)
    assert var_0 == ""
    int_0 = 4435
    var_1 = module_0.spinalcase(int_0)
    assert var_1 == "4-4-3-5"
    var_2 = module_0.camelcase(int_0)
    assert var_2 == "4435"
    var_3 = module_0.spinalcase(base_exception_0)
    assert var_3 == ""
    var_3.__reversed__(var_2)
