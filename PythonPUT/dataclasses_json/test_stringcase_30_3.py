# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import stringcase as module_1
import builtins as module_2
import enum as module_3


def test_case_0():
    var_0 = module_0.purge()
    assert module_0.ASCII == module_0.RegexFlag.ASCII
    assert module_0.A == module_0.RegexFlag.ASCII
    assert module_0.IGNORECASE == module_0.RegexFlag.IGNORECASE
    assert module_0.I == module_0.RegexFlag.IGNORECASE
    assert module_0.LOCALE == module_0.RegexFlag.LOCALE
    assert module_0.L == module_0.RegexFlag.LOCALE
    assert module_0.UNICODE == module_0.RegexFlag.UNICODE
    assert module_0.U == module_0.RegexFlag.UNICODE
    assert module_0.MULTILINE == module_0.RegexFlag.MULTILINE
    assert module_0.M == module_0.RegexFlag.MULTILINE
    assert module_0.DOTALL == module_0.RegexFlag.DOTALL
    assert module_0.S == module_0.RegexFlag.DOTALL
    assert module_0.VERBOSE == module_0.RegexFlag.VERBOSE
    assert module_0.X == module_0.RegexFlag.VERBOSE
    assert module_0.TEMPLATE == module_0.RegexFlag.TEMPLATE
    assert module_0.T == module_0.RegexFlag.TEMPLATE
    assert module_0.DEBUG == module_0.RegexFlag.DEBUG
    var_1 = module_1.pascalcase(var_0)
    assert var_1 == "None"


@pytest.mark.xfail(strict=True)
def test_case_1():
    exception_0 = module_2.Exception()
    enum_dict_0 = module_3._EnumDict()
    assert (
        f"{type(enum_dict_0).__module__}.{type(enum_dict_0).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(enum_dict_0) == 0
    var_0 = module_1.pascalcase(enum_dict_0)
    assert var_0 == "{}"
    var_1 = module_1.pascalcase(exception_0)
    assert var_1 == ""
    var_2 = module_1.spinalcase(var_0)
    assert var_2 == "{}"
    var_3 = module_1.capitalcase(exception_0)
    assert var_3 == ""
    module_3.EnumMeta(*enum_dict_0)


def test_case_2():
    var_0 = module_0.purge()
    assert module_0.ASCII == module_0.RegexFlag.ASCII
    assert module_0.A == module_0.RegexFlag.ASCII
    assert module_0.IGNORECASE == module_0.RegexFlag.IGNORECASE
    assert module_0.I == module_0.RegexFlag.IGNORECASE
    assert module_0.LOCALE == module_0.RegexFlag.LOCALE
    assert module_0.L == module_0.RegexFlag.LOCALE
    assert module_0.UNICODE == module_0.RegexFlag.UNICODE
    assert module_0.U == module_0.RegexFlag.UNICODE
    assert module_0.MULTILINE == module_0.RegexFlag.MULTILINE
    assert module_0.M == module_0.RegexFlag.MULTILINE
    assert module_0.DOTALL == module_0.RegexFlag.DOTALL
    assert module_0.S == module_0.RegexFlag.DOTALL
    assert module_0.VERBOSE == module_0.RegexFlag.VERBOSE
    assert module_0.X == module_0.RegexFlag.VERBOSE
    assert module_0.TEMPLATE == module_0.RegexFlag.TEMPLATE
    assert module_0.T == module_0.RegexFlag.TEMPLATE
    assert module_0.DEBUG == module_0.RegexFlag.DEBUG
    var_1 = module_0.purge()
    var_2 = module_1.spinalcase(var_1)
    assert var_2 == "none"


def test_case_3():
    float_0 = -477.2643
    var_0 = module_1.pascalcase(float_0)
    assert var_0 == "4772643"
    var_1 = module_1.camelcase(float_0)
    assert var_1 == "4772643"
    with pytest.raises(TypeError):
        var_1.__contains__(var_0, var_0)


def test_case_4():
    bool_0 = True
    var_0 = module_1.camelcase(bool_0)
    assert var_0 == "true"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_1 = module_1.spinalcase(dict_0)
    assert var_1 == "{-true:--true}"
    with pytest.raises(TypeError):
        var_1.__new__(bool_0, bool_0, dict_0, bool_0)


def test_case_5():
    none_type_0 = None
    var_0 = module_1.uplowcase(none_type_0, none_type_0)
    var_1 = module_1.camelcase(var_0)
    assert var_1 == "none"
    var_2 = module_1.uplowcase(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    var_0 = module_1.camelcase(bool_0)
    assert var_0 == "true"
    exception_0 = module_2.Exception()
    enum_dict_0 = module_3._EnumDict()
    assert (
        f"{type(enum_dict_0).__module__}.{type(enum_dict_0).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(enum_dict_0) == 0
    var_1 = module_1.pascalcase(enum_dict_0)
    assert var_1 == "{}"
    var_2 = module_1.snakecase(bool_0)
    assert var_2 == "true"
    var_3 = module_1.spinalcase(exception_0)
    assert var_3 == ""
    var_4 = module_1.spinalcase(var_1)
    assert var_4 == "{}"
    var_5 = module_1.capitalcase(var_2)
    assert var_5 == "True"
    var_2.__setitem__(var_0, bool_0)
