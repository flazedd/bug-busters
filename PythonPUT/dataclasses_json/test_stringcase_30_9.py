# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import re as module_1
import builtins as module_2


def test_case_0():
    str_0 = ",:;OY^foBR^Vu)ZwX"
    none_type_0 = None
    var_0 = module_0.snakecase(none_type_0)
    assert var_0 == "none"
    var_1 = module_0.spinalcase(str_0)
    assert var_1 == ",:;-o-y^fo-b-r^-vu)-zw-x"
    var_2 = module_1.escape(str_0)
    assert var_2 == ",:;OY\\^foBR\\^Vu\\)ZwX"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_3 = module_0.capitalcase(var_2)
    assert var_3 == ",:;OY\\^foBR\\^Vu\\)ZwX"


def test_case_1():
    none_type_0 = None
    var_0 = module_0.uplowcase(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_1 = module_0.pascalcase(var_0)
    assert var_1 == "None"
    exception_0 = module_2.Exception()
    var_2 = module_0.pascalcase(exception_0)
    assert var_2 == ""
    var_3 = module_0.spinalcase(exception_0)
    assert var_3 == ""
    var_4 = module_0.pascalcase(exception_0)
    assert var_4 == ""
    var_5 = module_0.camelcase(var_4)
    assert var_5 == ""
    var_6 = module_0.camelcase(var_2)
    assert var_6 == ""
    var_3.__setattr__(exception_0, var_3, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    float_0 = -1600.5362
    var_0 = module_0.pascalcase(float_0)
    assert var_0 == "16005362"
    module_1.findall(float_0, float_0)
