# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import re as module_1
import builtins as module_2


def test_case_0():
    none_type_0 = None
    var_0 = module_0.capitalcase(none_type_0)
    assert var_0 == "None"
    none_type_1 = None
    var_1 = module_0.uplowcase(none_type_1, none_type_1)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.uplowcase(none_type_0, none_type_0)
    var_1 = module_0.snakecase(none_type_0)
    assert var_1 == "none"


def test_case_2():
    list_0 = []
    var_0 = module_0.spinalcase(list_0)
    assert var_0 == "[]"
    var_1 = module_0.pascalcase(list_0)
    assert var_1 == "[]"
    var_2 = module_0.uplowcase(list_0, var_1)
    with pytest.raises(TypeError):
        var_1.__contains__(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xce"
    var_0 = module_1.compile(bytes_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "re.Pattern"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    assert (
        f"{type(module_1.Pattern.pattern).__module__}.{type(module_1.Pattern.pattern).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.flags).__module__}.{type(module_1.Pattern.flags).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.groups).__module__}.{type(module_1.Pattern.groups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.groupindex).__module__}.{type(module_1.Pattern.groupindex).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = module_0.uplowcase(var_0, var_0)
    exception_0 = module_2.Exception()
    var_2 = module_0.spinalcase(exception_0)
    assert var_2 == ""
    var_2.scan(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_0.uplowcase(none_type_0, none_type_0)
    var_1 = module_0.camelcase(var_0)
    assert var_1 == "none"
    var_2 = module_0.spinalcase(none_type_0)
    assert var_2 == "none"
    var_3 = var_1.__dir__()
    var_4 = module_0.camelcase(var_3)
    assert (
        var_4
        == "['_New__', '_Repr__', '_Hash__', '_Str__', '_Getattribute__', '_Lt__', '_Le__', '_Eq__', '_Ne__', '_Gt__', '_Ge__', '_Iter__', '_Mod__', '_Rmod__', '_Len__', '_Getitem__', '_Add__', '_Mul__', '_Rmul__', '_Contains__', 'encode', 'replace', 'split', 'rsplit', 'join', 'capitalize', 'casefold', 'title', 'center', 'count', 'expandtabs', 'find', 'partition', 'index', 'ljust', 'lower', 'lstrip', 'rfind', 'rindex', 'rjust', 'rstrip', 'rpartition', 'splitlines', 'strip', 'swapcase', 'translate', 'upper', 'startswith', 'endswith', 'removeprefix', 'removesuffix', 'isascii', 'islower', 'isupper', 'istitle', 'isspace', 'isdecimal', 'isdigit', 'isnumeric', 'isalpha', 'isalnum', 'isidentifier', 'isprintable', 'zfill', 'format', 'formatMap', '_Format__', 'maketrans', '_Sizeof__', '_Getnewargs__', '_Doc__', '_Setattr__', '_Delattr__', '_Init__', '_ReduceEx__', '_Reduce__', '_Subclasshook__', '_InitSubclass__', '_Dir__', '_Class__']"
    )
    var_4.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "F5+e;o&Ao"
    str_1 = "L#3`\\<y;o\rjyda"
    var_0 = module_0.capitalcase(str_1)
    assert var_0 == "L#3`\\<y;o\rjyda"
    var_1 = module_0.spinalcase(str_0)
    assert var_1 == "f-5+e;o&-ao"
    var_2 = module_0.camelcase(str_0)
    assert var_2 == "f5+e;o&Ao"
    var_3 = module_0.snakecase(str_0)
    assert var_3 == "f_5+e;o&_ao"
    var_4 = module_0.uplowcase(str_0, str_0)
    var_5 = module_0.snakecase(var_1)
    assert var_5 == "f__5+e;o&_ao"
    var_6 = module_0.pascalcase(str_0)
    assert var_6 == "F5+e;o&Ao"
    var_7 = module_0.pascalcase(str_0)
    assert var_7 == "F5+e;o&Ao"
    var_8 = module_0.spinalcase(var_7)
    assert var_8 == "f-5+e;o&-ao"
    var_9 = module_0.spinalcase(var_5)
    assert var_9 == "f---5+e;o&-ao"
    var_10 = var_7.__dir__()
    var_6.__bool__()


def test_case_6():
    none_type_0 = None
    var_0 = module_0.spinalcase(none_type_0)
    assert var_0 == "none"
    int_0 = 2661
    var_1 = module_0.spinalcase(var_0)
    assert var_1 == "none"
    var_2 = module_0.uplowcase(int_0, var_0)
    exception_0 = module_2.Exception()
    var_3 = module_0.pascalcase(exception_0)
    assert var_3 == ""
    none_type_1 = None
    var_4 = module_0.pascalcase(none_type_0)
    assert var_4 == "None"
    with pytest.raises(TypeError):
        var_3.__contains__(exception_0, none_type_1)
