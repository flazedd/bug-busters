# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import re as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.capitalcase(none_type_0)
    assert var_0 == "None"


def test_case_1():
    var_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_1 = module_0.spinalcase(var_0)
    assert var_1 == "none"


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = ""
    var_0 = module_0.camelcase(str_0)
    assert var_0 == ""
    var_1 = module_0.pascalcase(str_0)
    assert var_1 == ""
    var_2 = module_0.uplowcase(str_0, str_0)
    var_3 = module_0.spinalcase(var_1)
    assert var_3 == ""
    var_2.__delattr__(var_3, var_2)


def test_case_3():
    var_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    var_1 = module_0.capitalcase(var_0)
    assert var_1 == "None"
    var_2 = module_0.camelcase(var_1)
    assert var_2 == "none"


def test_case_4():
    str_0 = "EFerf\nBy4AvoF\ru2'^0"
    var_0 = module_1.template(str_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "re.Pattern"
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    assert (
        f"{type(module_1.Pattern.pattern).__module__}.{type(module_1.Pattern.pattern).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.flags).__module__}.{type(module_1.Pattern.flags).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.groups).__module__}.{type(module_1.Pattern.groups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_1.Pattern.groupindex).__module__}.{type(module_1.Pattern.groupindex).__qualname__}"
        == "builtins.getset_descriptor"
    )
    var_1 = module_0.camelcase(var_0)
    assert var_1 == 'reCompile("EFerf\\nBy4AvoF\\ru2\'^0",Re.TEMPLATE)'
    var_2 = module_0.snakecase(var_0)
    assert (
        var_2 == 're_compile("_e_ferf\\n_by_4_avo_f\\ru_2\'^_0",_re__t_e_m_p_l_a_t_e)'
    )


def test_case_5():
    int_0 = 7
    var_0 = module_0.snakecase(int_0)
    assert var_0 == "7"
    var_1 = module_0.pascalcase(int_0)
    assert var_1 == "7"
    var_2 = module_0.pascalcase(var_0)
    assert var_2 == "7"


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    int_0 = 0
    var_0 = module_0.snakecase(int_0)
    assert var_0 == "0"
    var_1 = module_0.snakecase(bool_0)
    assert var_1 == "true"
    var_2 = module_0.capitalcase(var_1)
    assert var_2 == "True"
    var_3 = module_0.snakecase(bool_0)
    assert var_3 == "true"
    var_4 = module_0.pascalcase(int_0)
    assert var_4 == "0"
    var_5 = module_0.capitalcase(var_2)
    assert var_5 == "True"
    var_6 = module_0.spinalcase(var_1)
    assert var_6 == "true"
    var_7 = module_0.uplowcase(var_1, bool_0)
    var_0.scan(var_7)
