# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import stringcase as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    var_0 = module_0.pascalcase(none_type_0)
    assert var_0 == "None"


def test_case_1():
    int_0 = -446
    var_0 = module_0.camelcase(int_0)
    assert var_0 == "446"


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.capitalcase(none_type_0)
    assert var_0 == "None"
    var_1 = module_0.uplowcase(bool_0, bool_0)
    var_2 = module_0.snakecase(var_1)
    assert var_2 == "none"
    var_1.__repr__(var_1)


def test_case_3():
    str_0 = "?S&"
    tuple_0 = (str_0,)
    var_0 = module_0.snakecase(tuple_0)
    assert var_0 == "('?_s&',)"
    bytes_0 = b"\xa6<\x0c\xeb"
    dict_0 = {bytes_0: bytes_0}
    set_0 = set()
    var_1 = module_0.capitalcase(set_0)
    assert var_1 == "Set()"
    var_2 = module_0.spinalcase(dict_0)
    assert var_2 == "{b'\\xa-6<\\x-0c\\xeb':-b'\\xa-6<\\x-0c\\xeb'}"


def test_case_4():
    exception_0 = module_1.Exception()
    var_0 = module_0.pascalcase(exception_0)
    assert var_0 == ""
    var_1 = module_0.spinalcase(exception_0)
    assert var_1 == ""
    dict_0 = {}
    var_2 = module_0.capitalcase(exception_0)
    assert var_2 == ""
    var_3 = module_0.pascalcase(dict_0)
    assert var_3 == "{}"
    var_4 = module_0.spinalcase(var_2)
    assert var_4 == ""


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xbb\xb1\x9c3\x02k$"
    none_type_0 = None
    var_0 = module_0.spinalcase(none_type_0)
    assert var_0 == "none"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = -3035
    var_1 = module_0.snakecase(int_0)
    assert var_1 == "__3_0_3_5"
    var_2 = module_0.uplowcase(bytes_0, var_1)
    var_3 = module_0.camelcase(list_0)
    assert (
        var_3
        == "[b'\\xbb\\xb1\\x9c3\\x02k$',B'\\xbb\\xb1\\x9c3\\x02k$',B'\\xbb\\xb1\\x9c3\\x02k$',B'\\xbb\\xb1\\x9c3\\x02k$']"
    )
    var_4 = var_2.__bool__()
    assert var_4 is False
    var_5 = module_0.capitalcase(list_0)
    assert (
        var_5
        == "[b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$']"
    )
    bool_0 = False
    var_6 = module_0.capitalcase(var_5)
    assert (
        var_6
        == "[b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$', b'\\xbb\\xb1\\x9c3\\x02k$']"
    )
    bool_1 = False
    var_7 = module_0.uplowcase(var_5, bool_1)
    var_8 = module_0.snakecase(bool_0)
    assert var_8 == "false"
    bool_2 = False
    var_9 = module_0.pascalcase(var_7)
    assert var_9 == "None"
    var_10 = module_0.snakecase(bytes_0)
    assert var_10 == "b'\\xbb\\xb_1\\x_9c_3\\x_0_2k$'"
    var_8.__iter__(bool_2)
