# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '(z)#RmYh"\r72j0^$\t'
    timers_0.min(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\\$bX8"
    bool_0 = True
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    str_1 = "b>IJKdlP"
    with pytest.raises(KeyError):
        timers_0.stdev(str_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "&t8;~R]"
    timers_0.add(str_0, timers_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\x0cj-XH!`0H0:llqYjgC8|"
    str_1 = "zbBY,&H7<FbY."
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.__len__()
    assert var_0 == 0
    str_0 = ".X4#m>S!qac\t;W^[[@`"
    timers_0.total(str_0)


def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\\$bX8"
    bool_0 = True
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(str_0)
    assert float_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\\$bxP8"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    bool_1 = False
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 2
    float_1 = timers_0.min(none_type_1)
    assert float_1 is False
    float_2 = timers_0.median(str_0)
    assert float_2 is False
    float_3 = timers_0.mean(str_0)
    assert float_3 == 0
    float_4 = timers_0.max(none_type_1)
    assert float_4 is False
    timers_0.count(bool_1)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    bool_0 = True
    str_0 = "#>\rHUH%a$\x0b\rw~\\H9Yg"
    var_0 = timers_0.__copy__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(str_0)
    assert float_0 is True


def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.clear()
    bool_0 = False
    none_type_0 = timers_0.add(var_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(var_0)
    none_type_1 = timers_0.add(none_type_0, bool_0)
    float_1 = timers_0.stdev(var_0)
    assert float_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    var_1 = timers_0.__len__()
    assert var_1 == 1


def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\\$bxP8"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 is False
    float_1 = timers_0.mean(str_0)
    assert float_1 == 0
    with pytest.raises(KeyError):
        timers_0.stdev(none_type_0)


def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\\$bX8"
    bool_0 = False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    bool_0 = False
    none_type_0 = timers_0.add(bool_0, bool_0)
    assert len(timers_0) == 1
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 2
    float_0 = timers_0.min(none_type_1)
    assert float_0 is False
    timers_0.__setitem__(none_type_0, none_type_0)
