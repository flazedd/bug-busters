# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_1 = module_0.Timers()
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    str_0 = "V^vvH9.|@/[9}\n"
    with pytest.raises(KeyError):
        timers_0.apply(timers_1, str_0)


def test_case_2():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    dict_0 = {}
    timers_1 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    timers_2 = module_0.Timers()
    assert (
        f"{type(timers_2).__module__}.{type(timers_2).__qualname__}" == "timers.Timers"
    )
    assert len(timers_2) == 0


def test_case_3():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    none_type_1 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    dict_0 = {}
    timers_1 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    var_0 = timers_0.__len__()
    assert var_0 == 1
    var_1 = timers_1.__len__()
    assert var_1 == 0
    with pytest.raises(KeyError):
        timers_0.stdev(var_1)


def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "EcvV9"
    with pytest.raises(TypeError):
        timers_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    timers_0.count(none_type_0)


def test_case_6():
    str_0 = "g5bjocve5n!"
    bool_0 = False
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 is False
    float_1 = timers_0.stdev(str_0)
    var_0 = timers_0.__contains__(none_type_0)
    assert var_0 is False
    timers_1 = module_0.Timers()
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    with pytest.raises(KeyError):
        timers_1.stdev(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "^dh/y\rZDpt])eIkDf+\\"
    var_0 = timers_0.__or__(str_0)
    timers_0.max(str_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    dict_0 = {}
    timers_1 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    timers_2 = module_0.Timers()
    assert (
        f"{type(timers_2).__module__}.{type(timers_2).__qualname__}" == "timers.Timers"
    )
    assert len(timers_2) == 0
    var_0 = timers_1.__len__()
    assert var_0 == 0
    with pytest.raises(KeyError):
        timers_0.stdev(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.median(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.total(str_0)
    assert float_0 == 1
    float_1 = timers_0.stdev(str_0)
    var_0 = timers_0.__iter__()
    var_0.__and__(float_1)


def test_case_11():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    dict_0 = {}
    timers_1 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    float_0 = timers_0.count(str_0)
    assert float_0 == 1
    timers_2 = module_0.Timers()
    assert (
        f"{type(timers_2).__module__}.{type(timers_2).__qualname__}" == "timers.Timers"
    )
    assert len(timers_2) == 0
    str_1 = "^FHUb/1/JRatc-"
    with pytest.raises(KeyError):
        timers_2.stdev(str_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "<OvhuLbu\tI~2u] LhIl\\"
    bool_0 = False
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(str_0)
    assert float_0 == 0
    var_0 = timers_0.popitem()
    assert len(timers_0) == 0
    float_1 = timers_0.stdev(str_0)
    timers_0.count(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    str_1 = "qt9w"
    float_0 = timers_0.stdev(str_0)
    timers_0.count(str_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "`>})!M.TT\njm,A\t3"
    bool_0 = True
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 is True
    var_0 = timers_0.__len__()
    assert var_0 == 1
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "g5bjocve5n!"
    bool_0 = False
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    float_1 = timers_0.max(str_0)
    assert float_1 is False
    str_1 = "NlqrS*J.Gi\x0brPM\rVAx"
    timers_0.count(str_1)


def test_case_16():
    str_0 = "g5bjocve5n!"
    bool_0 = False
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 is False
    none_type_1 = timers_0.add(str_0, bool_0)
    float_1 = timers_0.stdev(str_0)
    assert float_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_2 = timers_0.max(str_0)
    assert float_2 is False
    float_3 = timers_0.__contains__(none_type_0)
    assert float_3 is False
    timers_1 = module_0.Timers()
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    with pytest.raises(KeyError):
        timers_1.stdev(bool_0)
