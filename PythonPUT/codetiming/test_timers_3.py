# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "6u"
    timers_0.min(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "%}c16 yL\nN~20E="
    float_0 = 1717.0
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    timers_0 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = ")!Vg;5#0M5n;8D)-;"
    none_type_0 = None
    timers_0.__setitem__(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.count(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "%}c16 uy:\nN~20E="
    float_0 = 1717.0
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    timers_0.total(none_type_0)


def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = 'T4\rj"i{hDF#'
    float_0 = 1698.5195440030593
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.mean(str_0)
    assert float_1 == pytest.approx(1698.5195440030593, abs=0.01, rel=0.01)
    var_0 = timers_0.values()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.abc.ValuesView"
    )
    assert len(var_0) == 1
    float_2 = timers_0.stdev(str_0)


def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "(0);WE`,LbH_"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "%}c16 yL\nN~20E="
    none_type_0 = timers_0.clear()
    float_0 = timers_0.__iter__()
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    int_0 = -581
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(none_type_1)
    assert float_0 == -581


def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    int_0 = -591
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_0)
    assert float_0 == -591


def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    int_0 = -581
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(none_type_1)
    assert float_0 == -581
    float_1 = timers_0.min(none_type_0)
    assert float_1 == -581


def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = 'T4\rj"{hDF#'
    float_0 = 1698.5195440030593
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.mean(str_0)
    assert float_1 == pytest.approx(1698.5195440030593, abs=0.01, rel=0.01)
    float_2 = timers_0.median(str_0)
    assert float_2 == pytest.approx(1698.5195440030593, abs=0.01, rel=0.01)
    float_3 = 471.0
    none_type_1 = timers_0.add(str_0, float_3)
    float_4 = timers_0.stdev(str_0)
    assert float_4 == pytest.approx(867.9873936035818, abs=0.01, rel=0.01)
