# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "Ojqo?"
    timers_0.max(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "Lr"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    int_0 = 1617
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(none_type_0)


def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -5633
    var_0 = timers_0.values()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.abc.ValuesView"
    )
    assert len(var_0) == 0
    with pytest.raises(TypeError):
        timers_0.__setitem__(timers_0, int_0)


def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    int_0 = 1617
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_1)
    assert float_0 == 1617
    float_1 = timers_0.total(none_type_0)
    assert float_1 == 1617
    float_2 = timers_0.stdev(none_type_0)
    float_3 = timers_0.mean(none_type_1)
    assert float_3 == 1617


def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    int_0 = 1588
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_0)
    assert float_0 == 1588


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '\n[oC4Nv{9qA\x0cyo{"'
    timers_0.median(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    timers_0.count(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    int_0 = 1617
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.total(none_type_0)
    assert float_0 == 1617
    float_1 = timers_0.min(none_type_0)
    assert float_1 == 1617
    str_0 = "kVzN'CU^$2~'C"
    timers_0.median(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    var_0 = timers_0.copy()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    int_0 = 1617
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = 2623.02
    none_type_2 = timers_0.add(none_type_1, float_0)
    float_1 = timers_0.max(none_type_1)
    assert float_1 == pytest.approx(2623.02, abs=0.01, rel=0.01)
    float_2 = timers_0.total(none_type_0)
    assert float_2 == pytest.approx(4240.02, abs=0.01, rel=0.01)
    float_3 = var_0.min(none_type_0)
    assert float_3 == 1617
    float_4 = timers_0.stdev(none_type_0)
    assert float_4 == pytest.approx(711.3635640092905, abs=0.01, rel=0.01)
    float_5 = timers_0.mean(none_type_1)
    assert float_5 == pytest.approx(2120.01, abs=0.01, rel=0.01)
    var_1 = var_0.__eq__(none_type_0)
    var_2 = float_4.__rmod__(float_4)
    assert var_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = "kVzN'CU^$2~'C"
    timers_0.median(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    var_0 = timers_0.copy()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    int_0 = 1617
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = var_0.min(none_type_0)
    assert float_0 == 1617
    float_1 = timers_0.stdev(none_type_0)
    float_2 = timers_0.mean(none_type_1)
    assert float_2 == 1617
    float_3 = timers_0.median(none_type_1)
    assert float_3 == 1617
    var_1 = float_1.__rmod__(int_0)
    var_2 = var_1.__lt__(int_0)
    assert var_2 is False
    var_3 = var_2.__trunc__()
    assert var_3 == 0
    var_3.isidentifier()
