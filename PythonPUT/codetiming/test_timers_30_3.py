# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "]\x0c%?+$3h}~N#QnZ5"
    timers_0.total(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.mean(none_type_0)
    assert float_1 == 1
    bool_0.stdev(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.clear()
    var_0 = timers_0.__iter__()
    none_type_2 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(none_type_2)
    assert float_0 is True
    timers_0.__delitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "/-U"
    str_1 = "+\nP"
    bool_0 = True
    str_2 = "11]DQ1 ;\x0c>%/F"
    str_3 = ":W-K)B\ng]5OQt>9}xYc^"
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_2, str_3: str_3}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.min(none_type_1)
    assert float_1 is True
    bool_0.stdev(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.values()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.abc.ValuesView"
    )
    assert len(var_0) == 0
    str_0 = "\t8\t2Z"
    timers_0.max(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_1 = module_0.Timers()
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    var_0 = timers_1.__ror__(timers_1)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    dict_0 = {}
    timers_2 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_2).__module__}.{type(timers_2).__qualname__}" == "timers.Timers"
    )
    assert len(timers_2) == 0
    var_1 = timers_0.__lt__(timers_1)
    var_0.median(var_1)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.stdev(none_type_0)
    float_2 = timers_0.count(none_type_1)
    assert float_2 == 1
    none_type_2 = timers_0.add(none_type_0, float_0)


def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    var_0 = timers_0.__iter__()
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.median(none_type_1)
    assert float_1 is True
    str_0 = "E[Si-BE-\n"
    float_2 = timers_0.min(none_type_1)
    assert float_2 is True
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    bool_1 = True
    none_type_2 = timers_0.add(none_type_0, bool_1)
    float_0 = timers_0.min(none_type_2)
    assert float_0 is True
    float_1 = timers_0.stdev(none_type_0)
    assert float_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = "\\\x0bW<n9Z"
    var_0 = timers_0.__iter__()
    none_type_3 = timers_0.add(str_0, float_1)
    assert len(timers_0) == 2
    float_2 = timers_0.min(none_type_3)
    assert float_2 is True
    none_type_0.total(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    var_0 = timers_0.__iter__()
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.median(none_type_1)
    assert float_1 is True
    var_0.stdev(none_type_1)
