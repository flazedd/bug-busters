# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "~~zu9RR@e"
    with pytest.raises(KeyError):
        timers_0.apply(timers_0, str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    str_0 = "ZWg~[vkX"
    float_0 = -238.80689342051883
    none_type_1 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    with pytest.raises(KeyError):
        timers_0.stdev(none_type_0)


def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()


def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    str_0 = "ZWg~[vkX"
    int_0 = 620
    none_type_1 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == 620
    str_1 = "y1- \n\nz(\n?D4<Ur1DJ"
    with pytest.raises(TypeError):
        timers_0.__setitem__(str_1, timers_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    timers_0.count(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    timers_0 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = ""
    timers_0.total(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "wk}f69UhB;aAB;rx^{"
    timers_0.median(str_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    float_0 = 3247.2
    with pytest.raises(KeyError):
        timers_0.stdev(float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    timers_0.min(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "Q\r\t@^QnqY6aZ"
    timers_0.max(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "^##]bJJlp%%\x0c7%$a,."
    timers_0.mean(str_0)


def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "ZWg~[vkX"
    float_0 = -238.80689342051883
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.stdev(str_0)


def test_case_13():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    none_type_1 = timers_0.clear()
    str_0 = "ZWg~[vkX"
    bool_0 = False
    none_type_2 = timers_0.add(str_0, bool_0)
    assert len(timers_0) == 1
    float_0 = -238.80689342051883
    none_type_3 = timers_0.add(str_0, float_0)
    float_1 = timers_0.stdev(str_0)
    assert float_1 == pytest.approx(168.86197373174198, abs=0.01, rel=0.01)


def test_case_14():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    str_0 = "ZWg~[vkX"
    int_0 = 620
    none_type_1 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    str_1 = "^##]bJJlp%%\x0c7%$a,."
    float_0 = timers_0.min(str_0)
    assert float_0 == 620
    with pytest.raises(KeyError):
        timers_0.stdev(str_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "ZWg~[vkX"
    int_0 = 613
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(str_0)
    assert float_0 == 613
    timers_0.max(none_type_0)


def test_case_16():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.values()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.abc.ValuesView"
    )
    assert len(var_0) == 0
    str_0 = "ZWg~[vkX"
    int_0 = 588
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    assert len(var_0) == 1
    bool_0 = True
    float_0 = timers_0.median(str_0)
    assert float_0 == 588
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 2
    assert len(var_0) == 2
    float_1 = timers_0.mean(str_0)
    assert float_1 == 588


def test_case_17():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "ZWg~[vkX"
    int_0 = 613
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 2
    float_0 = timers_0.max(none_type_1)
    assert float_0 is True
    float_1 = timers_0.stdev(none_type_0)
