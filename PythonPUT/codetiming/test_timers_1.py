# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "C|JYveM\x0b[8OJWT`*obu"
    timers_0.min(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    var_0 = timers_0.__ior__(timers_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    var_0.median(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "K<ueHjf9\r#pd.D;LZ"
    str_1 = "TVYU.KUn|[_toKR>$l=4"
    str_2 = "`C~[Nx"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_1}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    timers_0.total(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    timers_0 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "\tC="
    timers_0.max(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = ""
    timers_0.mean(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.median(timers_0)


def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = 'YlCzN5\\M_f\x0c@:"5['
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "s8KJdTxZ5+ E"
    timers_0.count(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = -1312
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    timers_0.__ior__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = -1312
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    none_type_1 = None
    float_0 = timers_0.stdev(str_0)
    var_0 = timers_0.__iter__()
    var_1 = timers_0.__ior__(timers_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "timers.Timers"
    assert len(var_1) == 1
    var_2 = var_1.__iter__()
    timers_0.apply(none_type_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = -1312
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(str_0)
    float_1 = timers_0.min(str_0)
    assert float_1 == -1312
    var_0 = timers_0.__ior__(timers_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 1
    var_1 = var_0.__iter__()
    var_1.total(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"g|'
    int_0 = -1312
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    var_0 = timers_0.__iter__()
    float_0 = timers_0.median(str_0)
    assert float_0 == -1312
    var_1 = timers_0.pop(str_0)
    assert var_1 == -1312
    assert len(timers_0) == 0
    str_1 = '1#udGDb#U"N!5{W0'
    str_1.mean(str_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = -1312
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == -1312
    float_1 = timers_0.stdev(str_0)
    var_0 = timers_0.__ior__(timers_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 1
    float_2 = timers_0.median(str_0)
    assert float_2 == -1312
    float_3 = var_0.mean(str_0)
    assert float_3 == -1312
    timers_0.mean(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = -1312
    var_0 = timers_0.__copy__()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(str_0)
    assert float_0 == -1312
    float_1 = timers_0.median(str_0)
    assert float_1 == -1312
    float_2 = var_0.max(str_0)
    assert float_2 == -1312
    timers_0.mean(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '"\ry'
    int_0 = 2
    none_type_0 = timers_0.add(str_0, int_0)
    assert len(timers_0) == 1
    int_1 = -1312
    none_type_1 = timers_0.add(str_0, int_1)
    float_0 = timers_0.min(str_0)
    assert float_0 == -1312
    float_1 = timers_0.stdev(str_0)
    assert float_1 == pytest.approx(929.1383104791234, abs=0.01, rel=0.01)
    var_0 = timers_0.__ior__(timers_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 1
    float_2 = timers_0.count(str_0)
    assert float_2 == 2
    float_3 = timers_0.median(str_0)
    assert float_3 == pytest.approx(-655.0, abs=0.01, rel=0.01)
    var_0.pdf(str_0)
