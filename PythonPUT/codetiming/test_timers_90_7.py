# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = '0#DyY6_"7zy'
    timers_0.count(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -2981
    str_0 = "2ohP*Jx>i"
    none_type_0 = timers_0.clear()
    with pytest.raises(KeyError):
        timers_0.apply(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    str_0 = "we-ZJ%]J"
    str_1 = ">O,DlS"
    dict_0 = {str_0: tuple_0, str_1: tuple_0}
    module_0.Timers(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.total(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    float_0 = -1261.3544325494724
    none_type_1 = timers_0.add(none_type_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.min(none_type_0)
    assert float_1 == pytest.approx(-1261.3544325494724, abs=0.01, rel=0.01)
    float_2 = timers_0.max(none_type_1)
    assert float_2 == pytest.approx(-1261.3544325494724, abs=0.01, rel=0.01)
    timers_0.count(float_0)


def test_case_6():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    float_0 = -1261.3544325494724
    none_type_1 = timers_0.add(none_type_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.max(none_type_1)
    assert float_1 == pytest.approx(-1261.3544325494724, abs=0.01, rel=0.01)


def test_case_7():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -2952
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(none_type_0)
    assert float_0 == -2952


def test_case_8():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -2955
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    var_0 = timers_0.__delitem__(none_type_1)
    assert len(timers_0) == 0
    float_0 = timers_0.median(none_type_1)
    assert float_0 == -2955


def test_case_9():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    with pytest.raises(KeyError):
        timers_0.stdev(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -2952
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(none_type_0)
    timers_0.count(int_0)


def test_case_11():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -2952
    float_0 = -1261.3544325494724
    none_type_1 = timers_0.add(none_type_0, float_0)
    assert len(timers_0) == 1
    none_type_2 = timers_0.add(none_type_0, float_0)
    float_1 = timers_0.mean(none_type_0)
    assert float_1 == pytest.approx(-1261.3544325494724, abs=0.01, rel=0.01)
    float_2 = timers_0.stdev(none_type_0)
    assert float_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    str_0 = "&l'_|+"
    with pytest.raises(KeyError):
        timers_0.apply(int_0, str_0)
