# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    timers_0.mean(none_type_0)


def test_case_2():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = 2973
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.max(none_type_1)
    assert float_0 == 2973


@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    timers_0.max(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "\\VCwGU'"
    str_1 = "Rk_'0!?&rx"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "RJo*%5$<"
    timers_0.count(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "YyzJT"
    timers_0.total(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    complex_0 = -1857 + 1500.1j
    timers_0.min(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.median(timers_0)


def test_case_9():
    str_0 = "T_[ O`i{s\nypQ"
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_10():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = -33
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.stdev(none_type_1)


def test_case_11():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = 2714
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.mean(none_type_1)
    assert float_0 == 2714
    float_1 = timers_0.stdev(none_type_1)


def test_case_12():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    bool_0 = True
    none_type_1 = timers_0.add(none_type_0, bool_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(none_type_0)
    assert float_0 is True
    float_1 = timers_0.mean(none_type_0)
    assert float_1 == 1
    with pytest.raises(KeyError):
        timers_0.stdev(float_1)


def test_case_13():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = 2973
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.median(none_type_1)
    assert float_0 == 2973
    float_1 = timers_0.max(none_type_1)
    assert float_1 == 2973


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    int_0 = 2977
    none_type_1 = timers_0.add(none_type_0, int_0)
    assert len(timers_0) == 1
    float_0 = timers_0.min(none_type_0)
    assert float_0 == 2977
    none_type_2 = timers_0.add(none_type_1, float_0)
    float_1 = timers_0.median(none_type_1)
    assert float_1 == pytest.approx(2977.0, abs=0.01, rel=0.01)
    str_0 = "@$qit&\rr9"
    float_2 = timers_0.stdev(none_type_1)
    assert float_2 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_3 = timers_0.mean(none_type_1)
    assert float_3 == 2977
    var_0 = timers_0.__contains__(none_type_1)
    assert var_0 is True
    float_4 = timers_0.max(none_type_1)
    assert float_4 == 2977
    float_5 = timers_0.stdev(none_type_1)
    assert float_5 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_5.__contains__(str_0)
