# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = 't"QYg`1NHMoJ}'
    timers_0.median(str_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "V0%qggD3>]1RZkn"
    float_0 = 1105.02861
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    str_1 = "f"
    with pytest.raises(KeyError):
        timers_0.stdev(str_1)


def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = timers_0.clear()
    str_0 = "In|@P64o}^k\x0cGm"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "nLxe'7tP:A:"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.total(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "\r_Q(Zi_N&Hs=xBm"
    timers_0.min(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "B\x0cK@\"S.;''u\t("
    timers_0.max(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "In|@P64o}^k\x0cGm"
    timers_0.mean(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    none_type_0 = None
    timers_0.count(none_type_0)


def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "In|@P64o}^k\x0cGm"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "V0%qggD3>]1RZkn"
    float_0 = 1105.02861
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    str_1 = "f"
    float_1 = timers_0.stdev(str_0)
    with pytest.raises(KeyError):
        timers_0.stdev(str_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "V0%qggD3>]1RZkn"
    float_0 = 1105.02861
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.median(str_0)
    assert float_1 == pytest.approx(1105.02861, abs=0.01, rel=0.01)
    var_0 = timers_0.__contains__(none_type_0)
    assert var_0 is False
    str_0.__rand__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "V0%qggD3>]1RZkn"
    float_0 = 1105.02861
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    int_0 = -3666
    none_type_1 = timers_0.add(str_0, int_0)
    float_1 = timers_0.median(str_0)
    assert float_1 == pytest.approx(-1280.4856949999999, abs=0.01, rel=0.01)
    float_2 = timers_0.stdev(str_0)
    assert float_2 == pytest.approx(3373.626683366028, abs=0.01, rel=0.01)
    var_0 = timers_0.__eq__(timers_0)
    assert var_0 is True
    timers_0.total(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "V0%qggD3>]1RZkn"
    float_0 = 1105.0
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.max(str_0)
    assert float_1 == pytest.approx(1105.0, abs=0.01, rel=0.01)
    float_2 = timers_0.min(str_0)
    assert float_2 == pytest.approx(1105.0, abs=0.01, rel=0.01)
    float_3 = timers_0.median(str_0)
    assert float_3 == pytest.approx(1105.0, abs=0.01, rel=0.01)
    var_0 = timers_0.__iter__()
    timers_0.count(none_type_0)
