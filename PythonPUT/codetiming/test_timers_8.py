# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import timers as module_0


def test_case_0():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False


def test_case_1():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.__len__()
    assert var_0 == 0
    none_type_0 = None
    with pytest.raises(KeyError):
        timers_0.apply(none_type_0, none_type_0)


def test_case_2():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci1i"
    float_0 = -2604.9068080802776
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.min(str_0)
    assert float_1 == pytest.approx(-2604.9068080802776, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci.[1i"
    var_0 = timers_0.copy()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    float_0 = -2615.7
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.stdev(str_0)
    none_type_1 = timers_0.clear()
    assert len(timers_0) == 0
    timers_0.min(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "I4e"
    bytes_0 = b"\xf1Zc\x1c"
    str_1 = "{Q"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_1: str_0}
    module_0.Timers(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    var_0 = timers_0.__len__()
    assert var_0 == 0
    timers_0.count(var_0)


def test_case_6():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci1i"
    float_0 = -2604.9068080802776
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.max(str_0)
    assert float_1 == pytest.approx(-2604.9068080802776, abs=0.01, rel=0.01)
    float_2 = timers_0.stdev(str_0)
    float_3 = timers_0.min(str_0)
    assert float_3 == pytest.approx(-2604.9068080802776, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_7():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    timers_0.mean(timers_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci.[1i"
    float_0 = -2227.44733
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.median(str_0)
    assert float_1 == pytest.approx(-2227.44733, abs=0.01, rel=0.01)
    float_2 = timers_0.stdev(str_0)
    float_2.clear()


def test_case_9():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "<wL[+!{5$"
    with pytest.raises(KeyError):
        timers_0.stdev(str_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    dict_0 = {}
    timers_1 = module_0.Timers(**dict_0)
    assert (
        f"{type(timers_1).__module__}.{type(timers_1).__qualname__}" == "timers.Timers"
    )
    assert len(timers_1) == 0
    var_0 = timers_1.update()
    str_0 = "2/$\x0c"
    timers_1.total(str_0)


def test_case_11():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci1i"
    float_0 = -2604.9068080802776
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.stdev(str_0)
    float_2 = timers_0.min(str_0)
    assert float_2 == pytest.approx(-2604.9068080802776, abs=0.01, rel=0.01)


def test_case_12():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci.[1i"
    var_0 = timers_0.copy()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "timers.Timers"
    assert len(var_0) == 0
    float_0 = -631.832
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    float_1 = timers_0.stdev(str_0)
    float_2 = var_0.max(str_0)
    assert float_2 == pytest.approx(-631.832, abs=0.01, rel=0.01)
    float_3 = timers_0.mean(str_0)
    assert float_3 == pytest.approx(-631.832, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_13():
    timers_0 = module_0.Timers()
    assert (
        f"{type(timers_0).__module__}.{type(timers_0).__qualname__}" == "timers.Timers"
    )
    assert len(timers_0) == 0
    assert module_0.TYPE_CHECKING is False
    str_0 = "hbHvMH4~\x0ci.[1i"
    float_0 = -2227.44733
    none_type_0 = timers_0.add(str_0, float_0)
    assert len(timers_0) == 1
    none_type_1 = timers_0.add(str_0, float_0)
    float_1 = timers_0.stdev(str_0)
    assert float_1 == pytest.approx(0.0, abs=0.01, rel=0.01)
    float_2 = timers_0.min(str_0)
    assert float_2 == pytest.approx(-2227.44733, abs=0.01, rel=0.01)
    float_3 = timers_0.max(str_0)
    assert float_3 == pytest.approx(-2227.44733, abs=0.01, rel=0.01)
    float_4 = timers_0.mean(str_0)
    assert float_4 == pytest.approx(-2227.44733, abs=0.01, rel=0.01)
    timers_0.min(none_type_1)
