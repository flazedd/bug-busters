# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    str_0 = "(_1NCh"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_1():
    int_0 = -2434
    with pytest.raises(TypeError):
        module_0.validate_identifier(int_0)


def test_case_2():
    str_0 = "\n"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_3():
    str_0 = "JJR;E\n"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "utf8"
    none_type_0 = module_0.validate_identifier(str_0)
    str_1 = "x"
    none_type_1 = module_0.validate_identifier(str_1)
    str_2 = "zFU"
    bool_0 = True
    none_type_2 = module_0.validate_identifier(str_2, bool_0)
    bool_1 = False
    none_type_3 = module_0.validate_identifier(str_2, bool_1)
    none_type_4 = module_0.validate_identifier(str_0)
    str_3 = "3U%83YDP"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_3)


def test_case_5():
    str_0 = "Q_1NCh"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_6():
    str_0 = "strict"
    none_type_0 = module_0.validate_identifier(str_0)
    bool_0 = False
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 5
    none_type_1 = module_0.validate_identifier(str_0)
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_7():
    str_0 = "PNquXh"
    none_type_0 = module_0.validate_identifier(str_0)
    str_1 = "utf8"
    none_type_1 = module_0.validate_identifier(str_1)
    str_2 = "x"
    none_type_2 = module_0.validate_identifier(str_2)
    str_3 = "zFU"
    bool_0 = True
    none_type_3 = module_0.validate_identifier(str_3, bool_0)
    bool_1 = False
    none_type_4 = module_0.validate_identifier(str_3, bool_1)
    none_type_5 = module_0.validate_identifier(str_1)
    none_type_6 = module_0.validate_identifier(str_3, none_type_2)
    none_type_7 = module_0.validate_identifier(str_2)
    str_4 = "_2m{uCk"
    bool_2 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_4, bool_2)
