# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import txtutils as module_0
import re as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.len_without_ansi(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "qBz2QCQ\x0c\rG{c%g\x0cZT"
    bool_0 = True
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 17
    assert module_0.hexversion == 50990064
    module_1.finditer(bool_0, bool_0, int_0)


def test_case_2():
    var_0 = module_1.purge()
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(expand_tabs=var_0)
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is None
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )


def test_case_3():
    str_0 = "A6>}!1ug6{"
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        initial_indent=str_0, fix_sentence_endings=bool_0, drop_whitespace=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is True
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 10


def test_case_4():
    str_0 = ""
    bool_0 = False
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 0
    assert module_0.hexversion == 50990064
    int_1 = 533
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        str_0,
        subsequent_indent=str_0,
        fix_sentence_endings=bool_0,
        break_long_words=bool_0,
        tabsize=int_1,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == ""
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is False
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 533
    assert ansi_text_wrapper_0.max_lines is None
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )


def test_case_5():
    bool_0 = True
    str_0 = "J\te~#6<7W)K\t;B_:"
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        subsequent_indent=str_0, replace_whitespace=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    none_type_0 = None
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0,
        replace_whitespace=none_type_0,
        drop_whitespace=bool_0,
        break_on_hyphens=none_type_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width == 70
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is None
    assert ansi_text_wrapper_1.fix_sentence_endings is False
    assert ansi_text_wrapper_1.break_long_words is True
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens is None
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is True
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == "J       e~#6<7W)K       ;B_:"
    list_0 = ansi_text_wrapper_1.wrap(str_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0,
        replace_whitespace=none_type_0,
        drop_whitespace=bool_0,
        break_on_hyphens=none_type_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is None
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is None
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = ""
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = ":obj:`~UserString`):"
    list_1 = ansi_text_wrapper_0.wrap(str_1)
    str_2 = " is not a proper bas64 character string: "
    list_2 = ansi_text_wrapper_0.wrap(str_2)
    ansi_text_wrapper_0.wrap(none_type_0)


def test_case_7():
    bool_0 = False
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0,
        replace_whitespace=none_type_0,
        drop_whitespace=bool_0,
        break_on_hyphens=none_type_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is None
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is False
    assert ansi_text_wrapper_0.break_on_hyphens is None
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped utf8 bytes.\n        int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n    "
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    assert ansi_text_wrapper_0.placeholder_len == 6
    list_1 = ansi_text_wrapper_0.wrap(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0, replace_whitespace=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is False
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped utf8 bytes.\n        int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n    "
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    ansi_text_wrapper_0.fill(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0,
        replace_whitespace=none_type_0,
        drop_whitespace=bool_0,
        break_on_hyphens=none_type_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is None
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is False
    assert ansi_text_wrapper_0.break_on_hyphens is None
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = 'V]_!R=p2sQjo4$Y G"'
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    list_1 = ansi_text_wrapper_0.wrap(str_0)
    ansi_text_wrapper_0.wrap(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    str_0 = "D\x0c[oa/{Y#90\\`]&uT"
    bool_1 = True
    bool_2 = True
    str_1 = "D$"
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        bool_1,
        subsequent_indent=bool_0,
        replace_whitespace=bool_2,
        break_on_hyphens=bool_1,
        max_lines=bool_2,
        placeholder=str_1,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width is True
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    ansi_text_wrapper_0.wrap(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0,
        replace_whitespace=none_type_0,
        drop_whitespace=bool_0,
        break_on_hyphens=none_type_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is None
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is None
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped utf8 bytes.\n       int: The number Xf given ``text``_characters consumed\n\n    Raises:\n        UnicodeEncodeErrr: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n    "
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    assert ansi_text_wrapper_0.placeholder_len == 6
    bool_1 = False
    ansi_text_wrapper_0.wrap(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    str_0 = "J\te~#6<7W)K\t;B_:"
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        subsequent_indent=str_0, replace_whitespace=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is False
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    bool_1 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, break_long_words=bool_1)
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width is False
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is False
    assert ansi_text_wrapper_1.break_long_words is True
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens is True
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is None
    str_1 = "xIG=\r\\ b"
    ansi_text_wrapper_1.wrap(str_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    str_0 = "J\te~#6<7W)K\t;B_:"
    none_type_0 = None
    none_type_1 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width is True
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == "J\ne\n~\n#\n6\n<\n7\nW\n)\nK\n;\nB\n_\n:"
    str_2 = "\x0c\x0b0JEDP"
    list_0 = ansi_text_wrapper_0.wrap(str_2)
    int_0 = 11
    str_3 = ";B_"
    bool_1 = False
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        bool_1,
        subsequent_indent=none_type_1,
        replace_whitespace=none_type_0,
        fix_sentence_endings=str_3,
        drop_whitespace=ansi_text_wrapper_0,
        placeholder=int_0,
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width is False
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is None
    assert ansi_text_wrapper_1.fix_sentence_endings == ";B_"
    assert ansi_text_wrapper_1.break_long_words is True
    assert (
        f"{type(ansi_text_wrapper_1.drop_whitespace).__module__}.{type(ansi_text_wrapper_1.drop_whitespace).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.break_on_hyphens is True
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is None
    ansi_text_wrapper_1.wrap(bool_0)


def test_case_14():
    str_0 = "UH}7c4r+rK8Pu-9f\x0b`"
    bool_0 = False
    bool_1 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        subsequent_indent=str_0,
        replace_whitespace=bool_0,
        fix_sentence_endings=bool_1,
        break_long_words=bool_0,
        drop_whitespace=str_0,
        break_on_hyphens=bool_1,
        placeholder=str_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is False
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is False
    assert ansi_text_wrapper_0.drop_whitespace == "UH}7c4r+rK8Pu-9f\x0b`"
    assert ansi_text_wrapper_0.break_on_hyphens is False
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == "UH}7c4r+rK8Pu-9f\x0b`"
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    str_2 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped utf8 bytes.\n        int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n    "
    list_1 = ansi_text_wrapper_0.wrap(str_2)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    str_0 = "J\te~#6<7W)K\t;B_:"
    str_1 = "K"
    str_2 = "strict"
    bool_1 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        drop_whitespace=bool_0,
        break_on_hyphens=bool_1,
        tabsize=bool_1,
        placeholder=str_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize is True
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50990064
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    list_0 = ansi_text_wrapper_0.wrap(str_2)
    int_0 = 1402
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        bool_0, str_1, fix_sentence_endings=bool_0, tabsize=int_0, max_lines=int_0
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width is True
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is True
    assert ansi_text_wrapper_1.break_long_words is True
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens is True
    assert ansi_text_wrapper_1.tabsize == 1402
    assert ansi_text_wrapper_1.max_lines == 1402
    bool_2 = False
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(
        expand_tabs=bool_2,
        replace_whitespace=bool_2,
        drop_whitespace=str_0,
        max_lines=bool_2,
    )
    assert (
        f"{type(ansi_text_wrapper_2).__module__}.{type(ansi_text_wrapper_2).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_2.width == 70
    assert ansi_text_wrapper_2.expand_tabs is False
    assert ansi_text_wrapper_2.replace_whitespace is False
    assert ansi_text_wrapper_2.fix_sentence_endings is False
    assert ansi_text_wrapper_2.break_long_words is True
    assert ansi_text_wrapper_2.drop_whitespace == "J\te~#6<7W)K\t;B_:"
    assert ansi_text_wrapper_2.break_on_hyphens is True
    assert ansi_text_wrapper_2.tabsize == 8
    assert ansi_text_wrapper_2.max_lines is False
    str_3 = "</!L[U=48h"
    str_4 = ansi_text_wrapper_2.fill(str_3)
    assert str_4 == "</!L[U=48h"
    str_5 = " 8bR^K$[<PGm.vc8%X"
    ansi_text_wrapper_1.wrap(str_5)
