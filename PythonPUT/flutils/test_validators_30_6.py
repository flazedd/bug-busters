# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.validate_identifier(none_type_0, none_type_0)


def test_case_1():
    str_0 = "-\r\x0b"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_2():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = 'b~rJ&cH"'
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "\x0b3h]hs:J!UIoAtt';^"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_5():
    str_0 = "b"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_6():
    str_0 = "_"
    bool_0 = False
    str_1 = "latin1"
    none_type_0 = module_0.validate_identifier(str_1)
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_7():
    bool_0 = False
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 5
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, user_string_0)
