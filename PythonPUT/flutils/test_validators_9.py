# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    bytes_0 = b"\xd8\xbe\xb4\x9eo\xd9\x18\x86-}+\x88#\x9b\xc3\xc8\xf6\x06R"
    with pytest.raises(TypeError):
        module_0.validate_identifier(bytes_0)


def test_case_1():
    str_0 = "unicode_escape"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_2():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "8q"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_4():
    str_0 = " is not a proper bas64 character string: "
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_5():
    none_type_0 = None
    user_string_0 = module_1.UserString(none_type_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_6():
    str_0 = "unicode_escape"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)


def test_case_7():
    none_type_0 = None
    user_string_0 = module_1.UserString(none_type_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    var_0 = user_string_0.lower()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 4
    var_1 = var_0.casefold()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_1) == 4
    none_type_1 = module_0.validate_identifier(var_1)
    str_0 = "_ati{1"
    var_2 = var_0.isnumeric()
    assert var_2 is False
    none_type_2 = user_string_0.rsplit()
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)
