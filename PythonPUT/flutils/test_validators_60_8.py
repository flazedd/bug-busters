# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.validate_identifier(none_type_0)


def test_case_1():
    str_0 = "\n"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, str_0)


def test_case_2():
    str_0 = "_l"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "OAswGgN\x0b*LF8"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "8.ZO\x0b-dotWjUy"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_5():
    str_0 = "p|"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_6():
    str_0 = "_T"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_7():
    str_0 = "T"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0)
    none_type_1 = module_0.validate_identifier(str_0, bool_0)
    object_0 = module_1.UserString(none_type_1)
    assert (
        f"{type(object_0).__module__}.{type(object_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(object_0) == 4
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(object_0, object_0)
