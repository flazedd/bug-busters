# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    str_0 = "Convert a bytes type of escaped utf8 hexadecimal to a string.\n\n    Args:\n        data (bytes or bytearray or memoryview): The escaped utf8\n            hexadecimal bytes.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        str: The given ``data`` (of escaped utf8 hexadecimal bytes)\n            converted into a :obj:`str`.\n        int: The number of the given ``data`` bytes consumed.\n\n    Raises:\n         UnicodeDecodeError: if the given ``data`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n\n\n    "
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_1():
    int_0 = -3249
    user_string_0 = module_1.UserString(int_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 5
    var_0 = user_string_0.__radd__(user_string_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 10
    var_1 = var_0.isidentifier()
    assert var_1 is False
    none_type_0 = None
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, none_type_0)


def test_case_2():
    bool_0 = False
    with pytest.raises(TypeError):
        module_0.validate_identifier(bool_0)


def test_case_3():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_4():
    str_0 = "*9'g\t|#!Sxn"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_5():
    str_0 = "utf8"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)
    none_type_1 = module_0.validate_identifier(str_0)
    none_type_2 = module_0.validate_identifier(str_0, bool_0)
    bool_1 = False
    none_type_3 = module_0.validate_identifier(str_0, bool_1)
    str_1 = "9d7PQ\\x&"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_1)


def test_case_6():
    str_0 = "unicode_escape"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_7():
    str_0 = "_*$6n}"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_8():
    str_0 = "utf8"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0)
    none_type_1 = module_0.validate_identifier(str_0, bool_0)
    none_type_2 = module_0.validate_identifier(str_0)
    user_string_0 = module_1.UserString(none_type_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    var_0 = user_string_0.__reversed__()
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, none_type_0)
