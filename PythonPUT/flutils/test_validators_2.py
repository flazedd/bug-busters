# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.validate_identifier(none_type_0)


def test_case_1():
    str_0 = "0y'5\x0c~\x0b"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_2():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "i"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)
    int_0 = 1314
    with pytest.raises(TypeError):
        module_0.validate_identifier(int_0)


def test_case_4():
    str_0 = "i"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_5():
    str_0 = "ge_"
    none_type_0 = module_0.validate_identifier(str_0)
    str_1 = "n cLuyz}.U"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_1)


def test_case_6():
    bool_0 = True
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    var_0 = user_string_0.lower()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 4
    var_1 = var_0.upper()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_1) == 4
    none_type_0 = module_0.validate_identifier(var_1, var_1)
    int_0 = 1
    with pytest.raises(TypeError):
        module_0.validate_identifier(int_0)


def test_case_7():
    str_0 = "_"
    none_type_0 = module_0.validate_identifier(str_0)
    none_type_1 = module_0.validate_identifier(str_0)
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_8():
    bool_0 = True
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    var_0 = user_string_0.__rmod__(user_string_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 4
    bool_1 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, bool_1)
