# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    int_0 = 557
    with pytest.raises(TypeError):
        module_0.validate_identifier(int_0)


def test_case_1():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, str_0)


def test_case_2():
    str_0 = "pH"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "4Bob"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_4():
    str_0 = ",#_.v\t|\nEya"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, str_0)


def test_case_5():
    str_0 = "xt5PZM"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)


def test_case_6():
    bool_0 = True
    none_type_0 = None
    user_string_0 = module_1.UserString(none_type_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    var_0 = user_string_0.center(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 4
    bool_1 = True
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(var_0, bool_1)


def test_case_7():
    str_0 = "_<+aD0hh"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)
