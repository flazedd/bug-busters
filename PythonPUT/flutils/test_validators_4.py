# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    int_0 = 0
    with pytest.raises(TypeError):
        module_0.validate_identifier(int_0)


def test_case_1():
    int_0 = 11
    user_string_0 = module_1.UserString(int_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 2
    bool_0 = False
    var_0 = user_string_0.casefold()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 2
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, bool_0)


def test_case_2():
    str_0 = "eutf8h"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "\n"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_4():
    bool_0 = False
    str_0 = "strict"
    none_type_0 = module_0.validate_identifier(str_0, bool_0)


def test_case_5():
    str_0 = 'iZ!"\t7(-J"F@6O-'
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_6():
    str_0 = "stict"
    bool_0 = True
    none_type_0 = module_0.validate_identifier(str_0, bool_0)
    none_type_1 = module_0.validate_identifier(str_0)
    none_type_2 = module_0.validate_identifier(str_0)
    none_type_3 = module_0.validate_identifier(str_0)
    none_type_4 = module_0.validate_identifier(str_0)
    none_type_5 = module_0.validate_identifier(str_0, str_0)
    none_type_6 = module_0.validate_identifier(str_0, none_type_2)
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 4
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_7():
    str_0 = "_t1im"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)
