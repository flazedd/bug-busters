# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    str_0 = "jU5zTZ(vrc955^uC"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_1():
    complex_0 = -825.95304 + 947.02706j
    with pytest.raises(TypeError):
        module_0.validate_identifier(complex_0)


def test_case_2():
    str_0 = ""
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_3():
    str_0 = "P\x0bFG_G"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "8=.uUo`:8p dJv"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_5():
    str_0 = "eutf8h"
    none_type_0 = module_0.validate_identifier(str_0)
    none_type_1 = module_0.validate_identifier(str_0)
    none_type_2 = module_0.validate_identifier(str_0)
    none_type_3 = module_0.validate_identifier(str_0)


def test_case_6():
    bool_0 = False
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 5
    var_0 = user_string_0.__mul__(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(var_0) == 0
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_7():
    str_0 = "_v2H\x0cf(\t\tKP\r/k'{   %"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)
