# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import codecs as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    complex_0 = 2882.18 - 617.6j
    module_0.getincrementalencoder(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "."
    module_0.open(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.make_encoding_map(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_0.getreader(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.getencoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.getencoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    float_0 = -1089.71188
    stream_writer_0 = module_0.StreamWriter(float_0)
    assert (
        f"{type(stream_writer_0).__module__}.{type(stream_writer_0).__qualname__}"
        == "codecs.StreamWriter"
    )
    assert stream_writer_0.stream == pytest.approx(-1089.71188, abs=0.01, rel=0.01)
    assert stream_writer_0.errors == "strict"
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    stream_writer_0.write(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"k\xe2"
    module_0.getencoder(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_0.StreamReaderWriter(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_0.getencoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    module_0.getincrementaldecoder(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "itW6g39Wqx?Qv"
    module_0.open(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    none_type_0 = None
    module_0.EncodedFile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    incremental_decoder_0 = module_0.IncrementalDecoder()
    assert (
        f"{type(incremental_decoder_0).__module__}.{type(incremental_decoder_0).__qualname__}"
        == "codecs.IncrementalDecoder"
    )
    assert incremental_decoder_0.errors == "strict"
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    var_0 = module_0.iterencode(none_type_0, none_type_0, none_type_0)
    var_0.getstate()


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 1114
    module_0.getincrementalencoder(int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    var_0 = module_0.iterencode(none_type_0, none_type_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    var_0.reset()


@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = 563.5937
    bytes_0 = b"w-\x81\xac\x1c\xe4Q9k\xf9\xeaq\x8b\xff\xc0B\xdf"
    none_type_0 = None
    var_0 = module_0.iterencode(bytes_0, none_type_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    var_0.__exit__(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    module_0.getreader(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    module_0.CodecInfo()


def test_case_19():
    none_type_0 = None
    complex_0 = -2656.09782 + 2208.8j
    dict_0 = {complex_0: none_type_0}
    stream_reader_0 = module_0.StreamReader(dict_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "codecs.StreamReader"
    )
    assert stream_reader_0.stream == {(-2656.09782 + 2208.8j): None}
    assert stream_reader_0.errors == "strict"
    assert stream_reader_0.bytebuffer == b""
    assert stream_reader_0.charbuffer == ""
    assert stream_reader_0.linebuffer is None
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    with pytest.raises(NotImplementedError):
        stream_reader_0.encode(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    list_0 = []
    none_type_0 = None
    module_0.EncodedFile(none_type_0, list_0, errors=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    module_0.CodecInfo()


@pytest.mark.xfail(strict=True)
def test_case_22():
    list_0 = []
    module_0.CodecInfo(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    module_0.getreader(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"\xa3\xccNw\x94\x81\xe2\x1d\t<P\x96\x17\x8aO\x8a"
    incremental_encoder_0 = module_0.IncrementalEncoder(bytes_0)
    assert (
        f"{type(incremental_encoder_0).__module__}.{type(incremental_encoder_0).__qualname__}"
        == "codecs.IncrementalEncoder"
    )
    assert (
        incremental_encoder_0.errors
        == b"\xa3\xccNw\x94\x81\xe2\x1d\t<P\x96\x17\x8aO\x8a"
    )
    assert incremental_encoder_0.buffer == ""
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    module_0.getincrementaldecoder(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = -749
    module_0.getreader(int_0)


def test_case_26():
    str_0 = "2(zo.H"
    with pytest.raises(LookupError):
        module_0.getincrementalencoder(str_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    buffered_incremental_decoder_0 = module_0.BufferedIncrementalDecoder()
    assert (
        f"{type(buffered_incremental_decoder_0).__module__}.{type(buffered_incremental_decoder_0).__qualname__}"
        == "codecs.BufferedIncrementalDecoder"
    )
    assert buffered_incremental_decoder_0.errors == "strict"
    assert buffered_incremental_decoder_0.buffer == b""
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    buffered_incremental_decoder_1 = module_0.BufferedIncrementalDecoder()
    assert (
        f"{type(buffered_incremental_decoder_1).__module__}.{type(buffered_incremental_decoder_1).__qualname__}"
        == "codecs.BufferedIncrementalDecoder"
    )
    assert buffered_incremental_decoder_1.errors == "strict"
    assert buffered_incremental_decoder_1.buffer == b""
    none_type_0 = None
    buffered_incremental_decoder_1.decode(buffered_incremental_decoder_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_0 = {}
    none_type_0 = None
    module_0.open(
        dict_0, encoding=none_type_0, errors=none_type_0, buffering=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_29():
    complex_0 = 557 - 2828.24j
    module_0.make_encoding_map(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "hx2A~Tw*="
    none_type_0 = None
    var_0 = module_0.iterdecode(str_0, str_0, none_type_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    var_0.reset()


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    var_0 = module_0.iterencode(bool_0, bool_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    none_type_0 = None
    module_0.getencoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "\n"
    module_0.getreader(str_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    module_0.getincrementalencoder(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_0.getreader(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    none_type_0 = None
    module_0.getreader(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bytes_0 = b"\xce3\xd7\x04\x88_\xaa\xc5\xe3\x05<?\xb7\xcaQ"
    str_0 = ']}b"@D3r81O_S2'
    str_1 = "eutf8h"
    module_0.StreamReaderWriter(bytes_0, str_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    module_0.make_identity_dict(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    set_0 = set()
    var_0 = module_0.iterencode(set_0, set_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    module_0.CodecInfo()


@pytest.mark.xfail(strict=True)
def test_case_39():
    int_0 = 1147
    module_0.getreader(int_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_0.getencoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    var_0 = module_0.iterencode(none_type_0, none_type_0)
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    module_0.getincrementalencoder(var_0)


def test_case_42():
    bool_0 = False
    stream_reader_0 = module_0.StreamReader(bool_0, bool_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "codecs.StreamReader"
    )
    assert stream_reader_0.stream is False
    assert stream_reader_0.errors is False
    assert stream_reader_0.bytebuffer == b""
    assert stream_reader_0.charbuffer == ""
    assert stream_reader_0.linebuffer is None
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    with pytest.raises(NotImplementedError):
        stream_reader_0.decode(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = -1516
    stream_reader_0 = module_0.StreamReader(int_0)
    assert (
        f"{type(stream_reader_0).__module__}.{type(stream_reader_0).__qualname__}"
        == "codecs.StreamReader"
    )
    assert stream_reader_0.stream == -1516
    assert stream_reader_0.errors == "strict"
    assert stream_reader_0.bytebuffer == b""
    assert stream_reader_0.charbuffer == ""
    assert stream_reader_0.linebuffer is None
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    buffered_incremental_decoder_0 = module_0.BufferedIncrementalDecoder()
    assert (
        f"{type(buffered_incremental_decoder_0).__module__}.{type(buffered_incremental_decoder_0).__qualname__}"
        == "codecs.BufferedIncrementalDecoder"
    )
    assert buffered_incremental_decoder_0.errors == "strict"
    assert buffered_incremental_decoder_0.buffer == b""
    var_0 = buffered_incremental_decoder_0.reset()
    var_1 = stream_reader_0.reset()
    stream_reader_0.__getattr__(stream_reader_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = True
    module_0.getincrementalencoder(bool_0)


def test_case_45():
    str_0 = "6]xsz"
    with pytest.raises(LookupError):
        module_0.getincrementaldecoder(str_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    none_type_0 = None
    module_0.getdecoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    incremental_encoder_0 = module_0.IncrementalEncoder()
    assert (
        f"{type(incremental_encoder_0).__module__}.{type(incremental_encoder_0).__qualname__}"
        == "codecs.IncrementalEncoder"
    )
    assert incremental_encoder_0.errors == "strict"
    assert incremental_encoder_0.buffer == ""
    assert module_0.BOM_UTF8 == b"\xef\xbb\xbf"
    assert module_0.BOM_LE == b"\xff\xfe"
    assert module_0.BOM_UTF16_LE == b"\xff\xfe"
    assert module_0.BOM_BE == b"\xfe\xff"
    assert module_0.BOM_UTF16_BE == b"\xfe\xff"
    assert module_0.BOM_UTF32_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM_UTF32_BE == b"\x00\x00\xfe\xff"
    assert module_0.BOM == b"\xff\xfe"
    assert module_0.BOM_UTF16 == b"\xff\xfe"
    assert module_0.BOM_UTF32 == b"\xff\xfe\x00\x00"
    assert module_0.BOM32_LE == b"\xff\xfe"
    assert module_0.BOM32_BE == b"\xfe\xff"
    assert module_0.BOM64_LE == b"\xff\xfe\x00\x00"
    assert module_0.BOM64_BE == b"\x00\x00\xfe\xff"
    module_0.getdecoder(incremental_encoder_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    module_0.getincrementaldecoder(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    none_type_0 = None
    module_0.StreamRecoder(none_type_0, bool_0, none_type_0, none_type_0, none_type_0)
