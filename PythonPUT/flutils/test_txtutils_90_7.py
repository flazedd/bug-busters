# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import txtutils as module_0
import re as module_1


def test_case_0():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(expand_tabs=bool_0, tabsize=bool_0)
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize is True
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )


def test_case_1():
    str_0 = "MCZ6t*W7ceB<qt[\\"
    int_0 = module_0.len_without_ansi(str_0)
    assert int_0 == 16
    assert module_0.hexversion == 50987248


def test_case_2():
    list_0 = []
    int_0 = module_0.len_without_ansi(list_0)
    assert int_0 == 0
    assert module_0.hexversion == 50987248


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.len_without_ansi(none_type_0)


def test_case_4():
    str_0 = "{+c."
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(expand_tabs=bool_0, tabsize=bool_0)
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize is False
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == "{+c."


def test_case_5():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "\n"
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == ""


def test_case_6():
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is False
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is False
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is False
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "+G\nG,p{%2=S"
    str_1 = '\t^R7\x0bR"\x0cZn]6\rz'
    str_2 = ""
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        initial_indent=str_2, break_long_words=str_0, tabsize=bool_0, placeholder=str_1
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width == 70
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is False
    assert ansi_text_wrapper_1.break_long_words == "+G\nG,p{%2=S"
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens is True
    assert ansi_text_wrapper_1.tabsize is False
    assert ansi_text_wrapper_1.max_lines is None
    str_3 = ansi_text_wrapper_0.fill(str_2)
    assert str_3 == ""


def test_case_7():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = ">Y3"
    str_1 = ansi_text_wrapper_0.fill(str_0)
    assert str_1 == ">Y3"
    str_2 = "\n"
    str_3 = ansi_text_wrapper_0.fill(str_2)
    assert str_3 == ""


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserStrinx`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped @tf8 bytes.\n       int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contins escaped\n            utf8 hexadecimal that references nvalid utf8 bytes.    "
    var_0 = ansi_text_wrapper_0.fill(str_0)
    assert (
        var_0
        == "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, [...]"
    )
    assert ansi_text_wrapper_0.placeholder_len == 6
    str_1 = ansi_text_wrapper_0.fill(var_0)
    assert (
        str_1
        == "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, [...]"
    )
    var_0.fill(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    str_0 = "t<mzO\x0cub%sVmz89LtS{Z"
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        bool_0,
        str_0,
        str_0,
        str_0,
        fix_sentence_endings=str_0,
        break_long_words=str_0,
        break_on_hyphens=bool_0,
        tabsize=bool_0,
        placeholder=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width is False
    assert ansi_text_wrapper_0.expand_tabs == "t<mzO\x0cub%sVmz89LtS{Z"
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings == "t<mzO\x0cub%sVmz89LtS{Z"
    assert ansi_text_wrapper_0.break_long_words == "t<mzO\x0cub%sVmz89LtS{Z"
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is False
    assert ansi_text_wrapper_0.tabsize is False
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_1 = "O"
    ansi_text_wrapper_0.wrap(str_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    regex_flag_0 = module_1.RegexFlag.LOCALE
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=regex_flag_0,
        break_on_hyphens=regex_flag_0,
        max_lines=regex_flag_0,
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words == module_1.RegexFlag.LOCALE
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens == module_1.RegexFlag.LOCALE
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines == module_1.RegexFlag.LOCALE
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "Converta :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text```converted into escapedutf8 bytes.\n       int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that referGnces invalid utf8 bytes.    "
    var_0 = ansi_text_wrapper_0.fill(str_0)
    assert (
        var_0
        == "Converta :obj:`str`, that may contain escaped utf8 hexadecimal, to\nbytes of escaped utf8 hexadecimal.      Args:         text (str or\n:obj:`~UserString`): The string input.         errors (str or\n:obj:`~UserString`): The error checking level.      Returns: [...]"
    )
    assert ansi_text_wrapper_0.placeholder_len == 6
    str_1 = ansi_text_wrapper_0.fill(var_0)
    assert (
        str_1
        == "Converta :obj:`str`, that may contain escaped utf8 hexadecimal, to\nbytes of escaped utf8 hexadecimal.      Args:         text (str or\n:obj:`~UserString`): The string input.         errors (str or\n:obj:`~UserString`): The error checking level.      Returns: [...]"
    )
    module_0.len_without_ansi(ansi_text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "Convert"
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_1 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``tex`` converted into escaped utf8 bytes.\n       int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.    "
    var_0 = module_0.AnsiTextWrapper(
        initial_indent=str_1,
        expand_tabs=bool_0,
        replace_whitespace=bool_0,
        placeholder=str_0,
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert var_0.width == 70
    assert var_0.expand_tabs is True
    assert var_0.replace_whitespace is True
    assert var_0.fix_sentence_endings is False
    assert var_0.break_long_words is True
    assert var_0.drop_whitespace is True
    assert var_0.break_on_hyphens is True
    assert var_0.tabsize == 8
    assert var_0.max_lines is None
    str_2 = "\n"
    list_0 = var_0.wrap(str_0)
    module_1.subn(var_0, str_2, var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        break_long_words=bool_0, break_on_hyphens=bool_0, max_lines=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is True
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is True
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    str_0 = "E"
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        bool_0,
        subsequent_indent=str_0,
        replace_whitespace=bool_0,
        fix_sentence_endings=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width is True
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is True
    assert ansi_text_wrapper_1.break_long_words is True
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens is True
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is None
    str_1 = "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` converted into escaped utf8 bytes.\n       int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.    "
    var_0 = ansi_text_wrapper_0.fill(str_1)
    assert (
        var_0
        == "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, [...]"
    )
    assert ansi_text_wrapper_0.placeholder_len == 6
    str_2 = "\n"
    str_3 = ansi_text_wrapper_0.fill(var_0)
    assert (
        str_3
        == "Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, [...]"
    )
    str_4 = ansi_text_wrapper_0.fill(str_2)
    assert str_4 == ""
    str_5 = ansi_text_wrapper_1.fill(str_1)
    assert (
        str_5
        == "C\nEo\nEn\nEv\nEe\nEr\nEt\nEa\nE:\nEo\nEb\nEj\nE:\nE`\nEs\nEt\nEr\nE`\nE,\nEt\nEh\nEa\nEt\nEm\nEa\nEy\nEc\nEo\nEn\nEt\nEa\nEi\nEn\nEe\nEs\nEc\nEa\nEp\nEe\nEd\nEu\nEt\nEf\nE8\nEh\nEe\nEx\nEa\nEd\nEe\nEc\nEi\nEm\nEa\nEl\nE,\nEt\nEo\nEb\nEy\nEt\nEe\nEs\nEo\nEf\nEe\nEs\nEc\nEa\nEp\nEe\nEd\nEu\nEt\nEf\nE8\nEh\nEe\nEx\nEa\nEd\nEe\nEc\nEi\nEm\nEa\nEl\nE.\nEA\nEr\nEg\nEs\nE:\nEt\nEe\nEx\nEt\nE(\nEs\nEt\nEr\nEo\nEr\nE:\nEo\nEb\nEj\nE:\nE`\nE~\nEU\nEs\nEe\nEr\nES\nEt\nEr\nEi\nEn\nEg\nE`\nE)\nE:\nET\nEh\nEe\nEs\nEt\nEr\nEi\nEn\nEg\nEi\nEn\nEp\nEu\nEt\nE.\nEe\nEr\nEr\nEo\nEr\nEs\nE(\nEs\nEt\nEr\nEo\nEr\nE:\nEo\nEb\nEj\nE:\nE`\nE~\nEU\nEs\nEe\nEr\nES\nEt\nEr\nEi\nEn\nEg\nE`\nE)\nE:\nET\nEh\nEe\nEe\nEr\nEr\nEo\nEr\nEc\nEh\nEe\nEc\nEk\nEi\nEn\nEg\nEl\nEe\nEv\nEe\nEl\nE.\nER\nEe\nEt\nEu\nEr\nEn\nEs\nE:\nEb\nEy\nEt\nEe\nEs\nE:\nET\nEh\nEe\nEg\nEi\nEv\nEe\nEn\nE`\nE`\nEt\nEe\nEx\nEt\nE`\nE`\nEc\nEo\nEn\nEv\nEe\nEr\nEt\nEe\nEd\nEi\nEn\nEt\nEo\nEe\nEs\nEc\nEa\nEp\nEe\nEd\nEu\nEt\nEf\nE8\nEb\nEy\nEt\nEe\nEs\nE.\nEi\nEn\nEt\nE:\nET\nEh\nEe\nEn\nEu\nEm\nEb\nEe\nEr\nEo\nEf\nEg\nEi\nEv\nEe\nEn\nE`\nE`\nEt\nEe\nEx\nEt\nE`\nE`\nEc\nEh\nEa\nEr\nEa\nEc\nEt\nEe\nEr\nEs\nEc\nEo\nEn\nEs\nEu\nEm\nEe\nEd\nER\nEa\nEi\nEs\nEe\nEs\nE:\nEU\nEn\nEi\nEc\nEo\nEd\nEe\nEE\nEn\nEc\nEo\nEd\nEe\nEE\nEr\nEr\nEo\nEr\nE:\nEi\nEf\nEt\nEh\nEe\nEg\nEi\nEv\nEe\nEn\nE`\nE`\nEt\nEe\nEx\nEt\nE`\nE`\nEc\nEo\nEn\nEt\nEa\nEi\nEn\nEs\nEe\nEs\nEc\nEa\nEp\nEe\nEd\nEu\nEt\nEf\nE8\nEh\nEe\nEx\nEa\nEd\nEe\nEc\nEi\nEm\nEa\nEl\nEt\nEh\nEa\nEt\nEr\nEe\nEf\nEe\nEr\nEe\nEn\nEc\nEe\nEs\nEi\nEn\nEv\nEa\nEl\nEi\nEd\nEu\nEt\nEf\nE8\nEb\nEy\nEt\nEe\nEs\nE."
    )
    str_6 = "b64"
    var_0.fill(str_6)


def test_case_13():
    str_0 = "7"
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    bool_0 = False
    none_type_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        expand_tabs=bool_0, drop_whitespace=none_type_0, break_on_hyphens=bool_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is None
    assert ansi_text_wrapper_0.break_on_hyphens is False
    assert ansi_text_wrapper_0.tabsize == 8
    assert ansi_text_wrapper_0.max_lines is None
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        initial_indent=str_0,
        break_long_words=regex_flag_0,
        break_on_hyphens=regex_flag_0,
        max_lines=bool_0,
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width == 70
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is False
    assert ansi_text_wrapper_1.break_long_words == module_1.RegexFlag.IGNORECASE
    assert ansi_text_wrapper_1.drop_whitespace is True
    assert ansi_text_wrapper_1.break_on_hyphens == module_1.RegexFlag.IGNORECASE
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is False
    str_1 = ansi_text_wrapper_1.fill(str_0)
    assert str_1 == "77"
    str_2 = ansi_text_wrapper_0.fill(str_0)
    assert str_2 == "7"
    str_3 = "Converta :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text```converted into escapedutf8 bytes.\n       int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that referGnces invalid utf8 bytes.    "
    var_0 = ansi_text_wrapper_1.fill(str_3)
    assert (
        var_0
        == "7Converta :obj:`str`, that may contain escaped utf8 hexadecimal, [...]"
    )
    assert ansi_text_wrapper_1.placeholder_len == 6
    str_4 = "latil1"
    list_0 = ansi_text_wrapper_0.wrap(str_4)
    str_5 = ansi_text_wrapper_1.fill(var_0)
    assert str_5 == "77Converta :obj:`str`, that may contain escaped utf8 [...]"


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "ra"
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(
        initial_indent=str_0, expand_tabs=bool_0, tabsize=bool_0, placeholder=str_0
    )
    assert (
        f"{type(ansi_text_wrapper_0).__module__}.{type(ansi_text_wrapper_0).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_0.width == 70
    assert ansi_text_wrapper_0.expand_tabs is False
    assert ansi_text_wrapper_0.replace_whitespace is True
    assert ansi_text_wrapper_0.fix_sentence_endings is False
    assert ansi_text_wrapper_0.break_long_words is True
    assert ansi_text_wrapper_0.drop_whitespace is True
    assert ansi_text_wrapper_0.break_on_hyphens is True
    assert ansi_text_wrapper_0.tabsize is False
    assert ansi_text_wrapper_0.max_lines is None
    assert module_0.hexversion == 50987248
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent).__module__}.{type(module_0.AnsiTextWrapper.initial_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.initial_indent_len.attrname == "initial_indent_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.initial_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len).__qualname__}"
        == "functools.cached_property"
    )
    assert (
        module_0.AnsiTextWrapper.subsequent_indent_len.attrname
        == "subsequent_indent_len"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__module__}.{type(module_0.AnsiTextWrapper.subsequent_indent_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder).__module__}.{type(module_0.AnsiTextWrapper.placeholder).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len).__qualname__}"
        == "functools.cached_property"
    )
    assert module_0.AnsiTextWrapper.placeholder_len.attrname == "placeholder_len"
    assert (
        f"{type(module_0.AnsiTextWrapper.placeholder_len.lock).__module__}.{type(module_0.AnsiTextWrapper.placeholder_len.lock).__qualname__}"
        == "_thread.RLock"
    )
    regex_flag_0 = module_1.RegexFlag.IGNORECASE
    str_1 = "\rQLIRcey1="
    str_2 = ""
    list_0 = [str_1, str_0, str_2]
    int_0 = module_0.len_without_ansi(list_0)
    assert int_0 == 12
    assert module_1.ASCII == module_1.RegexFlag.ASCII
    assert module_1.A == module_1.RegexFlag.ASCII
    assert module_1.IGNORECASE == module_1.RegexFlag.IGNORECASE
    assert module_1.I == module_1.RegexFlag.IGNORECASE
    assert module_1.LOCALE == module_1.RegexFlag.LOCALE
    assert module_1.L == module_1.RegexFlag.LOCALE
    assert module_1.UNICODE == module_1.RegexFlag.UNICODE
    assert module_1.U == module_1.RegexFlag.UNICODE
    assert module_1.MULTILINE == module_1.RegexFlag.MULTILINE
    assert module_1.M == module_1.RegexFlag.MULTILINE
    assert module_1.DOTALL == module_1.RegexFlag.DOTALL
    assert module_1.S == module_1.RegexFlag.DOTALL
    assert module_1.VERBOSE == module_1.RegexFlag.VERBOSE
    assert module_1.X == module_1.RegexFlag.VERBOSE
    assert module_1.TEMPLATE == module_1.RegexFlag.TEMPLATE
    assert module_1.T == module_1.RegexFlag.TEMPLATE
    assert module_1.DEBUG == module_1.RegexFlag.DEBUG
    bool_1 = True
    bool_2 = False
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(
        expand_tabs=bool_1, drop_whitespace=bool_2, break_on_hyphens=bool_2
    )
    assert (
        f"{type(ansi_text_wrapper_1).__module__}.{type(ansi_text_wrapper_1).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_1.width == 70
    assert ansi_text_wrapper_1.expand_tabs is True
    assert ansi_text_wrapper_1.replace_whitespace is True
    assert ansi_text_wrapper_1.fix_sentence_endings is False
    assert ansi_text_wrapper_1.break_long_words is True
    assert ansi_text_wrapper_1.drop_whitespace is False
    assert ansi_text_wrapper_1.break_on_hyphens is False
    assert ansi_text_wrapper_1.tabsize == 8
    assert ansi_text_wrapper_1.max_lines is None
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(
        break_long_words=regex_flag_0,
        break_on_hyphens=regex_flag_0,
        max_lines=regex_flag_0,
    )
    assert (
        f"{type(ansi_text_wrapper_2).__module__}.{type(ansi_text_wrapper_2).__qualname__}"
        == "txtutils.AnsiTextWrapper"
    )
    assert ansi_text_wrapper_2.width == 70
    assert ansi_text_wrapper_2.expand_tabs is True
    assert ansi_text_wrapper_2.replace_whitespace is True
    assert ansi_text_wrapper_2.fix_sentence_endings is False
    assert ansi_text_wrapper_2.break_long_words == module_1.RegexFlag.IGNORECASE
    assert ansi_text_wrapper_2.drop_whitespace is True
    assert ansi_text_wrapper_2.break_on_hyphens == module_1.RegexFlag.IGNORECASE
    assert ansi_text_wrapper_2.tabsize == 8
    assert ansi_text_wrapper_2.max_lines == module_1.RegexFlag.IGNORECASE
    str_3 = ansi_text_wrapper_2.fill(str_0)
    assert str_3 == "ra"
    none_type_0 = None
    ansi_text_wrapper_0.fill(none_type_0)
