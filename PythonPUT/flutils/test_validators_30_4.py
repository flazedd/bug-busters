# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import validators as module_0
import collections as module_1


def test_case_0():
    bool_0 = True
    with pytest.raises(TypeError):
        module_0.validate_identifier(bool_0)


def test_case_1():
    str_0 = "}h(O05/:KveEZb"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_2():
    str_0 = "\n"
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_3():
    str_0 = "Yr|'/7%+j`fDR\""
    bool_0 = False
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0, bool_0)


def test_case_4():
    str_0 = "8_ /m<2X"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_0)


def test_case_5():
    str_0 = "s2trict"
    none_type_0 = module_0.validate_identifier(str_0)


def test_case_6():
    dict_0 = {}
    user_string_0 = module_1.UserString(dict_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 2
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0)


def test_case_7():
    str_0 = "strsc"
    bool_0 = False
    none_type_0 = module_0.validate_identifier(str_0, bool_0)
    none_type_1 = module_0.validate_identifier(str_0, str_0)
    none_type_2 = module_0.validate_identifier(str_0, none_type_1)
    user_string_0 = module_1.UserString(bool_0)
    assert (
        f"{type(user_string_0).__module__}.{type(user_string_0).__qualname__}"
        == "collections.UserString"
    )
    assert len(user_string_0) == 5
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(user_string_0, bool_0)


def test_case_8():
    str_0 = "sWtrsc"
    none_type_0 = module_0.validate_identifier(str_0, str_0)
    bool_0 = False
    str_1 = "_"
    with pytest.raises(SyntaxError):
        module_0.validate_identifier(str_1, bool_0)
