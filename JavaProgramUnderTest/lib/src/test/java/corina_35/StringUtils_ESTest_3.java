/*
 * This file was automatically generated by EvoSuite
 * Tue May 28 16:39:10 GMT 2024
 */

package corina_35;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class StringUtils_ESTest_3 {

    @Test
    public void test00()  throws Throwable  {
        String string0 = StringUtils.substitute("&gt;", "&gt;", "5~uUu[OwW8");
        assertEquals("5~uUu[OwW8", string0);
    }

    @Test
    public void test01()  throws Throwable  {
        String string0 = StringUtils.leftPad("CgK&e", 0);
        assertEquals("CgK&e", string0);
    }

    @Test
    public void test02()  throws Throwable  {
        String string0 = StringUtils.substitute("", "                                                                                                                                                                           ", "                                                                                                                                                                           ");
        assertEquals("", string0);
    }

    @Test
    public void test03()  throws Throwable  {
        String string0 = StringUtils.leftPad("", 0);
        assertEquals("", string0);
    }

    @Test
    public void test04()  throws Throwable  {
        int[] intArray0 = StringUtils.extractInts("0");
        assertArrayEquals(new int[] {0}, intArray0);
    }

    @Test
    public void test05()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("");
        assertEquals("", string0);
    }

    @Test
    public void test06()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.substitute((String) null, (String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
//            verifyException("corina.util.StringUtils", e);
        }
    }

    @Test
    public void test07()  throws Throwable  {
        String string0 = StringUtils.leftPad("", 5494);
        StringUtils.splitBy(string0, ')');
        // Undeclared exception!
        StringUtils.splitByLines(string0);
    }

    @Test
    public void test08()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.splitByLines((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test09()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.splitBy((String) null, '1');
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test10()  throws Throwable  {
        StringUtils.leftPad("wgB]naxkK", 5177);
        // Undeclared exception!
        StringUtils.leftPad("wgB]naxkK", 5177);
    }

    @Test
    public void test11()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.leftPad((String) null, (-1728));
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test12()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.extractInts((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test13()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.escapeForXML((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
//            verifyException("corina.util.StringUtils", e);
        }
    }

    @Test
    public void test14()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("9hd7h^f r;>n-(_jZ");
        assertEquals("9hd7h^f r;&gt;n-(_jZ", string0);
    }

    @Test
    public void test15()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("?qBa&6IRX");
        assertEquals("?qBa&amp;6IRX", string0);
    }

    @Test
    public void test16()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("2z=D,V;DOe!!uF'\"e");
        assertEquals("2z=D,V;DOe!!uF&apos;&quot;e", string0);
    }

    @Test
    public void test17()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("pD ^<kzcp/=D");
        assertEquals("pD ^&lt;&#x007f;kzcp/=D", string0);
    }

    @Test
    public void test18()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.extractInts("MND(BL");
            fail("Expecting exception: NumberFormatException");

        } catch(NumberFormatException e) {
            //
            // For input string: \"MND(BL\"
            //
//            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test
    public void test19()  throws Throwable  {
        int[] intArray0 = StringUtils.extractInts("                                                                                                                                                                           ");
        assertEquals(0, intArray0.length);
    }

    @Test
    public void test20()  throws Throwable  {
        String[] stringArray0 = StringUtils.splitBy("&amp;", 'm');
        assertEquals(2, stringArray0.length);
    }

    @Test
    public void test21()  throws Throwable  {
        String[] stringArray0 = StringUtils.splitByLines("pD ^<kzcp/=D");
        assertEquals(1, stringArray0.length);
    }

    @Test
    public void test22()  throws Throwable  {
        String string0 = StringUtils.leftPad("OQ|r(2[3!2KMAeqiX", 27);
        assertEquals("          OQ|r(2[3!2KMAeqiX", string0);
    }
}
