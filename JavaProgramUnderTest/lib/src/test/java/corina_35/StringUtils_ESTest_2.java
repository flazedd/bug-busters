/*
 * This file was automatically generated by EvoSuite
 * Tue May 28 16:39:26 GMT 2024
 */

package corina_35;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class StringUtils_ESTest_2 {

    @Test
    public void test00()  throws Throwable  {
        String string0 = StringUtils.substitute("&bfS*<lg", "&bfS*<lg", "&bfS*<lg");
        assertEquals("&bfS*<lg", string0);
    }

    @Test
    public void test01()  throws Throwable  {
        String string0 = StringUtils.leftPad("%TF`a@x3Im", 17);
        assertEquals("       %TF`a@x3Im", string0);
    }

    @Test
    public void test02()  throws Throwable  {
        String string0 = StringUtils.leftPad("", 0);
        assertEquals("", string0);
    }

    @Test
    public void test03()  throws Throwable  {
        String string0 = StringUtils.substitute("", "st;4mXyXXeU=Ol3vw", "st;4mXyXXeU=Ol3vw");
        assertEquals("", string0);
    }

    @Test
    public void test04()  throws Throwable  {
        int[] intArray0 = StringUtils.extractInts("");
        assertArrayEquals(new int[] {}, intArray0);
    }

    @Test
    public void test05()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("");
        assertEquals("", string0);
    }

    @Test
    public void test06()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.substitute((String) null, (String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
//            verifyException("corina.util.StringUtils", e);
        }
    }

    @Test
    public void test07()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.splitByLines((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test08()  throws Throwable  {
        String string0 = StringUtils.leftPad("", 4957);
        StringUtils.splitBy(string0, 'K');
        StringUtils.splitByLines(string0);
        // Undeclared exception!
        StringUtils.splitBy(string0, 'K');
    }

    @Test
    public void test09()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.splitBy((String) null, 'N');
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test10()  throws Throwable  {
        StringUtils.leftPad("+`l[#8BABuijh", 6548);
        // Undeclared exception!
        StringUtils.leftPad("+`l[#8BABuijh", 6548);
    }

    @Test
    public void test11()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.leftPad((String) null, 38);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test12()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.extractInts("(90");
            fail("Expecting exception: NumberFormatException");

        } catch(NumberFormatException e) {
            //
            // For input string: \"(90\"
            //
//            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test
    public void test13()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.extractInts((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test14()  throws Throwable  {
        String string0 = StringUtils.leftPad("]ze", 5196);
        StringUtils.escapeForXML(string0);
        // Undeclared exception!
        StringUtils.escapeForXML(string0);
    }

    @Test
    public void test15()  throws Throwable  {
        // Undeclared exception!
        try {
            StringUtils.escapeForXML((String) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    public void test16()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("=cQZCLd");
        assertEquals("=&#x007f;cQZCLd", string0);
    }

    @Test
    public void test17()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("W?@+3Sfh>el7ShS$+_`");
        assertEquals("W?@+3Sfh&gt;el7ShS$+_`", string0);
    }

    @Test
    public void test18()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("x]F'*y");
        assertEquals("x]F&apos;*y", string0);
    }

    @Test
    public void test19()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("K&lt;$&quot;[m6J");
        assertEquals("K&amp;lt;$&amp;quot;[m6J", string0);
    }

    @Test
    public void test20()  throws Throwable  {
        String string0 = StringUtils.escapeForXML("K<$\"[m6J");
        assertEquals("K&lt;$&quot;[m6J", string0);
    }

    @Test
    public void test21()  throws Throwable  {
        int[] intArray0 = StringUtils.extractInts("5");
        assertArrayEquals(new int[] {5}, intArray0);
    }

    @Test
    public void test22()  throws Throwable  {
        String[] stringArray0 = StringUtils.splitBy("ILLEGAL-XML-CHAR:", 'H');
        assertEquals(2, stringArray0.length);
    }

    @Test
    public void test23()  throws Throwable  {
        String string0 = StringUtils.leftPad("", (-2236));
        assertEquals("", string0);
    }
}
